buildscript {
    repositories {
        jcenter()
        //Add only for SNAPSHOT versions
        //maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.1"
    }
}

plugins {
    id "java"
    id "maven"
    id "jacoco"
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "com.diffplug.gradle.spotless" version "3.25.0"
    id "net.ltgt.errorprone" version "1.1.1"
    id "com.github.kt3k.coveralls" version "2.8.4"
    id "biz.aQute.bnd.builder" version "4.2.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = GROUP
version = VERSION_NAME

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = "UTF-8"

    options.errorprone {
      // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
      if ((JavaVersion.current().majorVersion as Integer) > 11) {
        check("Finally", net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      }
      // This check is broken in Java 13.  See https://github.com/google/error-prone/issues/1106
      if ((JavaVersion.current().majorVersion as Integer) > 12) {
        check("TypeParameterUnusedInFormals", net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      }
    }
}

compileJava {
    options.compilerArgs << "-Werror"
}

configurations.all {
}

repositories {
     jcenter()
}

dependencies {
    errorprone group: "com.google.errorprone", name: "error_prone_core", version: "2.3.3"
    errorproneJavac group: "com.google.errorprone", name: "javac", version:"9+181-r4173-1"
    implementation group: "com.google.code.gson", name: "gson", version:"2.8.6"
    testImplementation group: "com.google.guava", name: "guava", version:"28.1-jre"
    testImplementation group: "com.squareup.okhttp3", name: "mockwebserver", version: "4.2.2"
    testImplementation group: "org.mockito", name: "mockito-core", version:"3.1.0"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.5.2"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.5.2"
    testRuntimeOnly group: "org.slf4j", name: "slf4j-api", version: "1.7.29"
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                   "Implementation-Version": VERSION_NAME,
                   "Implementation-Vendor": VENDOR_NAME,
                   "Bundle-SymbolicName": POM_ARTIFACT_ID,
                   "Export-Package": "com.stripe.*")

        archiveVersion = VERSION_NAME
    }
}

lombok {
    version = "1.18.10"
    sha256 = ""
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/main")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokTest(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/test")
    outputs.dir(outputDir)
    sourceSets.test.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = true
}

apply from: "deploy.gradle"

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

spotless {
  java {
    googleJavaFormat("1.7")
    removeUnusedImports()
  }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

coveralls {
    jacocoReportPath "build/reports/jacoco/test/jacocoTestReport.xml"
}
