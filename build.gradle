buildscript {
    repositories {
        jcenter()
        //Add only for SNAPSHOT versions
        //maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'io.franzbecker.gradle-lombok' version '2.1'
    id "net.ltgt.errorprone" version "0.7.1"
    id 'checkstyle'
    id 'net.saliman.cobertura' version '2.6.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'biz.aQute.bnd.builder' version '4.2.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = GROUP
version = VERSION_NAME

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = 'UTF-8'
}

compileJava {
    options.compilerArgs << "-Werror"
}

configurations.all {
}

repositories {
     jcenter()
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.3.3'
    errorproneJavac group: 'com.google.errorprone', name: 'javac', version:'9+181-r4173-1'
    testCompile group: 'com.google.guava', name: 'guava', version:'27.1-jre'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'2.26.0'
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.14.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.1'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.1'
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                   "Implementation-Version": VERSION_NAME,
                   "Implementation-Vendor": VENDOR_NAME,
                   "Bundle-SymbolicName": POM_ARTIFACT_ID,
                   "Export-Package": 'com.stripe.*')

        version = VERSION_NAME
    }
}

lombok {
    version = "1.18.6"
    sha256 = ""
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/main")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokTest(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/test")
    outputs.dir(outputDir)
    sourceSets.test.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}


javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = true
}

apply from: 'deploy.gradle'

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

checkstyle {
    toolVersion = '8.19'
}

cobertura {
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageIgnoreTrivial = true // ignore getters/setters in coverage report
    coverageIgnoreMethodAnnotations = ["java.lang.Deprecated", "lombok.Generated"]
}
