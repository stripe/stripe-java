// File generated from our OpenAPI spec
package com.stripe.param.checkout;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import com.stripe.net.ApiRequestParams.EnumParam;
import com.stripe.param.common.EmptyParam;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;

@Getter
public class SessionCreateParams extends ApiRequestParams {
  /**
   * Configure actions after a Checkout Session has expired.
   */
  @SerializedName("after_expiration")
  AfterExpiration afterExpiration;

  /**
   * Enables user redeemable promotion codes.
   */
  @SerializedName("allow_promotion_codes")
  Boolean allowPromotionCodes;

  /**
   * Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions.
   */
  @SerializedName("automatic_tax")
  AutomaticTax automaticTax;

  /**
   * Specify whether Checkout should collect the customer's billing address.
   */
  @SerializedName("billing_address_collection")
  BillingAddressCollection billingAddressCollection;

  /**
   * The URL the customer will be directed to if they decide to cancel payment and return to your website.
   */
  @SerializedName("cancel_url")
  String cancelUrl;

  /**
   * A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
   */
  @SerializedName("client_reference_id")
  String clientReferenceId;

  /**
   * Configure fields for the Checkout Session to gather active consent from customers.
   */
  @SerializedName("consent_collection")
  ConsentCollection consentCollection;

  /**
   * ID of an existing Customer, if one exists. In {@code payment} mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In {@code subscription} mode, the customer’s <a href="https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method">default payment method</a> will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.
   *
   * <p>If the Customer already has a valid <a href="https://stripe.com/docs/api/customers/object#customer_object-email">email</a> set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid {@code email}, Checkout will set the email entered during the session on the Customer.
   *
   * <p>If blank for Checkout Sessions in {@code payment} or {@code subscription} mode, Checkout will create a new Customer object based on information provided during the payment flow.
   *
   * <p>You can set <a href="https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage">{@code payment_intent_data.setup_future_usage}</a> to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
   */
  @SerializedName("customer")
  String customer;

  /**
   * Configure whether a Checkout Session creates a <a href="https://stripe.com/docs/api/customers">Customer</a> during Session confirmation.
   *
   * <p>When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with <a href="https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details">customer_details</a>.
   *
   * <p>Sessions that don't create Customers instead create <a href="https://support.stripe.com/questions/guest-customer-faq">Guest Customers</a> in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.
   *
   * <p>Can only be set in {@code payment} and {@code setup} mode.
   */
  @SerializedName("customer_creation")
  CustomerCreation customerCreation;

  /**
   * If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the {@code customer} field.
   */
  @SerializedName("customer_email")
  String customerEmail;

  /**
   * Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when {@code customer} is provided.
   */
  @SerializedName("customer_update")
  CustomerUpdate customerUpdate;

  /**
   * The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
   */
  @SerializedName("discounts")
  List<Discount> discounts;

  /**
   * Specifies which fields in the response should be expanded.
   */
  @SerializedName("expand")
  List<String> expand;

  /**
   * The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 1 to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
   */
  @SerializedName("expires_at")
  Long expiresAt;

  /**
   * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
   */
  @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
  Map<String, Object> extraParams;

  /**
   * A list of items the customer is purchasing. Use this parameter to pass one-time or recurring <a href="https://stripe.com/docs/api/prices">Prices</a>.
   *
   * <p>For {@code payment} mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
   *
   * <p>For {@code subscription} mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices in will be on the initial invoice only.
   */
  @SerializedName("line_items")
  List<LineItem> lineItems;

  /**
   * The IETF language tag of the locale Checkout is displayed in. If blank or {@code auto}, the browser's locale is used.
   */
  @SerializedName("locale")
  Locale locale;

  /**
   * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
   */
  @SerializedName("metadata")
  Map<String, String> metadata;

  /**
   * The mode of the Checkout Session. Required when using prices or {@code setup} mode. Pass {@code subscription} if the Checkout Session includes at least one recurring item.
   */
  @SerializedName("mode")
  Mode mode;

  /**
   * A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in {@code payment} mode.
   */
  @SerializedName("payment_intent_data")
  PaymentIntentData paymentIntentData;

  /**
   * Payment-method-specific configuration.
   */
  @SerializedName("payment_method_options")
  PaymentMethodOptions paymentMethodOptions;

  /**
   * A list of the types of payment methods (e.g., {@code card}) this Checkout Session can accept.
   *
   * <p>Do not include this attribute if you prefer to manage your payment methods from the <a href="https://dashboard.stripe.com/settings/payment_methods">Stripe Dashboard</a>.
   *
   * <p>Read more about the supported payment methods and their requirements in our <a href="https://stripe.com/docs/payments/checkout/payment-methods">payment method details guide</a>.
   *
   * <p>If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
   */
  @SerializedName("payment_method_types")
  List<PaymentMethodType> paymentMethodTypes;

  /**
   * Controls phone number collection settings for the session.
   *
   * <p>We recommend that you review your privacy policy and check with your legal contacts before using this feature. Learn more about <a href="https://stripe.com/docs/payments/checkout/phone-numbers">collecting phone numbers with Checkout</a>.
   */
  @SerializedName("phone_number_collection")
  PhoneNumberCollection phoneNumberCollection;

  /**
   * A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in {@code setup} mode.
   */
  @SerializedName("setup_intent_data")
  SetupIntentData setupIntentData;

  /**
   * When set, provides configuration for Checkout to collect a shipping address from a customer.
   */
  @SerializedName("shipping_address_collection")
  ShippingAddressCollection shippingAddressCollection;

  /**
   * The shipping rate options to apply to this Session.
   */
  @SerializedName("shipping_options")
  List<ShippingOption> shippingOptions;

  /**
   * [Deprecated] The shipping rate to apply to this Session. Only up to one may be specified.
   */
  @SerializedName("shipping_rates")
  List<String> shippingRates;

  /**
   * Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. {@code submit_type} can only be specified on Checkout Sessions in {@code payment} mode, but not Checkout Sessions in {@code subscription} or {@code setup} mode.
   */
  @SerializedName("submit_type")
  SubmitType submitType;

  /**
   * A subset of parameters to be passed to subscription creation for Checkout Sessions in {@code subscription} mode.
   */
  @SerializedName("subscription_data")
  SubscriptionData subscriptionData;

  /**
   * The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on <a href="https://stripe.com/docs/payments/checkout/custom-success-page">customizing your success page</a>.
   */
  @SerializedName("success_url")
  String successUrl;

  /**
   * Controls tax ID collection settings for the session.
   */
  @SerializedName("tax_id_collection")
  TaxIdCollection taxIdCollection;

  private SessionCreateParams(
      AfterExpiration afterExpiration,
      Boolean allowPromotionCodes,
      AutomaticTax automaticTax,
      BillingAddressCollection billingAddressCollection,
      String cancelUrl,
      String clientReferenceId,
      ConsentCollection consentCollection,
      String customer,
      CustomerCreation customerCreation,
      String customerEmail,
      CustomerUpdate customerUpdate,
      List<Discount> discounts,
      List<String> expand,
      Long expiresAt,
      Map<String, Object> extraParams,
      List<LineItem> lineItems,
      Locale locale,
      Map<String, String> metadata,
      Mode mode,
      PaymentIntentData paymentIntentData,
      PaymentMethodOptions paymentMethodOptions,
      List<PaymentMethodType> paymentMethodTypes,
      PhoneNumberCollection phoneNumberCollection,
      SetupIntentData setupIntentData,
      ShippingAddressCollection shippingAddressCollection,
      List<ShippingOption> shippingOptions,
      List<String> shippingRates,
      SubmitType submitType,
      SubscriptionData subscriptionData,
      String successUrl,
      TaxIdCollection taxIdCollection) {
    this.afterExpiration = afterExpiration;
    this.allowPromotionCodes = allowPromotionCodes;
    this.automaticTax = automaticTax;
    this.billingAddressCollection = billingAddressCollection;
    this.cancelUrl = cancelUrl;
    this.clientReferenceId = clientReferenceId;
    this.consentCollection = consentCollection;
    this.customer = customer;
    this.customerCreation = customerCreation;
    this.customerEmail = customerEmail;
    this.customerUpdate = customerUpdate;
    this.discounts = discounts;
    this.expand = expand;
    this.expiresAt = expiresAt;
    this.extraParams = extraParams;
    this.lineItems = lineItems;
    this.locale = locale;
    this.metadata = metadata;
    this.mode = mode;
    this.paymentIntentData = paymentIntentData;
    this.paymentMethodOptions = paymentMethodOptions;
    this.paymentMethodTypes = paymentMethodTypes;
    this.phoneNumberCollection = phoneNumberCollection;
    this.setupIntentData = setupIntentData;
    this.shippingAddressCollection = shippingAddressCollection;
    this.shippingOptions = shippingOptions;
    this.shippingRates = shippingRates;
    this.submitType = submitType;
    this.subscriptionData = subscriptionData;
    this.successUrl = successUrl;
    this.taxIdCollection = taxIdCollection;
  }
  public static Builder builder() {
    return new Builder();
  }
  public static class Builder {
    private AfterExpiration afterExpiration;

    private Boolean allowPromotionCodes;

    private AutomaticTax automaticTax;

    private BillingAddressCollection billingAddressCollection;

    private String cancelUrl;

    private String clientReferenceId;

    private ConsentCollection consentCollection;

    private String customer;

    private CustomerCreation customerCreation;

    private String customerEmail;

    private CustomerUpdate customerUpdate;

    private List<Discount> discounts;

    private List<String> expand;

    private Long expiresAt;

    private Map<String, Object> extraParams;

    private List<LineItem> lineItems;

    private Locale locale;

    private Map<String, String> metadata;

    private Mode mode;

    private PaymentIntentData paymentIntentData;

    private PaymentMethodOptions paymentMethodOptions;

    private List<PaymentMethodType> paymentMethodTypes;

    private PhoneNumberCollection phoneNumberCollection;

    private SetupIntentData setupIntentData;

    private ShippingAddressCollection shippingAddressCollection;

    private List<ShippingOption> shippingOptions;

    private List<String> shippingRates;

    private SubmitType submitType;

    private SubscriptionData subscriptionData;

    private String successUrl;

    private TaxIdCollection taxIdCollection;

    /**
     * Finalize and obtain parameter instance from this builder.
     */
    public SessionCreateParams build() {
      return new SessionCreateParams(
        this.afterExpiration,
        this.allowPromotionCodes,
        this.automaticTax,
        this.billingAddressCollection,
        this.cancelUrl,
        this.clientReferenceId,
        this.consentCollection,
        this.customer,
        this.customerCreation,
        this.customerEmail,
        this.customerUpdate,
        this.discounts,
        this.expand,
        this.expiresAt,
        this.extraParams,
        this.lineItems,
        this.locale,
        this.metadata,
        this.mode,
        this.paymentIntentData,
        this.paymentMethodOptions,
        this.paymentMethodTypes,
        this.phoneNumberCollection,
        this.setupIntentData,
        this.shippingAddressCollection,
        this.shippingOptions,
        this.shippingRates,
        this.submitType,
        this.subscriptionData,
        this.successUrl,
        this.taxIdCollection
      );
    }

    /**
     * Configure actions after a Checkout Session has expired.
     */
    public Builder setAfterExpiration(AfterExpiration afterExpiration) {
      this.afterExpiration = afterExpiration;
      return this;
    }

    /**
     * Enables user redeemable promotion codes.
     */
    public Builder setAllowPromotionCodes(Boolean allowPromotionCodes) {
      this.allowPromotionCodes = allowPromotionCodes;
      return this;
    }

    /**
     * Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions.
     */
    public Builder setAutomaticTax(AutomaticTax automaticTax) {
      this.automaticTax = automaticTax;
      return this;
    }

    /**
     * Specify whether Checkout should collect the customer's billing address.
     */
    public Builder setBillingAddressCollection(BillingAddressCollection billingAddressCollection) {
      this.billingAddressCollection = billingAddressCollection;
      return this;
    }

    /**
     * The URL the customer will be directed to if they decide to cancel payment and return to your website.
     */
    public Builder setCancelUrl(String cancelUrl) {
      this.cancelUrl = cancelUrl;
      return this;
    }

    /**
     * A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
     */
    public Builder setClientReferenceId(String clientReferenceId) {
      this.clientReferenceId = clientReferenceId;
      return this;
    }

    /**
     * Configure fields for the Checkout Session to gather active consent from customers.
     */
    public Builder setConsentCollection(ConsentCollection consentCollection) {
      this.consentCollection = consentCollection;
      return this;
    }

    /**
     * ID of an existing Customer, if one exists. In {@code payment} mode, the customer’s most recent card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In {@code subscription} mode, the customer’s <a href="https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method">default payment method</a> will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.
     *
     * <p>If the Customer already has a valid <a href="https://stripe.com/docs/api/customers/object#customer_object-email">email</a> set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid {@code email}, Checkout will set the email entered during the session on the Customer.
     *
     * <p>If blank for Checkout Sessions in {@code payment} or {@code subscription} mode, Checkout will create a new Customer object based on information provided during the payment flow.
     *
     * <p>You can set <a href="https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage">{@code payment_intent_data.setup_future_usage}</a> to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
     */
    public Builder setCustomer(String customer) {
      this.customer = customer;
      return this;
    }

    /**
     * Configure whether a Checkout Session creates a <a href="https://stripe.com/docs/api/customers">Customer</a> during Session confirmation.
     *
     * <p>When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with <a href="https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details">customer_details</a>.
     *
     * <p>Sessions that don't create Customers instead create <a href="https://support.stripe.com/questions/guest-customer-faq">Guest Customers</a> in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.
     *
     * <p>Can only be set in {@code payment} and {@code setup} mode.
     */
    public Builder setCustomerCreation(CustomerCreation customerCreation) {
      this.customerCreation = customerCreation;
      return this;
    }

    /**
     * If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the {@code customer} field.
     */
    public Builder setCustomerEmail(String customerEmail) {
      this.customerEmail = customerEmail;
      return this;
    }

    /**
     * Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when {@code customer} is provided.
     */
    public Builder setCustomerUpdate(CustomerUpdate customerUpdate) {
      this.customerUpdate = customerUpdate;
      return this;
    }

    /**
     * Add an element to `discounts` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#discounts} for the field documentation.
     */
    public Builder addDiscount(Discount element) {
      if (this.discounts == null) {
        this.discounts = new ArrayList<>();
      }
      this.discounts.add(element);
      return this;
    }

    /**
     * Add all elements to `discounts` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#discounts} for the field documentation.
     */
    public Builder addAllDiscount(List<Discount> elements) {
      if (this.discounts == null) {
        this.discounts = new ArrayList<>();
      }
      this.discounts.addAll(elements);
      return this;
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#expand} for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /**
     * Add all elements to `expand` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#expand} for the field documentation.
     */
    public Builder addAllExpand(List<String> elements) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.addAll(elements);
      return this;
    }

    /**
     * The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 1 to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
     */
    public Builder setExpiresAt(Long expiresAt) {
      this.expiresAt = expiresAt;
      return this;
    }

    /**
     * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams#extraParams} for the field documentation.
     */
    public Builder putExtraParam(String key, Object value) {
      if (this.extraParams == null) {
        this.extraParams = new HashMap<>();
      }
      this.extraParams.put(key, value);
      return this;
    }

    /**
     * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams#extraParams} for the field documentation.
     */
    public Builder putAllExtraParam(Map<String, Object> map) {
      if (this.extraParams == null) {
        this.extraParams = new HashMap<>();
      }
      this.extraParams.putAll(map);
      return this;
    }

    /**
     * Add an element to `lineItems` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#lineItems} for the field documentation.
     */
    public Builder addLineItem(LineItem element) {
      if (this.lineItems == null) {
        this.lineItems = new ArrayList<>();
      }
      this.lineItems.add(element);
      return this;
    }

    /**
     * Add all elements to `lineItems` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#lineItems} for the field documentation.
     */
    public Builder addAllLineItem(List<LineItem> elements) {
      if (this.lineItems == null) {
        this.lineItems = new ArrayList<>();
      }
      this.lineItems.addAll(elements);
      return this;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or {@code auto}, the browser's locale is used.
     */
    public Builder setLocale(Locale locale) {
      this.locale = locale;
      return this;
    }

    /**
     * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams#metadata} for the field documentation.
     */
    public Builder putMetadata(String key, String value) {
      if (this.metadata == null) {
        this.metadata = new HashMap<>();
      }
      this.metadata.put(key, value);
      return this;
    }

    /**
     * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams#metadata} for the field documentation.
     */
    public Builder putAllMetadata(Map<String, String> map) {
      if (this.metadata == null) {
        this.metadata = new HashMap<>();
      }
      this.metadata.putAll(map);
      return this;
    }

    /**
     * The mode of the Checkout Session. Required when using prices or {@code setup} mode. Pass {@code subscription} if the Checkout Session includes at least one recurring item.
     */
    public Builder setMode(Mode mode) {
      this.mode = mode;
      return this;
    }

    /**
     * A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in {@code payment} mode.
     */
    public Builder setPaymentIntentData(PaymentIntentData paymentIntentData) {
      this.paymentIntentData = paymentIntentData;
      return this;
    }

    /**
     * Payment-method-specific configuration.
     */
    public Builder setPaymentMethodOptions(PaymentMethodOptions paymentMethodOptions) {
      this.paymentMethodOptions = paymentMethodOptions;
      return this;
    }

    /**
     * Add an element to `paymentMethodTypes` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#paymentMethodTypes} for the field documentation.
     */
    public Builder addPaymentMethodType(PaymentMethodType element) {
      if (this.paymentMethodTypes == null) {
        this.paymentMethodTypes = new ArrayList<>();
      }
      this.paymentMethodTypes.add(element);
      return this;
    }

    /**
     * Add all elements to `paymentMethodTypes` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#paymentMethodTypes} for the field documentation.
     */
    public Builder addAllPaymentMethodType(List<PaymentMethodType> elements) {
      if (this.paymentMethodTypes == null) {
        this.paymentMethodTypes = new ArrayList<>();
      }
      this.paymentMethodTypes.addAll(elements);
      return this;
    }

    /**
     * Controls phone number collection settings for the session.
     *
     * <p>We recommend that you review your privacy policy and check with your legal contacts before using this feature. Learn more about <a href="https://stripe.com/docs/payments/checkout/phone-numbers">collecting phone numbers with Checkout</a>.
     */
    public Builder setPhoneNumberCollection(PhoneNumberCollection phoneNumberCollection) {
      this.phoneNumberCollection = phoneNumberCollection;
      return this;
    }

    /**
     * A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in {@code setup} mode.
     */
    public Builder setSetupIntentData(SetupIntentData setupIntentData) {
      this.setupIntentData = setupIntentData;
      return this;
    }

    /**
     * When set, provides configuration for Checkout to collect a shipping address from a customer.
     */
    public Builder setShippingAddressCollection(
        ShippingAddressCollection shippingAddressCollection) {
      this.shippingAddressCollection = shippingAddressCollection;
      return this;
    }

    /**
     * Add an element to `shippingOptions` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#shippingOptions} for the field documentation.
     */
    public Builder addShippingOption(ShippingOption element) {
      if (this.shippingOptions == null) {
        this.shippingOptions = new ArrayList<>();
      }
      this.shippingOptions.add(element);
      return this;
    }

    /**
     * Add all elements to `shippingOptions` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#shippingOptions} for the field documentation.
     */
    public Builder addAllShippingOption(List<ShippingOption> elements) {
      if (this.shippingOptions == null) {
        this.shippingOptions = new ArrayList<>();
      }
      this.shippingOptions.addAll(elements);
      return this;
    }

    /**
     * Add an element to `shippingRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#shippingRates} for the field documentation.
     */
    public Builder addShippingRate(String element) {
      if (this.shippingRates == null) {
        this.shippingRates = new ArrayList<>();
      }
      this.shippingRates.add(element);
      return this;
    }

    /**
     * Add all elements to `shippingRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams#shippingRates} for the field documentation.
     */
    public Builder addAllShippingRate(List<String> elements) {
      if (this.shippingRates == null) {
        this.shippingRates = new ArrayList<>();
      }
      this.shippingRates.addAll(elements);
      return this;
    }

    /**
     * Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. {@code submit_type} can only be specified on Checkout Sessions in {@code payment} mode, but not Checkout Sessions in {@code subscription} or {@code setup} mode.
     */
    public Builder setSubmitType(SubmitType submitType) {
      this.submitType = submitType;
      return this;
    }

    /**
     * A subset of parameters to be passed to subscription creation for Checkout Sessions in {@code subscription} mode.
     */
    public Builder setSubscriptionData(SubscriptionData subscriptionData) {
      this.subscriptionData = subscriptionData;
      return this;
    }

    /**
     * The URL to which Stripe should send customers when payment or setup is complete. If you’d like to use information from the successful Checkout Session on your page, read the guide on <a href="https://stripe.com/docs/payments/checkout/custom-success-page">customizing your success page</a>.
     */
    public Builder setSuccessUrl(String successUrl) {
      this.successUrl = successUrl;
      return this;
    }

    /**
     * Controls tax ID collection settings for the session.
     */
    public Builder setTaxIdCollection(TaxIdCollection taxIdCollection) {
      this.taxIdCollection = taxIdCollection;
      return this;
    }
  }
  @Getter
  public static class AfterExpiration {
    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * Configure a Checkout Session that can be used to recover an expired session.
     */
    @SerializedName("recovery")
    Recovery recovery;

    private AfterExpiration(Map<String, Object> extraParams, Recovery recovery) {
      this.extraParams = extraParams;
      this.recovery = recovery;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Map<String, Object> extraParams;

      private Recovery recovery;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public AfterExpiration build() {
        return new AfterExpiration(this.extraParams, this.recovery);
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AfterExpiration#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AfterExpiration#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Configure a Checkout Session that can be used to recover an expired session.
       */
      public Builder setRecovery(Recovery recovery) {
        this.recovery = recovery;
        return this;
      }
    }
    @Getter
    public static class Recovery {
      /**
       * Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to {@code false}
       */
      @SerializedName("allow_promotion_codes")
      Boolean allowPromotionCodes;

      /**
       * If {@code true}, a recovery URL will be generated to recover this Checkout Session if it expires before a successful transaction is completed. It will be attached to the Checkout Session object upon expiration.
       */
      @SerializedName("enabled")
      Boolean enabled;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      private Recovery(
          Boolean allowPromotionCodes,
          Boolean enabled,
          Map<String, Object> extraParams) {
        this.allowPromotionCodes = allowPromotionCodes;
        this.enabled = enabled;
        this.extraParams = extraParams;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Boolean allowPromotionCodes;

        private Boolean enabled;

        private Map<String, Object> extraParams;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Recovery build() {
          return new Recovery(this.allowPromotionCodes, this.enabled, this.extraParams);
        }

        /**
         * Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to {@code false}
         */
        public Builder setAllowPromotionCodes(Boolean allowPromotionCodes) {
          this.allowPromotionCodes = allowPromotionCodes;
          return this;
        }

        /**
         * If {@code true}, a recovery URL will be generated to recover this Checkout Session if it expires before a successful transaction is completed. It will be attached to the Checkout Session object upon expiration.
         */
        public Builder setEnabled(Boolean enabled) {
          this.enabled = enabled;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AfterExpiration.Recovery#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AfterExpiration.Recovery#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }
      }
    }
  }
  @Getter
  public static class AutomaticTax {
    /**
     * Set to true to enable automatic taxes.
     */
    @SerializedName("enabled")
    Boolean enabled;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    private AutomaticTax(Boolean enabled, Map<String, Object> extraParams) {
      this.enabled = enabled;
      this.extraParams = extraParams;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Boolean enabled;

      private Map<String, Object> extraParams;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public AutomaticTax build() {
        return new AutomaticTax(this.enabled, this.extraParams);
      }

      /**
       * Set to true to enable automatic taxes.
       */
      public Builder setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AutomaticTax#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.AutomaticTax#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }
    }
  }
  @Getter
  public static class ConsentCollection {
    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * If set to {@code auto}, enables the collection of customer consent for promotional communications. The Checkout Session will determine whether to display an option to opt into promotional communication from the merchant depending on the customer's locale. Only available to US merchants.
     */
    @SerializedName("promotions")
    Promotions promotions;

    private ConsentCollection(Map<String, Object> extraParams, Promotions promotions) {
      this.extraParams = extraParams;
      this.promotions = promotions;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Map<String, Object> extraParams;

      private Promotions promotions;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public ConsentCollection build() {
        return new ConsentCollection(this.extraParams, this.promotions);
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ConsentCollection#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ConsentCollection#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * If set to {@code auto}, enables the collection of customer consent for promotional communications. The Checkout Session will determine whether to display an option to opt into promotional communication from the merchant depending on the customer's locale. Only available to US merchants.
       */
      public Builder setPromotions(Promotions promotions) {
        this.promotions = promotions;
        return this;
      }
    }
    public enum Promotions implements ApiRequestParams.EnumParam {
      @SerializedName("auto")
      AUTO("auto");
      @Getter(onMethod_ = {@Override})
      private final String value;
      Promotions(String value) {
        this.value = value;
      }
    }
  }
  @Getter
  public static class CustomerUpdate {
    /**
     * Describes whether Checkout saves the billing address onto {@code customer.address}. To always collect a full billing address, use {@code billing_address_collection}. Defaults to {@code never}.
     */
    @SerializedName("address")
    Address address;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * Describes whether Checkout saves the name onto {@code customer.name}. Defaults to {@code never}.
     */
    @SerializedName("name")
    Name name;

    /**
     * Describes whether Checkout saves shipping information onto {@code customer.shipping}. To collect shipping information, use {@code shipping_address_collection}. Defaults to {@code never}.
     */
    @SerializedName("shipping")
    Shipping shipping;

    private CustomerUpdate(
        Address address,
        Map<String, Object> extraParams,
        Name name,
        Shipping shipping) {
      this.address = address;
      this.extraParams = extraParams;
      this.name = name;
      this.shipping = shipping;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Address address;

      private Map<String, Object> extraParams;

      private Name name;

      private Shipping shipping;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public CustomerUpdate build() {
        return new CustomerUpdate(this.address, this.extraParams, this.name, this.shipping);
      }

      /**
       * Describes whether Checkout saves the billing address onto {@code customer.address}. To always collect a full billing address, use {@code billing_address_collection}. Defaults to {@code never}.
       */
      public Builder setAddress(Address address) {
        this.address = address;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.CustomerUpdate#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.CustomerUpdate#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Describes whether Checkout saves the name onto {@code customer.name}. Defaults to {@code never}.
       */
      public Builder setName(Name name) {
        this.name = name;
        return this;
      }

      /**
       * Describes whether Checkout saves shipping information onto {@code customer.shipping}. To collect shipping information, use {@code shipping_address_collection}. Defaults to {@code never}.
       */
      public Builder setShipping(Shipping shipping) {
        this.shipping = shipping;
        return this;
      }
    }
    public enum Address implements ApiRequestParams.EnumParam {
      @SerializedName("auto")
      AUTO("auto"),

      @SerializedName("never")
      NEVER("never");
      @Getter(onMethod_ = {@Override})
      private final String value;
      Address(String value) {
        this.value = value;
      }
    }
    public enum Name implements ApiRequestParams.EnumParam {
      @SerializedName("auto")
      AUTO("auto"),

      @SerializedName("never")
      NEVER("never");
      @Getter(onMethod_ = {@Override})
      private final String value;
      Name(String value) {
        this.value = value;
      }
    }
    public enum Shipping implements ApiRequestParams.EnumParam {
      @SerializedName("auto")
      AUTO("auto"),

      @SerializedName("never")
      NEVER("never");
      @Getter(onMethod_ = {@Override})
      private final String value;
      Shipping(String value) {
        this.value = value;
      }
    }
  }
  @Getter
  public static class Discount {
    /**
     * The ID of the coupon to apply to this Session.
     */
    @SerializedName("coupon")
    String coupon;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * The ID of a promotion code to apply to this Session.
     */
    @SerializedName("promotion_code")
    String promotionCode;

    private Discount(String coupon, Map<String, Object> extraParams, String promotionCode) {
      this.coupon = coupon;
      this.extraParams = extraParams;
      this.promotionCode = promotionCode;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private String coupon;

      private Map<String, Object> extraParams;

      private String promotionCode;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public Discount build() {
        return new Discount(this.coupon, this.extraParams, this.promotionCode);
      }

      /**
       * The ID of the coupon to apply to this Session.
       */
      public Builder setCoupon(String coupon) {
        this.coupon = coupon;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.Discount#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.Discount#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * The ID of a promotion code to apply to this Session.
       */
      public Builder setPromotionCode(String promotionCode) {
        this.promotionCode = promotionCode;
        return this;
      }
    }
  }
  @Getter
  public static class LineItem {
    /**
     * When set, provides configuration for this item’s quantity to be adjusted by the customer during Checkout.
     */
    @SerializedName("adjustable_quantity")
    AdjustableQuantity adjustableQuantity;

    /**
     * [Deprecated] The amount to be collected per unit of the line item. If specified, must also pass {@code currency} and {@code name}.
     */
    @SerializedName("amount")
    Long amount;

    /**
     * [Deprecated] Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>. Required if {@code amount} is passed.
     */
    @SerializedName("currency")
    String currency;

    /**
     * [Deprecated] The description for the line item, to be displayed on the Checkout page.
     */
    @SerializedName("description")
    String description;

    /**
     * The <a href="https://stripe.com/docs/api/tax_rates">tax rates</a> that will be applied to this line item depending on the customer's billing/shipping address. We currently support the following countries: US, GB, AU, and all countries in the EU.
     */
    @SerializedName("dynamic_tax_rates")
    List<String> dynamicTaxRates;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * [Deprecated] A list of image URLs representing this line item. Each image can be up to 5 MB in size. If passing {@code price} or {@code price_data}, specify images on the associated product instead.
     */
    @SerializedName("images")
    List<String> images;

    /**
     * [Deprecated] The name for the item to be displayed on the Checkout page. Required if {@code amount} is passed.
     */
    @SerializedName("name")
    String name;

    /**
     * The ID of the <a href="https://stripe.com/docs/api/prices">Price</a> or <a href="https://stripe.com/docs/api/plans">Plan</a> object. One of {@code price} or {@code price_data} is required.
     */
    @SerializedName("price")
    String price;

    /**
     * Data used to generate a new <a href="https://stripe.com/docs/api/prices">Price</a> object inline. One of {@code price} or {@code price_data} is required.
     */
    @SerializedName("price_data")
    PriceData priceData;

    /**
     * The quantity of the line item being purchased. Quantity should not be defined when {@code recurring.usage_type=metered}.
     */
    @SerializedName("quantity")
    Long quantity;

    /**
     * The <a href="https://stripe.com/docs/api/tax_rates">tax rates</a> which apply to this line item.
     */
    @SerializedName("tax_rates")
    List<String> taxRates;

    private LineItem(
        AdjustableQuantity adjustableQuantity,
        Long amount,
        String currency,
        String description,
        List<String> dynamicTaxRates,
        Map<String, Object> extraParams,
        List<String> images,
        String name,
        String price,
        PriceData priceData,
        Long quantity,
        List<String> taxRates) {
      this.adjustableQuantity = adjustableQuantity;
      this.amount = amount;
      this.currency = currency;
      this.description = description;
      this.dynamicTaxRates = dynamicTaxRates;
      this.extraParams = extraParams;
      this.images = images;
      this.name = name;
      this.price = price;
      this.priceData = priceData;
      this.quantity = quantity;
      this.taxRates = taxRates;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private AdjustableQuantity adjustableQuantity;

      private Long amount;

      private String currency;

      private String description;

      private List<String> dynamicTaxRates;

      private Map<String, Object> extraParams;

      private List<String> images;

      private String name;

      private String price;

      private PriceData priceData;

      private Long quantity;

      private List<String> taxRates;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public LineItem build() {
        return new LineItem(
          this.adjustableQuantity,
          this.amount,
          this.currency,
          this.description,
          this.dynamicTaxRates,
          this.extraParams,
          this.images,
          this.name,
          this.price,
          this.priceData,
          this.quantity,
          this.taxRates
        );
      }

      /**
       * When set, provides configuration for this item’s quantity to be adjusted by the customer during Checkout.
       */
      public Builder setAdjustableQuantity(AdjustableQuantity adjustableQuantity) {
        this.adjustableQuantity = adjustableQuantity;
        return this;
      }

      /**
       * [Deprecated] The amount to be collected per unit of the line item. If specified, must also pass {@code currency} and {@code name}.
       */
      public Builder setAmount(Long amount) {
        this.amount = amount;
        return this;
      }

      /**
       * [Deprecated] Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>. Required if {@code amount} is passed.
       */
      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      /**
       * [Deprecated] The description for the line item, to be displayed on the Checkout page.
       */
      public Builder setDescription(String description) {
        this.description = description;
        return this;
      }

      /**
       * Add an element to `dynamicTaxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#dynamicTaxRates} for the field documentation.
       */
      public Builder addDynamicTaxRate(String element) {
        if (this.dynamicTaxRates == null) {
          this.dynamicTaxRates = new ArrayList<>();
        }
        this.dynamicTaxRates.add(element);
        return this;
      }

      /**
       * Add all elements to `dynamicTaxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#dynamicTaxRates} for the field documentation.
       */
      public Builder addAllDynamicTaxRate(List<String> elements) {
        if (this.dynamicTaxRates == null) {
          this.dynamicTaxRates = new ArrayList<>();
        }
        this.dynamicTaxRates.addAll(elements);
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Add an element to `images` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#images} for the field documentation.
       */
      public Builder addImage(String element) {
        if (this.images == null) {
          this.images = new ArrayList<>();
        }
        this.images.add(element);
        return this;
      }

      /**
       * Add all elements to `images` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#images} for the field documentation.
       */
      public Builder addAllImage(List<String> elements) {
        if (this.images == null) {
          this.images = new ArrayList<>();
        }
        this.images.addAll(elements);
        return this;
      }

      /**
       * [Deprecated] The name for the item to be displayed on the Checkout page. Required if {@code amount} is passed.
       */
      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      /**
       * The ID of the <a href="https://stripe.com/docs/api/prices">Price</a> or <a href="https://stripe.com/docs/api/plans">Plan</a> object. One of {@code price} or {@code price_data} is required.
       */
      public Builder setPrice(String price) {
        this.price = price;
        return this;
      }

      /**
       * Data used to generate a new <a href="https://stripe.com/docs/api/prices">Price</a> object inline. One of {@code price} or {@code price_data} is required.
       */
      public Builder setPriceData(PriceData priceData) {
        this.priceData = priceData;
        return this;
      }

      /**
       * The quantity of the line item being purchased. Quantity should not be defined when {@code recurring.usage_type=metered}.
       */
      public Builder setQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
      }

      /**
       * Add an element to `taxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#taxRates} for the field documentation.
       */
      public Builder addTaxRate(String element) {
        if (this.taxRates == null) {
          this.taxRates = new ArrayList<>();
        }
        this.taxRates.add(element);
        return this;
      }

      /**
       * Add all elements to `taxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem#taxRates} for the field documentation.
       */
      public Builder addAllTaxRate(List<String> elements) {
        if (this.taxRates == null) {
          this.taxRates = new ArrayList<>();
        }
        this.taxRates.addAll(elements);
        return this;
      }
    }
    @Getter
    public static class AdjustableQuantity {
      /**
       * Set to true if the quantity can be adjusted to any non-negative integer. By default customers will be able to remove the line item by setting the quantity to 0.
       */
      @SerializedName("enabled")
      Boolean enabled;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * The maximum quantity the customer can purchase for the Checkout Session. By default this value is 99. You can specify a value up to 999.
       */
      @SerializedName("maximum")
      Long maximum;

      /**
       * The minimum quantity the customer must purchase for the Checkout Session. By default this value is 0.
       */
      @SerializedName("minimum")
      Long minimum;

      private AdjustableQuantity(
          Boolean enabled,
          Map<String, Object> extraParams,
          Long maximum,
          Long minimum) {
        this.enabled = enabled;
        this.extraParams = extraParams;
        this.maximum = maximum;
        this.minimum = minimum;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Boolean enabled;

        private Map<String, Object> extraParams;

        private Long maximum;

        private Long minimum;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public AdjustableQuantity build() {
          return new AdjustableQuantity(this.enabled, this.extraParams, this.maximum, this.minimum);
        }

        /**
         * Set to true if the quantity can be adjusted to any non-negative integer. By default customers will be able to remove the line item by setting the quantity to 0.
         */
        public Builder setEnabled(Boolean enabled) {
          this.enabled = enabled;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.AdjustableQuantity#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.AdjustableQuantity#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * The maximum quantity the customer can purchase for the Checkout Session. By default this value is 99. You can specify a value up to 999.
         */
        public Builder setMaximum(Long maximum) {
          this.maximum = maximum;
          return this;
        }

        /**
         * The minimum quantity the customer must purchase for the Checkout Session. By default this value is 0.
         */
        public Builder setMinimum(Long minimum) {
          this.minimum = minimum;
          return this;
        }
      }
    }
    @Getter
    public static class PriceData {
      /**
       * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>.
       */
      @SerializedName("currency")
      String currency;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * The ID of the product that this price will belong to. One of {@code product} or {@code product_data} is required.
       */
      @SerializedName("product")
      String product;

      /**
       * Data used to generate a new product object inline. One of {@code product} or {@code product_data} is required.
       */
      @SerializedName("product_data")
      ProductData productData;

      /**
       * The recurring components of a price such as {@code interval} and {@code interval_count}.
       */
      @SerializedName("recurring")
      Recurring recurring;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * A non-negative integer in cents (or local equivalent) representing how much to charge. One of {@code unit_amount} or {@code unit_amount_decimal} is required.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      BigDecimal unitAmountDecimal;

      private PriceData(
          String currency,
          Map<String, Object> extraParams,
          String product,
          ProductData productData,
          Recurring recurring,
          TaxBehavior taxBehavior,
          Long unitAmount,
          BigDecimal unitAmountDecimal) {
        this.currency = currency;
        this.extraParams = extraParams;
        this.product = product;
        this.productData = productData;
        this.recurring = recurring;
        this.taxBehavior = taxBehavior;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private String currency;

        private Map<String, Object> extraParams;

        private String product;

        private ProductData productData;

        private Recurring recurring;

        private TaxBehavior taxBehavior;

        private Long unitAmount;

        private BigDecimal unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public PriceData build() {
          return new PriceData(
            this.currency,
            this.extraParams,
            this.product,
            this.productData,
            this.recurring,
            this.taxBehavior,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>.
         */
        public Builder setCurrency(String currency) {
          this.currency = currency;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * The ID of the product that this price will belong to. One of {@code product} or {@code product_data} is required.
         */
        public Builder setProduct(String product) {
          this.product = product;
          return this;
        }

        /**
         * Data used to generate a new product object inline. One of {@code product} or {@code product_data} is required.
         */
        public Builder setProductData(ProductData productData) {
          this.productData = productData;
          return this;
        }

        /**
         * The recurring components of a price such as {@code interval} and {@code interval_count}.
         */
        public Builder setRecurring(Recurring recurring) {
          this.recurring = recurring;
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * A non-negative integer in cents (or local equivalent) representing how much to charge. One of {@code unit_amount} or {@code unit_amount_decimal} is required.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class ProductData {
        /**
         * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
         */
        @SerializedName("description")
        String description;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
         */
        @SerializedName("images")
        List<String> images;

        /**
         * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
         */
        @SerializedName("metadata")
        Map<String, String> metadata;

        /**
         * The product's name, meant to be displayable to the customer.
         */
        @SerializedName("name")
        String name;

        /**
         * A <a href="https://stripe.com/docs/tax/tax-categories">tax code</a> ID.
         */
        @SerializedName("tax_code")
        String taxCode;

        private ProductData(
            String description,
            Map<String, Object> extraParams,
            List<String> images,
            Map<String, String> metadata,
            String name,
            String taxCode) {
          this.description = description;
          this.extraParams = extraParams;
          this.images = images;
          this.metadata = metadata;
          this.name = name;
          this.taxCode = taxCode;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private String description;

          private Map<String, Object> extraParams;

          private List<String> images;

          private Map<String, String> metadata;

          private String name;

          private String taxCode;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public ProductData build() {
            return new ProductData(
              this.description,
              this.extraParams,
              this.images,
              this.metadata,
              this.name,
              this.taxCode
            );
          }

          /**
           * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
           */
          public Builder setDescription(String description) {
            this.description = description;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.ProductData#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.ProductData#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * Add an element to `images` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem.PriceData.ProductData#images} for the field documentation.
           */
          public Builder addImage(String element) {
            if (this.images == null) {
              this.images = new ArrayList<>();
            }
            this.images.add(element);
            return this;
          }

          /**
           * Add all elements to `images` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.LineItem.PriceData.ProductData#images} for the field documentation.
           */
          public Builder addAllImage(List<String> elements) {
            if (this.images == null) {
              this.images = new ArrayList<>();
            }
            this.images.addAll(elements);
            return this;
          }

          /**
           * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.ProductData#metadata} for the field documentation.
           */
          public Builder putMetadata(String key, String value) {
            if (this.metadata == null) {
              this.metadata = new HashMap<>();
            }
            this.metadata.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.ProductData#metadata} for the field documentation.
           */
          public Builder putAllMetadata(Map<String, String> map) {
            if (this.metadata == null) {
              this.metadata = new HashMap<>();
            }
            this.metadata.putAll(map);
            return this;
          }

          /**
           * The product's name, meant to be displayable to the customer.
           */
          public Builder setName(String name) {
            this.name = name;
            return this;
          }

          /**
           * A <a href="https://stripe.com/docs/tax/tax-categories">tax code</a> ID.
           */
          public Builder setTaxCode(String taxCode) {
            this.taxCode = taxCode;
            return this;
          }
        }
      }
      @Getter
      public static class Recurring {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * Specifies billing frequency. Either {@code day}, {@code week}, {@code month} or {@code year}.
         */
        @SerializedName("interval")
        Interval interval;

        /**
         * The number of intervals between subscription billings. For example, {@code interval=month} and {@code interval_count=3} bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
         */
        @SerializedName("interval_count")
        Long intervalCount;

        private Recurring(Map<String, Object> extraParams, Interval interval, Long intervalCount) {
          this.extraParams = extraParams;
          this.interval = interval;
          this.intervalCount = intervalCount;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Interval interval;

          private Long intervalCount;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Recurring build() {
            return new Recurring(this.extraParams, this.interval, this.intervalCount);
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.Recurring#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.LineItem.PriceData.Recurring#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * Specifies billing frequency. Either {@code day}, {@code week}, {@code month} or {@code year}.
           */
          public Builder setInterval(Interval interval) {
            this.interval = interval;
            return this;
          }

          /**
           * The number of intervals between subscription billings. For example, {@code interval=month} and {@code interval_count=3} bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
           */
          public Builder setIntervalCount(Long intervalCount) {
            this.intervalCount = intervalCount;
            return this;
          }
        }
        public enum Interval implements ApiRequestParams.EnumParam {
          @SerializedName("day")
          DAY("day"),

          @SerializedName("month")
          MONTH("month"),

          @SerializedName("week")
          WEEK("week"),

          @SerializedName("year")
          YEAR("year");
          @Getter(onMethod_ = {@Override})
          private final String value;
          Interval(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
  }
  @Getter
  public static class PaymentIntentData {
    /**
     * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
     */
    @SerializedName("application_fee_amount")
    Long applicationFeeAmount;

    /**
     * Controls when the funds will be captured from the customer's account.
     */
    @SerializedName("capture_method")
    CaptureMethod captureMethod;

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     */
    @SerializedName("description")
    String description;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
     */
    @SerializedName("metadata")
    Map<String, String> metadata;

    /**
     * The Stripe account ID for which these funds are intended. For details, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
     */
    @SerializedName("on_behalf_of")
    String onBehalfOf;

    /**
     * Email address that the receipt for the resulting payment will be sent to. If {@code receipt_email} is specified for a payment in live mode, a receipt will be sent regardless of your <a href="https://dashboard.stripe.com/account/emails">email settings</a>.
     */
    @SerializedName("receipt_email")
    String receiptEmail;

    /**
     * Indicates that you intend to <a href="https://stripe.com/docs/payments/payment-intents#future-usage">make future payments</a> with the payment method collected by this Checkout Session.
     *
     * <p>When setting this to {@code on_session}, Checkout will show a notice to the customer that their payment details will be saved.
     *
     * <p>When setting this to {@code off_session}, Checkout will show a notice to the customer that their payment details will be saved and used for future payments.
     *
     * <p>If a Customer has been provided or Checkout creates a new Customer, Checkout will attach the payment method to the Customer.
     *
     * <p>If Checkout does not create a Customer, the payment method is not attached to a Customer. To reuse the payment method, you can retrieve it from the Checkout Session's PaymentIntent.
     *
     * <p>When processing card payments, Checkout also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as SCA.
     */
    @SerializedName("setup_future_usage")
    SetupFutureUsage setupFutureUsage;

    /**
     * Shipping information for this payment.
     */
    @SerializedName("shipping")
    Shipping shipping;

    /**
     * Extra information about the payment. This will appear on your customer's statement when this payment succeeds in creating a charge.
     */
    @SerializedName("statement_descriptor")
    String statementDescriptor;

    /**
     * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
     */
    @SerializedName("statement_descriptor_suffix")
    String statementDescriptorSuffix;

    /**
     * The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
     */
    @SerializedName("transfer_data")
    TransferData transferData;

    /**
     * A string that identifies the resulting payment as part of a group. See the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a> for details.
     */
    @SerializedName("transfer_group")
    String transferGroup;

    private PaymentIntentData(
        Long applicationFeeAmount,
        CaptureMethod captureMethod,
        String description,
        Map<String, Object> extraParams,
        Map<String, String> metadata,
        String onBehalfOf,
        String receiptEmail,
        SetupFutureUsage setupFutureUsage,
        Shipping shipping,
        String statementDescriptor,
        String statementDescriptorSuffix,
        TransferData transferData,
        String transferGroup) {
      this.applicationFeeAmount = applicationFeeAmount;
      this.captureMethod = captureMethod;
      this.description = description;
      this.extraParams = extraParams;
      this.metadata = metadata;
      this.onBehalfOf = onBehalfOf;
      this.receiptEmail = receiptEmail;
      this.setupFutureUsage = setupFutureUsage;
      this.shipping = shipping;
      this.statementDescriptor = statementDescriptor;
      this.statementDescriptorSuffix = statementDescriptorSuffix;
      this.transferData = transferData;
      this.transferGroup = transferGroup;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Long applicationFeeAmount;

      private CaptureMethod captureMethod;

      private String description;

      private Map<String, Object> extraParams;

      private Map<String, String> metadata;

      private String onBehalfOf;

      private String receiptEmail;

      private SetupFutureUsage setupFutureUsage;

      private Shipping shipping;

      private String statementDescriptor;

      private String statementDescriptorSuffix;

      private TransferData transferData;

      private String transferGroup;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public PaymentIntentData build() {
        return new PaymentIntentData(
          this.applicationFeeAmount,
          this.captureMethod,
          this.description,
          this.extraParams,
          this.metadata,
          this.onBehalfOf,
          this.receiptEmail,
          this.setupFutureUsage,
          this.shipping,
          this.statementDescriptor,
          this.statementDescriptorSuffix,
          this.transferData,
          this.transferGroup
        );
      }

      /**
       * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
       */
      public Builder setApplicationFeeAmount(Long applicationFeeAmount) {
        this.applicationFeeAmount = applicationFeeAmount;
        return this;
      }

      /**
       * Controls when the funds will be captured from the customer's account.
       */
      public Builder setCaptureMethod(CaptureMethod captureMethod) {
        this.captureMethod = captureMethod;
        return this;
      }

      /**
       * An arbitrary string attached to the object. Often useful for displaying to users.
       */
      public Builder setDescription(String description) {
        this.description = description;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData#metadata} for the field documentation.
       */
      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData#metadata} for the field documentation.
       */
      public Builder putAllMetadata(Map<String, String> map) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.putAll(map);
        return this;
      }

      /**
       * The Stripe account ID for which these funds are intended. For details, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
       */
      public Builder setOnBehalfOf(String onBehalfOf) {
        this.onBehalfOf = onBehalfOf;
        return this;
      }

      /**
       * Email address that the receipt for the resulting payment will be sent to. If {@code receipt_email} is specified for a payment in live mode, a receipt will be sent regardless of your <a href="https://dashboard.stripe.com/account/emails">email settings</a>.
       */
      public Builder setReceiptEmail(String receiptEmail) {
        this.receiptEmail = receiptEmail;
        return this;
      }

      /**
       * Indicates that you intend to <a href="https://stripe.com/docs/payments/payment-intents#future-usage">make future payments</a> with the payment method collected by this Checkout Session.
       *
       * <p>When setting this to {@code on_session}, Checkout will show a notice to the customer that their payment details will be saved.
       *
       * <p>When setting this to {@code off_session}, Checkout will show a notice to the customer that their payment details will be saved and used for future payments.
       *
       * <p>If a Customer has been provided or Checkout creates a new Customer, Checkout will attach the payment method to the Customer.
       *
       * <p>If Checkout does not create a Customer, the payment method is not attached to a Customer. To reuse the payment method, you can retrieve it from the Checkout Session's PaymentIntent.
       *
       * <p>When processing card payments, Checkout also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as SCA.
       */
      public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
        this.setupFutureUsage = setupFutureUsage;
        return this;
      }

      /**
       * Shipping information for this payment.
       */
      public Builder setShipping(Shipping shipping) {
        this.shipping = shipping;
        return this;
      }

      /**
       * Extra information about the payment. This will appear on your customer's statement when this payment succeeds in creating a charge.
       */
      public Builder setStatementDescriptor(String statementDescriptor) {
        this.statementDescriptor = statementDescriptor;
        return this;
      }

      /**
       * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
       */
      public Builder setStatementDescriptorSuffix(String statementDescriptorSuffix) {
        this.statementDescriptorSuffix = statementDescriptorSuffix;
        return this;
      }

      /**
       * The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a>.
       */
      public Builder setTransferData(TransferData transferData) {
        this.transferData = transferData;
        return this;
      }

      /**
       * A string that identifies the resulting payment as part of a group. See the PaymentIntents <a href="https://stripe.com/docs/payments/connected-accounts">use case for connected accounts</a> for details.
       */
      public Builder setTransferGroup(String transferGroup) {
        this.transferGroup = transferGroup;
        return this;
      }
    }
    @Getter
    public static class Shipping {
      /**
       * Shipping address.
       */
      @SerializedName("address")
      Address address;

      /**
       * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
       */
      @SerializedName("carrier")
      String carrier;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Recipient name.
       */
      @SerializedName("name")
      String name;

      /**
       * Recipient phone (including extension).
       */
      @SerializedName("phone")
      String phone;

      /**
       * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
       */
      @SerializedName("tracking_number")
      String trackingNumber;

      private Shipping(
          Address address,
          String carrier,
          Map<String, Object> extraParams,
          String name,
          String phone,
          String trackingNumber) {
        this.address = address;
        this.carrier = carrier;
        this.extraParams = extraParams;
        this.name = name;
        this.phone = phone;
        this.trackingNumber = trackingNumber;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Address address;

        private String carrier;

        private Map<String, Object> extraParams;

        private String name;

        private String phone;

        private String trackingNumber;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Shipping build() {
          return new Shipping(
            this.address,
            this.carrier,
            this.extraParams,
            this.name,
            this.phone,
            this.trackingNumber
          );
        }

        /**
         * Shipping address.
         */
        public Builder setAddress(Address address) {
          this.address = address;
          return this;
        }

        /**
         * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
         */
        public Builder setCarrier(String carrier) {
          this.carrier = carrier;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.Shipping#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.Shipping#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Recipient name.
         */
        public Builder setName(String name) {
          this.name = name;
          return this;
        }

        /**
         * Recipient phone (including extension).
         */
        public Builder setPhone(String phone) {
          this.phone = phone;
          return this;
        }

        /**
         * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
         */
        public Builder setTrackingNumber(String trackingNumber) {
          this.trackingNumber = trackingNumber;
          return this;
        }
      }
      @Getter
      public static class Address {
        /**
         * City, district, suburb, town, or village.
         */
        @SerializedName("city")
        String city;

        /**
         * Two-letter country code (<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>).
         */
        @SerializedName("country")
        String country;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * Address line 1 (e.g., street, PO Box, or company name).
         */
        @SerializedName("line1")
        String line1;

        /**
         * Address line 2 (e.g., apartment, suite, unit, or building).
         */
        @SerializedName("line2")
        String line2;

        /**
         * ZIP or postal code.
         */
        @SerializedName("postal_code")
        String postalCode;

        /**
         * State, county, province, or region.
         */
        @SerializedName("state")
        String state;

        private Address(
            String city,
            String country,
            Map<String, Object> extraParams,
            String line1,
            String line2,
            String postalCode,
            String state) {
          this.city = city;
          this.country = country;
          this.extraParams = extraParams;
          this.line1 = line1;
          this.line2 = line2;
          this.postalCode = postalCode;
          this.state = state;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private String city;

          private String country;

          private Map<String, Object> extraParams;

          private String line1;

          private String line2;

          private String postalCode;

          private String state;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Address build() {
            return new Address(
              this.city,
              this.country,
              this.extraParams,
              this.line1,
              this.line2,
              this.postalCode,
              this.state
            );
          }

          /**
           * City, district, suburb, town, or village.
           */
          public Builder setCity(String city) {
            this.city = city;
            return this;
          }

          /**
           * Two-letter country code (<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>).
           */
          public Builder setCountry(String country) {
            this.country = country;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.Shipping.Address#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.Shipping.Address#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * Address line 1 (e.g., street, PO Box, or company name).
           */
          public Builder setLine1(String line1) {
            this.line1 = line1;
            return this;
          }

          /**
           * Address line 2 (e.g., apartment, suite, unit, or building).
           */
          public Builder setLine2(String line2) {
            this.line2 = line2;
            return this;
          }

          /**
           * ZIP or postal code.
           */
          public Builder setPostalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
          }

          /**
           * State, county, province, or region.
           */
          public Builder setState(String state) {
            this.state = state;
            return this;
          }
        }
      }
    }
    @Getter
    public static class TransferData {
      /**
       * The amount that will be transferred automatically when a charge succeeds.
       */
      @SerializedName("amount")
      Long amount;

      /**
       * If specified, successful charges will be attributed to the destination account for tax reporting, and the funds from charges will be transferred to the destination account. The ID of the resulting transfer will be returned on the successful charge's {@code transfer} field.
       */
      @SerializedName("destination")
      String destination;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      private TransferData(Long amount, String destination, Map<String, Object> extraParams) {
        this.amount = amount;
        this.destination = destination;
        this.extraParams = extraParams;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Long amount;

        private String destination;

        private Map<String, Object> extraParams;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public TransferData build() {
          return new TransferData(this.amount, this.destination, this.extraParams);
        }

        /**
         * The amount that will be transferred automatically when a charge succeeds.
         */
        public Builder setAmount(Long amount) {
          this.amount = amount;
          return this;
        }

        /**
         * If specified, successful charges will be attributed to the destination account for tax reporting, and the funds from charges will be transferred to the destination account. The ID of the resulting transfer will be returned on the successful charge's {@code transfer} field.
         */
        public Builder setDestination(String destination) {
          this.destination = destination;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.TransferData#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentIntentData.TransferData#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }
      }
    }
    public enum CaptureMethod implements ApiRequestParams.EnumParam {
      @SerializedName("automatic")
      AUTOMATIC("automatic"),

      @SerializedName("manual")
      MANUAL("manual");
      @Getter(onMethod_ = {@Override})
      private final String value;
      CaptureMethod(String value) {
        this.value = value;
      }
    }
    public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
      @SerializedName("off_session")
      OFF_SESSION("off_session"),

      @SerializedName("on_session")
      ON_SESSION("on_session");
      @Getter(onMethod_ = {@Override})
      private final String value;
      SetupFutureUsage(String value) {
        this.value = value;
      }
    }
  }
  @Getter
  public static class PaymentMethodOptions {
    /**
     * contains details about the ACSS Debit payment method options.
     */
    @SerializedName("acss_debit")
    AcssDebit acssDebit;

    /**
     * contains details about the Affirm payment method options.
     */
    @SerializedName("affirm")
    Affirm affirm;

    /**
     * contains details about the Afterpay Clearpay payment method options.
     */
    @SerializedName("afterpay_clearpay")
    AfterpayClearpay afterpayClearpay;

    /**
     * contains details about the Alipay payment method options.
     */
    @SerializedName("alipay")
    Alipay alipay;

    /**
     * contains details about the AU Becs Debit payment method options.
     */
    @SerializedName("au_becs_debit")
    AuBecsDebit auBecsDebit;

    /**
     * contains details about the Bacs Debit payment method options.
     */
    @SerializedName("bacs_debit")
    BacsDebit bacsDebit;

    /**
     * contains details about the Bancontact payment method options.
     */
    @SerializedName("bancontact")
    Bancontact bancontact;

    /**
     * contains details about the Boleto payment method options.
     */
    @SerializedName("boleto")
    Boleto boleto;

    /**
     * contains details about the Card payment method options.
     */
    @SerializedName("card")
    Card card;

    /**
     * contains details about the EPS payment method options.
     */
    @SerializedName("eps")
    Eps eps;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * contains details about the EPS payment method options.
     */
    @SerializedName("fpx")
    Fpx fpx;

    /**
     * contains details about the Giropay payment method options.
     */
    @SerializedName("giropay")
    Giropay giropay;

    /**
     * contains details about the Grabpay payment method options.
     */
    @SerializedName("grabpay")
    Grabpay grabpay;

    /**
     * contains details about the Ideal payment method options.
     */
    @SerializedName("ideal")
    Ideal ideal;

    /**
     * contains details about the Klarna payment method options.
     */
    @SerializedName("klarna")
    Klarna klarna;

    /**
     * contains details about the Konbini payment method options.
     */
    @SerializedName("konbini")
    Konbini konbini;

    /**
     * contains details about the OXXO payment method options.
     */
    @SerializedName("oxxo")
    Oxxo oxxo;

    /**
     * contains details about the P24 payment method options.
     */
    @SerializedName("p24")
    P24 p24;

    /**
     * contains details about the PayNow payment method options.
     */
    @SerializedName("paynow")
    Paynow paynow;

    /**
     * contains details about the Sepa Debit payment method options.
     */
    @SerializedName("sepa_debit")
    SepaDebit sepaDebit;

    /**
     * contains details about the Sofort payment method options.
     */
    @SerializedName("sofort")
    Sofort sofort;

    /**
     * contains details about the Us Bank Account payment method options.
     */
    @SerializedName("us_bank_account")
    UsBankAccount usBankAccount;

    /**
     * contains details about the WeChat Pay payment method options.
     */
    @SerializedName("wechat_pay")
    WechatPay wechatPay;

    private PaymentMethodOptions(
        AcssDebit acssDebit,
        Affirm affirm,
        AfterpayClearpay afterpayClearpay,
        Alipay alipay,
        AuBecsDebit auBecsDebit,
        BacsDebit bacsDebit,
        Bancontact bancontact,
        Boleto boleto,
        Card card,
        Eps eps,
        Map<String, Object> extraParams,
        Fpx fpx,
        Giropay giropay,
        Grabpay grabpay,
        Ideal ideal,
        Klarna klarna,
        Konbini konbini,
        Oxxo oxxo,
        P24 p24,
        Paynow paynow,
        SepaDebit sepaDebit,
        Sofort sofort,
        UsBankAccount usBankAccount,
        WechatPay wechatPay) {
      this.acssDebit = acssDebit;
      this.affirm = affirm;
      this.afterpayClearpay = afterpayClearpay;
      this.alipay = alipay;
      this.auBecsDebit = auBecsDebit;
      this.bacsDebit = bacsDebit;
      this.bancontact = bancontact;
      this.boleto = boleto;
      this.card = card;
      this.eps = eps;
      this.extraParams = extraParams;
      this.fpx = fpx;
      this.giropay = giropay;
      this.grabpay = grabpay;
      this.ideal = ideal;
      this.klarna = klarna;
      this.konbini = konbini;
      this.oxxo = oxxo;
      this.p24 = p24;
      this.paynow = paynow;
      this.sepaDebit = sepaDebit;
      this.sofort = sofort;
      this.usBankAccount = usBankAccount;
      this.wechatPay = wechatPay;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private AcssDebit acssDebit;

      private Affirm affirm;

      private AfterpayClearpay afterpayClearpay;

      private Alipay alipay;

      private AuBecsDebit auBecsDebit;

      private BacsDebit bacsDebit;

      private Bancontact bancontact;

      private Boleto boleto;

      private Card card;

      private Eps eps;

      private Map<String, Object> extraParams;

      private Fpx fpx;

      private Giropay giropay;

      private Grabpay grabpay;

      private Ideal ideal;

      private Klarna klarna;

      private Konbini konbini;

      private Oxxo oxxo;

      private P24 p24;

      private Paynow paynow;

      private SepaDebit sepaDebit;

      private Sofort sofort;

      private UsBankAccount usBankAccount;

      private WechatPay wechatPay;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public PaymentMethodOptions build() {
        return new PaymentMethodOptions(
          this.acssDebit,
          this.affirm,
          this.afterpayClearpay,
          this.alipay,
          this.auBecsDebit,
          this.bacsDebit,
          this.bancontact,
          this.boleto,
          this.card,
          this.eps,
          this.extraParams,
          this.fpx,
          this.giropay,
          this.grabpay,
          this.ideal,
          this.klarna,
          this.konbini,
          this.oxxo,
          this.p24,
          this.paynow,
          this.sepaDebit,
          this.sofort,
          this.usBankAccount,
          this.wechatPay
        );
      }

      /**
       * contains details about the ACSS Debit payment method options.
       */
      public Builder setAcssDebit(AcssDebit acssDebit) {
        this.acssDebit = acssDebit;
        return this;
      }

      /**
       * contains details about the Affirm payment method options.
       */
      public Builder setAffirm(Affirm affirm) {
        this.affirm = affirm;
        return this;
      }

      /**
       * contains details about the Afterpay Clearpay payment method options.
       */
      public Builder setAfterpayClearpay(AfterpayClearpay afterpayClearpay) {
        this.afterpayClearpay = afterpayClearpay;
        return this;
      }

      /**
       * contains details about the Alipay payment method options.
       */
      public Builder setAlipay(Alipay alipay) {
        this.alipay = alipay;
        return this;
      }

      /**
       * contains details about the AU Becs Debit payment method options.
       */
      public Builder setAuBecsDebit(AuBecsDebit auBecsDebit) {
        this.auBecsDebit = auBecsDebit;
        return this;
      }

      /**
       * contains details about the Bacs Debit payment method options.
       */
      public Builder setBacsDebit(BacsDebit bacsDebit) {
        this.bacsDebit = bacsDebit;
        return this;
      }

      /**
       * contains details about the Bancontact payment method options.
       */
      public Builder setBancontact(Bancontact bancontact) {
        this.bancontact = bancontact;
        return this;
      }

      /**
       * contains details about the Boleto payment method options.
       */
      public Builder setBoleto(Boleto boleto) {
        this.boleto = boleto;
        return this;
      }

      /**
       * contains details about the Card payment method options.
       */
      public Builder setCard(Card card) {
        this.card = card;
        return this;
      }

      /**
       * contains details about the EPS payment method options.
       */
      public Builder setEps(Eps eps) {
        this.eps = eps;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * contains details about the EPS payment method options.
       */
      public Builder setFpx(Fpx fpx) {
        this.fpx = fpx;
        return this;
      }

      /**
       * contains details about the Giropay payment method options.
       */
      public Builder setGiropay(Giropay giropay) {
        this.giropay = giropay;
        return this;
      }

      /**
       * contains details about the Grabpay payment method options.
       */
      public Builder setGrabpay(Grabpay grabpay) {
        this.grabpay = grabpay;
        return this;
      }

      /**
       * contains details about the Ideal payment method options.
       */
      public Builder setIdeal(Ideal ideal) {
        this.ideal = ideal;
        return this;
      }

      /**
       * contains details about the Klarna payment method options.
       */
      public Builder setKlarna(Klarna klarna) {
        this.klarna = klarna;
        return this;
      }

      /**
       * contains details about the Konbini payment method options.
       */
      public Builder setKonbini(Konbini konbini) {
        this.konbini = konbini;
        return this;
      }

      /**
       * contains details about the OXXO payment method options.
       */
      public Builder setOxxo(Oxxo oxxo) {
        this.oxxo = oxxo;
        return this;
      }

      /**
       * contains details about the P24 payment method options.
       */
      public Builder setP24(P24 p24) {
        this.p24 = p24;
        return this;
      }

      /**
       * contains details about the PayNow payment method options.
       */
      public Builder setPaynow(Paynow paynow) {
        this.paynow = paynow;
        return this;
      }

      /**
       * contains details about the Sepa Debit payment method options.
       */
      public Builder setSepaDebit(SepaDebit sepaDebit) {
        this.sepaDebit = sepaDebit;
        return this;
      }

      /**
       * contains details about the Sofort payment method options.
       */
      public Builder setSofort(Sofort sofort) {
        this.sofort = sofort;
        return this;
      }

      /**
       * contains details about the Us Bank Account payment method options.
       */
      public Builder setUsBankAccount(UsBankAccount usBankAccount) {
        this.usBankAccount = usBankAccount;
        return this;
      }

      /**
       * contains details about the WeChat Pay payment method options.
       */
      public Builder setWechatPay(WechatPay wechatPay) {
        this.wechatPay = wechatPay;
        return this;
      }
    }
    @Getter
    public static class AcssDebit {
      /**
       * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>. This is only accepted for Checkout Sessions in {@code setup} mode.
       */
      @SerializedName("currency")
      Currency currency;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Additional fields for Mandate creation.
       */
      @SerializedName("mandate_options")
      MandateOptions mandateOptions;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      /**
       * Verification method for the intent.
       */
      @SerializedName("verification_method")
      VerificationMethod verificationMethod;

      private AcssDebit(
          Currency currency,
          Map<String, Object> extraParams,
          MandateOptions mandateOptions,
          SetupFutureUsage setupFutureUsage,
          VerificationMethod verificationMethod) {
        this.currency = currency;
        this.extraParams = extraParams;
        this.mandateOptions = mandateOptions;
        this.setupFutureUsage = setupFutureUsage;
        this.verificationMethod = verificationMethod;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Currency currency;

        private Map<String, Object> extraParams;

        private MandateOptions mandateOptions;

        private SetupFutureUsage setupFutureUsage;

        private VerificationMethod verificationMethod;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public AcssDebit build() {
          return new AcssDebit(
            this.currency,
            this.extraParams,
            this.mandateOptions,
            this.setupFutureUsage,
            this.verificationMethod
          );
        }

        /**
         * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>. This is only accepted for Checkout Sessions in {@code setup} mode.
         */
        public Builder setCurrency(Currency currency) {
          this.currency = currency;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Additional fields for Mandate creation.
         */
        public Builder setMandateOptions(MandateOptions mandateOptions) {
          this.mandateOptions = mandateOptions;
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }

        /**
         * Verification method for the intent.
         */
        public Builder setVerificationMethod(VerificationMethod verificationMethod) {
          this.verificationMethod = verificationMethod;
          return this;
        }
      }
      @Getter
      public static class MandateOptions {
        /**
         * A URL for custom mandate text to render during confirmation step. The URL will be rendered with additional GET parameters {@code payment_intent} and {@code payment_intent_client_secret} when confirming a Payment Intent, or {@code setup_intent} and {@code setup_intent_client_secret} when confirming a Setup Intent.
         */
        @SerializedName("custom_mandate_url")
        Object customMandateUrl;

        /**
         * List of Stripe products where this mandate can be selected automatically. Only usable in {@code setup} mode.
         */
        @SerializedName("default_for")
        List<DefaultFor> defaultFor;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * Description of the mandate interval. Only required if 'payment_schedule' parameter is 'interval' or 'combined'.
         */
        @SerializedName("interval_description")
        String intervalDescription;

        /**
         * Payment schedule for the mandate.
         */
        @SerializedName("payment_schedule")
        PaymentSchedule paymentSchedule;

        /**
         * Transaction type of the mandate.
         */
        @SerializedName("transaction_type")
        TransactionType transactionType;

        private MandateOptions(
            Object customMandateUrl,
            List<DefaultFor> defaultFor,
            Map<String, Object> extraParams,
            String intervalDescription,
            PaymentSchedule paymentSchedule,
            TransactionType transactionType) {
          this.customMandateUrl = customMandateUrl;
          this.defaultFor = defaultFor;
          this.extraParams = extraParams;
          this.intervalDescription = intervalDescription;
          this.paymentSchedule = paymentSchedule;
          this.transactionType = transactionType;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Object customMandateUrl;

          private List<DefaultFor> defaultFor;

          private Map<String, Object> extraParams;

          private String intervalDescription;

          private PaymentSchedule paymentSchedule;

          private TransactionType transactionType;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public MandateOptions build() {
            return new MandateOptions(
              this.customMandateUrl,
              this.defaultFor,
              this.extraParams,
              this.intervalDescription,
              this.paymentSchedule,
              this.transactionType
            );
          }

          /**
           * A URL for custom mandate text to render during confirmation step. The URL will be rendered with additional GET parameters {@code payment_intent} and {@code payment_intent_client_secret} when confirming a Payment Intent, or {@code setup_intent} and {@code setup_intent_client_secret} when confirming a Setup Intent.
           */
          public Builder setCustomMandateUrl(String customMandateUrl) {
            this.customMandateUrl = customMandateUrl;
            return this;
          }

          /**
           * A URL for custom mandate text to render during confirmation step. The URL will be rendered with additional GET parameters {@code payment_intent} and {@code payment_intent_client_secret} when confirming a Payment Intent, or {@code setup_intent} and {@code setup_intent_client_secret} when confirming a Setup Intent.
           */
          public Builder setCustomMandateUrl(EmptyParam customMandateUrl) {
            this.customMandateUrl = customMandateUrl;
            return this;
          }

          /**
           * Add an element to `defaultFor` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit.MandateOptions#defaultFor} for the field documentation.
           */
          public Builder addDefaultFor(DefaultFor element) {
            if (this.defaultFor == null) {
              this.defaultFor = new ArrayList<>();
            }
            this.defaultFor.add(element);
            return this;
          }

          /**
           * Add all elements to `defaultFor` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit.MandateOptions#defaultFor} for the field documentation.
           */
          public Builder addAllDefaultFor(List<DefaultFor> elements) {
            if (this.defaultFor == null) {
              this.defaultFor = new ArrayList<>();
            }
            this.defaultFor.addAll(elements);
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit.MandateOptions#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AcssDebit.MandateOptions#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * Description of the mandate interval. Only required if 'payment_schedule' parameter is 'interval' or 'combined'.
           */
          public Builder setIntervalDescription(String intervalDescription) {
            this.intervalDescription = intervalDescription;
            return this;
          }

          /**
           * Payment schedule for the mandate.
           */
          public Builder setPaymentSchedule(PaymentSchedule paymentSchedule) {
            this.paymentSchedule = paymentSchedule;
            return this;
          }

          /**
           * Transaction type of the mandate.
           */
          public Builder setTransactionType(TransactionType transactionType) {
            this.transactionType = transactionType;
            return this;
          }
        }
        public enum DefaultFor implements ApiRequestParams.EnumParam {
          @SerializedName("invoice")
          INVOICE("invoice"),

          @SerializedName("subscription")
          SUBSCRIPTION("subscription");
          @Getter(onMethod_ = {@Override})
          private final String value;
          DefaultFor(String value) {
            this.value = value;
          }
        }
        public enum PaymentSchedule implements ApiRequestParams.EnumParam {
          @SerializedName("combined")
          COMBINED("combined"),

          @SerializedName("interval")
          INTERVAL("interval"),

          @SerializedName("sporadic")
          SPORADIC("sporadic");
          @Getter(onMethod_ = {@Override})
          private final String value;
          PaymentSchedule(String value) {
            this.value = value;
          }
        }
        public enum TransactionType implements ApiRequestParams.EnumParam {
          @SerializedName("business")
          BUSINESS("business"),

          @SerializedName("personal")
          PERSONAL("personal");
          @Getter(onMethod_ = {@Override})
          private final String value;
          TransactionType(String value) {
            this.value = value;
          }
        }
      }
      public enum Currency implements ApiRequestParams.EnumParam {
        @SerializedName("cad")
        CAD("cad"),

        @SerializedName("usd")
        USD("usd");
        @Getter(onMethod_ = {@Override})
        private final String value;
        Currency(String value) {
          this.value = value;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none"),

        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
      public enum VerificationMethod implements ApiRequestParams.EnumParam {
        @SerializedName("automatic")
        AUTOMATIC("automatic"),

        @SerializedName("instant")
        INSTANT("instant"),

        @SerializedName("microdeposits")
        MICRODEPOSITS("microdeposits");
        @Getter(onMethod_ = {@Override})
        private final String value;
        VerificationMethod(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Affirm {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Affirm(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Affirm build() {
          return new Affirm(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Affirm#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Affirm#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class AfterpayClearpay {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private AfterpayClearpay(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public AfterpayClearpay build() {
          return new AfterpayClearpay(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AfterpayClearpay#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AfterpayClearpay#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Alipay {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Alipay(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Alipay build() {
          return new Alipay(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Alipay#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Alipay#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class AuBecsDebit {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private AuBecsDebit(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public AuBecsDebit build() {
          return new AuBecsDebit(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AuBecsDebit#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.AuBecsDebit#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class BacsDebit {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private BacsDebit(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public BacsDebit build() {
          return new BacsDebit(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.BacsDebit#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.BacsDebit#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none"),

        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bancontact {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Bancontact(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bancontact build() {
          return new Bancontact(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Bancontact#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Bancontact#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Boleto {
      /**
       * The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto invoice will expire on Wednesday at 23:59 America/Sao_Paulo time.
       */
      @SerializedName("expires_after_days")
      Long expiresAfterDays;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Boleto(
          Long expiresAfterDays,
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage) {
        this.expiresAfterDays = expiresAfterDays;
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Long expiresAfterDays;

        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Boleto build() {
          return new Boleto(this.expiresAfterDays, this.extraParams, this.setupFutureUsage);
        }

        /**
         * The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto invoice will expire on Wednesday at 23:59 America/Sao_Paulo time.
         */
        public Builder setExpiresAfterDays(Long expiresAfterDays) {
          this.expiresAfterDays = expiresAfterDays;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Boleto#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Boleto#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none"),

        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Card {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      /**
       * Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the <em>concatenation</em> of both prefix and suffix (including separators) will appear truncated to 22 characters.
       */
      @SerializedName("statement_descriptor_suffix_kana")
      String statementDescriptorSuffixKana;

      /**
       * Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the <em>concatenation</em> of both prefix and suffix (including separators) will appear truncated to 17 characters.
       */
      @SerializedName("statement_descriptor_suffix_kanji")
      String statementDescriptorSuffixKanji;

      private Card(
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage,
          String statementDescriptorSuffixKana,
          String statementDescriptorSuffixKanji) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
        this.statementDescriptorSuffixKana = statementDescriptorSuffixKana;
        this.statementDescriptorSuffixKanji = statementDescriptorSuffixKanji;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        private String statementDescriptorSuffixKana;

        private String statementDescriptorSuffixKanji;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Card build() {
          return new Card(
            this.extraParams,
            this.setupFutureUsage,
            this.statementDescriptorSuffixKana,
            this.statementDescriptorSuffixKanji
          );
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Card#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Card#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }

        /**
         * Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the <em>concatenation</em> of both prefix and suffix (including separators) will appear truncated to 22 characters.
         */
        public Builder setStatementDescriptorSuffixKana(String statementDescriptorSuffixKana) {
          this.statementDescriptorSuffixKana = statementDescriptorSuffixKana;
          return this;
        }

        /**
         * Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the <em>concatenation</em> of both prefix and suffix (including separators) will appear truncated to 17 characters.
         */
        public Builder setStatementDescriptorSuffixKanji(String statementDescriptorSuffixKanji) {
          this.statementDescriptorSuffixKanji = statementDescriptorSuffixKanji;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Eps {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Eps(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Eps build() {
          return new Eps(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Eps#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Eps#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Fpx {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Fpx(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Fpx build() {
          return new Fpx(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Fpx#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Fpx#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Giropay {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Giropay(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Giropay build() {
          return new Giropay(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Giropay#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Giropay#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Grabpay {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Grabpay(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Grabpay build() {
          return new Grabpay(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Grabpay#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Grabpay#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ideal {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Ideal(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ideal build() {
          return new Ideal(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Ideal#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Ideal#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Klarna {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Klarna(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Klarna build() {
          return new Klarna(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Klarna#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Klarna#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Konbini {
      /**
       * The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and {@code expires_after_days} set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. Defaults to 3 days.
       */
      @SerializedName("expires_after_days")
      Object expiresAfterDays;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Konbini(
          Object expiresAfterDays,
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage) {
        this.expiresAfterDays = expiresAfterDays;
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Object expiresAfterDays;

        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Konbini build() {
          return new Konbini(this.expiresAfterDays, this.extraParams, this.setupFutureUsage);
        }

        /**
         * The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and {@code expires_after_days} set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. Defaults to 3 days.
         */
        public Builder setExpiresAfterDays(Long expiresAfterDays) {
          this.expiresAfterDays = expiresAfterDays;
          return this;
        }

        /**
         * The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and {@code expires_after_days} set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST. Defaults to 3 days.
         */
        public Builder setExpiresAfterDays(EmptyParam expiresAfterDays) {
          this.expiresAfterDays = expiresAfterDays;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Konbini#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Konbini#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Oxxo {
      /**
       * The number of calendar days before an OXXO voucher expires. For example, if you create an OXXO voucher on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
       */
      @SerializedName("expires_after_days")
      Long expiresAfterDays;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Oxxo(
          Long expiresAfterDays,
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage) {
        this.expiresAfterDays = expiresAfterDays;
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Long expiresAfterDays;

        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Oxxo build() {
          return new Oxxo(this.expiresAfterDays, this.extraParams, this.setupFutureUsage);
        }

        /**
         * The number of calendar days before an OXXO voucher expires. For example, if you create an OXXO voucher on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
         */
        public Builder setExpiresAfterDays(Long expiresAfterDays) {
          this.expiresAfterDays = expiresAfterDays;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Oxxo#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Oxxo#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class P24 {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      /**
       * Confirm that the payer has accepted the P24 terms and conditions.
       */
      @SerializedName("tos_shown_and_accepted")
      Boolean tosShownAndAccepted;

      private P24(
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage,
          Boolean tosShownAndAccepted) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
        this.tosShownAndAccepted = tosShownAndAccepted;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        private Boolean tosShownAndAccepted;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public P24 build() {
          return new P24(this.extraParams, this.setupFutureUsage, this.tosShownAndAccepted);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.P24#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.P24#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }

        /**
         * Confirm that the payer has accepted the P24 terms and conditions.
         */
        public Builder setTosShownAndAccepted(Boolean tosShownAndAccepted) {
          this.tosShownAndAccepted = tosShownAndAccepted;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Paynow {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      /**
       * Confirm that the payer has accepted the P24 terms and conditions.
       */
      @SerializedName("tos_shown_and_accepted")
      Boolean tosShownAndAccepted;

      private Paynow(
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage,
          Boolean tosShownAndAccepted) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
        this.tosShownAndAccepted = tosShownAndAccepted;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        private Boolean tosShownAndAccepted;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Paynow build() {
          return new Paynow(this.extraParams, this.setupFutureUsage, this.tosShownAndAccepted);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Paynow#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Paynow#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }

        /**
         * Confirm that the payer has accepted the P24 terms and conditions.
         */
        public Builder setTosShownAndAccepted(Boolean tosShownAndAccepted) {
          this.tosShownAndAccepted = tosShownAndAccepted;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class SepaDebit {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private SepaDebit(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public SepaDebit build() {
          return new SepaDebit(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.SepaDebit#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.SepaDebit#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none"),

        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sofort {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private Sofort(Map<String, Object> extraParams, SetupFutureUsage setupFutureUsage) {
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sofort build() {
          return new Sofort(this.extraParams, this.setupFutureUsage);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Sofort#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.Sofort#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class UsBankAccount {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Additional fields for Financial Connections Session creation.
       */
      @SerializedName("financial_connections")
      FinancialConnections financialConnections;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      /**
       * Verification method for the intent.
       */
      @SerializedName("verification_method")
      VerificationMethod verificationMethod;

      private UsBankAccount(
          Map<String, Object> extraParams,
          FinancialConnections financialConnections,
          SetupFutureUsage setupFutureUsage,
          VerificationMethod verificationMethod) {
        this.extraParams = extraParams;
        this.financialConnections = financialConnections;
        this.setupFutureUsage = setupFutureUsage;
        this.verificationMethod = verificationMethod;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private FinancialConnections financialConnections;

        private SetupFutureUsage setupFutureUsage;

        private VerificationMethod verificationMethod;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public UsBankAccount build() {
          return new UsBankAccount(
            this.extraParams,
            this.financialConnections,
            this.setupFutureUsage,
            this.verificationMethod
          );
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Additional fields for Financial Connections Session creation.
         */
        public Builder setFinancialConnections(FinancialConnections financialConnections) {
          this.financialConnections = financialConnections;
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }

        /**
         * Verification method for the intent.
         */
        public Builder setVerificationMethod(VerificationMethod verificationMethod) {
          this.verificationMethod = verificationMethod;
          return this;
        }
      }
      @Getter
      public static class FinancialConnections {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The list of permissions to request. If this parameter is passed, the {@code payment_method} permission must be included. Valid permissions include: {@code balances}, {@code ownership}, {@code payment_method}, and {@code transactions}.
         */
        @SerializedName("permissions")
        List<Permission> permissions;

        private FinancialConnections(
            Map<String, Object> extraParams,
            List<Permission> permissions) {
          this.extraParams = extraParams;
          this.permissions = permissions;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private List<Permission> permissions;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public FinancialConnections build() {
            return new FinancialConnections(this.extraParams, this.permissions);
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount.FinancialConnections#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount.FinancialConnections#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * Add an element to `permissions` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount.FinancialConnections#permissions} for the field documentation.
           */
          public Builder addPermission(Permission element) {
            if (this.permissions == null) {
              this.permissions = new ArrayList<>();
            }
            this.permissions.add(element);
            return this;
          }

          /**
           * Add all elements to `permissions` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.PaymentMethodOptions.UsBankAccount.FinancialConnections#permissions} for the field documentation.
           */
          public Builder addAllPermission(List<Permission> elements) {
            if (this.permissions == null) {
              this.permissions = new ArrayList<>();
            }
            this.permissions.addAll(elements);
            return this;
          }
        }
        public enum Permission implements ApiRequestParams.EnumParam {
          @SerializedName("balances")
          BALANCES("balances"),

          @SerializedName("ownership")
          OWNERSHIP("ownership"),

          @SerializedName("payment_method")
          PAYMENT_METHOD("payment_method"),

          @SerializedName("transactions")
          TRANSACTIONS("transactions");
          @Getter(onMethod_ = {@Override})
          private final String value;
          Permission(String value) {
            this.value = value;
          }
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none"),

        @SerializedName("off_session")
        OFF_SESSION("off_session"),

        @SerializedName("on_session")
        ON_SESSION("on_session");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
      public enum VerificationMethod implements ApiRequestParams.EnumParam {
        @SerializedName("automatic")
        AUTOMATIC("automatic"),

        @SerializedName("instant")
        INSTANT("instant");
        @Getter(onMethod_ = {@Override})
        private final String value;
        VerificationMethod(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class WechatPay {
      /**
       * The app ID registered with WeChat Pay. Only required when client is ios or android.
       */
      @SerializedName("app_id")
      String appId;

      /**
       * The client type that the end customer will pay from.
       */
      @SerializedName("client")
      Client client;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
       *
       * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
       */
      @SerializedName("setup_future_usage")
      SetupFutureUsage setupFutureUsage;

      private WechatPay(
          String appId,
          Client client,
          Map<String, Object> extraParams,
          SetupFutureUsage setupFutureUsage) {
        this.appId = appId;
        this.client = client;
        this.extraParams = extraParams;
        this.setupFutureUsage = setupFutureUsage;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private String appId;

        private Client client;

        private Map<String, Object> extraParams;

        private SetupFutureUsage setupFutureUsage;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public WechatPay build() {
          return new WechatPay(this.appId, this.client, this.extraParams, this.setupFutureUsage);
        }

        /**
         * The app ID registered with WeChat Pay. Only required when client is ios or android.
         */
        public Builder setAppId(String appId) {
          this.appId = appId;
          return this;
        }

        /**
         * The client type that the end customer will pay from.
         */
        public Builder setClient(Client client) {
          this.client = client;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.WechatPay#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PaymentMethodOptions.WechatPay#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Indicates that you intend to make future payments with this PaymentIntent's payment method.
         *
         * <p>Providing this parameter will <a href="https://stripe.com/docs/payments/save-during-payment">attach the payment method</a> to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be <a href="https://stripe.com/docs/api/payment_methods/attach">attached</a> to a Customer after the transaction completes.
         *
         * <p>When processing card payments, Stripe also uses {@code setup_future_usage} to dynamically optimize your payment flow and comply with regional legislation and network rules, such as <a href="https://stripe.com/docs/strong-customer-authentication">SCA</a>.
         */
        public Builder setSetupFutureUsage(SetupFutureUsage setupFutureUsage) {
          this.setupFutureUsage = setupFutureUsage;
          return this;
        }
      }
      public enum Client implements ApiRequestParams.EnumParam {
        @SerializedName("android")
        ANDROID("android"),

        @SerializedName("ios")
        IOS("ios"),

        @SerializedName("web")
        WEB("web");
        @Getter(onMethod_ = {@Override})
        private final String value;
        Client(String value) {
          this.value = value;
        }
      }
      public enum SetupFutureUsage implements ApiRequestParams.EnumParam {
        @SerializedName("none")
        NONE("none");
        @Getter(onMethod_ = {@Override})
        private final String value;
        SetupFutureUsage(String value) {
          this.value = value;
        }
      }
    }
  }
  @Getter
  public static class PhoneNumberCollection {
    /**
     * Set to {@code true} to enable phone number collection.
     */
    @SerializedName("enabled")
    Boolean enabled;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    private PhoneNumberCollection(Boolean enabled, Map<String, Object> extraParams) {
      this.enabled = enabled;
      this.extraParams = extraParams;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Boolean enabled;

      private Map<String, Object> extraParams;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public PhoneNumberCollection build() {
        return new PhoneNumberCollection(this.enabled, this.extraParams);
      }

      /**
       * Set to {@code true} to enable phone number collection.
       */
      public Builder setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PhoneNumberCollection#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.PhoneNumberCollection#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }
    }
  }
  @Getter
  public static class SetupIntentData {
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     */
    @SerializedName("description")
    String description;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
     */
    @SerializedName("metadata")
    Map<String, String> metadata;

    /**
     * The Stripe account for which the setup is intended.
     */
    @SerializedName("on_behalf_of")
    String onBehalfOf;

    private SetupIntentData(
        String description,
        Map<String, Object> extraParams,
        Map<String, String> metadata,
        String onBehalfOf) {
      this.description = description;
      this.extraParams = extraParams;
      this.metadata = metadata;
      this.onBehalfOf = onBehalfOf;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private String description;

      private Map<String, Object> extraParams;

      private Map<String, String> metadata;

      private String onBehalfOf;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public SetupIntentData build() {
        return new SetupIntentData(
          this.description,
          this.extraParams,
          this.metadata,
          this.onBehalfOf
        );
      }

      /**
       * An arbitrary string attached to the object. Often useful for displaying to users.
       */
      public Builder setDescription(String description) {
        this.description = description;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SetupIntentData#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SetupIntentData#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SetupIntentData#metadata} for the field documentation.
       */
      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SetupIntentData#metadata} for the field documentation.
       */
      public Builder putAllMetadata(Map<String, String> map) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.putAll(map);
        return this;
      }

      /**
       * The Stripe account for which the setup is intended.
       */
      public Builder setOnBehalfOf(String onBehalfOf) {
        this.onBehalfOf = onBehalfOf;
        return this;
      }
    }
  }
  @Getter
  public static class ShippingAddressCollection {
    /**
     * An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: {@code AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI}.
     */
    @SerializedName("allowed_countries")
    List<AllowedCountry> allowedCountries;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    private ShippingAddressCollection(
        List<AllowedCountry> allowedCountries,
        Map<String, Object> extraParams) {
      this.allowedCountries = allowedCountries;
      this.extraParams = extraParams;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private List<AllowedCountry> allowedCountries;

      private Map<String, Object> extraParams;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public ShippingAddressCollection build() {
        return new ShippingAddressCollection(this.allowedCountries, this.extraParams);
      }

      /**
       * Add an element to `allowedCountries` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.ShippingAddressCollection#allowedCountries} for the field documentation.
       */
      public Builder addAllowedCountry(AllowedCountry element) {
        if (this.allowedCountries == null) {
          this.allowedCountries = new ArrayList<>();
        }
        this.allowedCountries.add(element);
        return this;
      }

      /**
       * Add all elements to `allowedCountries` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.ShippingAddressCollection#allowedCountries} for the field documentation.
       */
      public Builder addAllAllowedCountry(List<AllowedCountry> elements) {
        if (this.allowedCountries == null) {
          this.allowedCountries = new ArrayList<>();
        }
        this.allowedCountries.addAll(elements);
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingAddressCollection#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingAddressCollection#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }
    }
    public enum AllowedCountry implements ApiRequestParams.EnumParam {
      @SerializedName("AC")
      AC("AC"),

      @SerializedName("AD")
      AD("AD"),

      @SerializedName("AE")
      AE("AE"),

      @SerializedName("AF")
      AF("AF"),

      @SerializedName("AG")
      AG("AG"),

      @SerializedName("AI")
      AI("AI"),

      @SerializedName("AL")
      AL("AL"),

      @SerializedName("AM")
      AM("AM"),

      @SerializedName("AO")
      AO("AO"),

      @SerializedName("AQ")
      AQ("AQ"),

      @SerializedName("AR")
      AR("AR"),

      @SerializedName("AT")
      AT("AT"),

      @SerializedName("AU")
      AU("AU"),

      @SerializedName("AW")
      AW("AW"),

      @SerializedName("AX")
      AX("AX"),

      @SerializedName("AZ")
      AZ("AZ"),

      @SerializedName("BA")
      BA("BA"),

      @SerializedName("BB")
      BB("BB"),

      @SerializedName("BD")
      BD("BD"),

      @SerializedName("BE")
      BE("BE"),

      @SerializedName("BF")
      BF("BF"),

      @SerializedName("BG")
      BG("BG"),

      @SerializedName("BH")
      BH("BH"),

      @SerializedName("BI")
      BI("BI"),

      @SerializedName("BJ")
      BJ("BJ"),

      @SerializedName("BL")
      BL("BL"),

      @SerializedName("BM")
      BM("BM"),

      @SerializedName("BN")
      BN("BN"),

      @SerializedName("BO")
      BO("BO"),

      @SerializedName("BQ")
      BQ("BQ"),

      @SerializedName("BR")
      BR("BR"),

      @SerializedName("BS")
      BS("BS"),

      @SerializedName("BT")
      BT("BT"),

      @SerializedName("BV")
      BV("BV"),

      @SerializedName("BW")
      BW("BW"),

      @SerializedName("BY")
      BY("BY"),

      @SerializedName("BZ")
      BZ("BZ"),

      @SerializedName("CA")
      CA("CA"),

      @SerializedName("CD")
      CD("CD"),

      @SerializedName("CF")
      CF("CF"),

      @SerializedName("CG")
      CG("CG"),

      @SerializedName("CH")
      CH("CH"),

      @SerializedName("CI")
      CI("CI"),

      @SerializedName("CK")
      CK("CK"),

      @SerializedName("CL")
      CL("CL"),

      @SerializedName("CM")
      CM("CM"),

      @SerializedName("CN")
      CN("CN"),

      @SerializedName("CO")
      CO("CO"),

      @SerializedName("CR")
      CR("CR"),

      @SerializedName("CV")
      CV("CV"),

      @SerializedName("CW")
      CW("CW"),

      @SerializedName("CY")
      CY("CY"),

      @SerializedName("CZ")
      CZ("CZ"),

      @SerializedName("DE")
      DE("DE"),

      @SerializedName("DJ")
      DJ("DJ"),

      @SerializedName("DK")
      DK("DK"),

      @SerializedName("DM")
      DM("DM"),

      @SerializedName("DO")
      DO("DO"),

      @SerializedName("DZ")
      DZ("DZ"),

      @SerializedName("EC")
      EC("EC"),

      @SerializedName("EE")
      EE("EE"),

      @SerializedName("EG")
      EG("EG"),

      @SerializedName("EH")
      EH("EH"),

      @SerializedName("ER")
      ER("ER"),

      @SerializedName("ES")
      ES("ES"),

      @SerializedName("ET")
      ET("ET"),

      @SerializedName("FI")
      FI("FI"),

      @SerializedName("FJ")
      FJ("FJ"),

      @SerializedName("FK")
      FK("FK"),

      @SerializedName("FO")
      FO("FO"),

      @SerializedName("FR")
      FR("FR"),

      @SerializedName("GA")
      GA("GA"),

      @SerializedName("GB")
      GB("GB"),

      @SerializedName("GD")
      GD("GD"),

      @SerializedName("GE")
      GE("GE"),

      @SerializedName("GF")
      GF("GF"),

      @SerializedName("GG")
      GG("GG"),

      @SerializedName("GH")
      GH("GH"),

      @SerializedName("GI")
      GI("GI"),

      @SerializedName("GL")
      GL("GL"),

      @SerializedName("GM")
      GM("GM"),

      @SerializedName("GN")
      GN("GN"),

      @SerializedName("GP")
      GP("GP"),

      @SerializedName("GQ")
      GQ("GQ"),

      @SerializedName("GR")
      GR("GR"),

      @SerializedName("GS")
      GS("GS"),

      @SerializedName("GT")
      GT("GT"),

      @SerializedName("GU")
      GU("GU"),

      @SerializedName("GW")
      GW("GW"),

      @SerializedName("GY")
      GY("GY"),

      @SerializedName("HK")
      HK("HK"),

      @SerializedName("HN")
      HN("HN"),

      @SerializedName("HR")
      HR("HR"),

      @SerializedName("HT")
      HT("HT"),

      @SerializedName("HU")
      HU("HU"),

      @SerializedName("ID")
      ID("ID"),

      @SerializedName("IE")
      IE("IE"),

      @SerializedName("IL")
      IL("IL"),

      @SerializedName("IM")
      IM("IM"),

      @SerializedName("IN")
      IN("IN"),

      @SerializedName("IO")
      IO("IO"),

      @SerializedName("IQ")
      IQ("IQ"),

      @SerializedName("IS")
      IS("IS"),

      @SerializedName("IT")
      IT("IT"),

      @SerializedName("JE")
      JE("JE"),

      @SerializedName("JM")
      JM("JM"),

      @SerializedName("JO")
      JO("JO"),

      @SerializedName("JP")
      JP("JP"),

      @SerializedName("KE")
      KE("KE"),

      @SerializedName("KG")
      KG("KG"),

      @SerializedName("KH")
      KH("KH"),

      @SerializedName("KI")
      KI("KI"),

      @SerializedName("KM")
      KM("KM"),

      @SerializedName("KN")
      KN("KN"),

      @SerializedName("KR")
      KR("KR"),

      @SerializedName("KW")
      KW("KW"),

      @SerializedName("KY")
      KY("KY"),

      @SerializedName("KZ")
      KZ("KZ"),

      @SerializedName("LA")
      LA("LA"),

      @SerializedName("LB")
      LB("LB"),

      @SerializedName("LC")
      LC("LC"),

      @SerializedName("LI")
      LI("LI"),

      @SerializedName("LK")
      LK("LK"),

      @SerializedName("LR")
      LR("LR"),

      @SerializedName("LS")
      LS("LS"),

      @SerializedName("LT")
      LT("LT"),

      @SerializedName("LU")
      LU("LU"),

      @SerializedName("LV")
      LV("LV"),

      @SerializedName("LY")
      LY("LY"),

      @SerializedName("MA")
      MA("MA"),

      @SerializedName("MC")
      MC("MC"),

      @SerializedName("MD")
      MD("MD"),

      @SerializedName("ME")
      ME("ME"),

      @SerializedName("MF")
      MF("MF"),

      @SerializedName("MG")
      MG("MG"),

      @SerializedName("MK")
      MK("MK"),

      @SerializedName("ML")
      ML("ML"),

      @SerializedName("MM")
      MM("MM"),

      @SerializedName("MN")
      MN("MN"),

      @SerializedName("MO")
      MO("MO"),

      @SerializedName("MQ")
      MQ("MQ"),

      @SerializedName("MR")
      MR("MR"),

      @SerializedName("MS")
      MS("MS"),

      @SerializedName("MT")
      MT("MT"),

      @SerializedName("MU")
      MU("MU"),

      @SerializedName("MV")
      MV("MV"),

      @SerializedName("MW")
      MW("MW"),

      @SerializedName("MX")
      MX("MX"),

      @SerializedName("MY")
      MY("MY"),

      @SerializedName("MZ")
      MZ("MZ"),

      @SerializedName("NA")
      NA("NA"),

      @SerializedName("NC")
      NC("NC"),

      @SerializedName("NE")
      NE("NE"),

      @SerializedName("NG")
      NG("NG"),

      @SerializedName("NI")
      NI("NI"),

      @SerializedName("NL")
      NL("NL"),

      @SerializedName("NO")
      NO("NO"),

      @SerializedName("NP")
      NP("NP"),

      @SerializedName("NR")
      NR("NR"),

      @SerializedName("NU")
      NU("NU"),

      @SerializedName("NZ")
      NZ("NZ"),

      @SerializedName("OM")
      OM("OM"),

      @SerializedName("PA")
      PA("PA"),

      @SerializedName("PE")
      PE("PE"),

      @SerializedName("PF")
      PF("PF"),

      @SerializedName("PG")
      PG("PG"),

      @SerializedName("PH")
      PH("PH"),

      @SerializedName("PK")
      PK("PK"),

      @SerializedName("PL")
      PL("PL"),

      @SerializedName("PM")
      PM("PM"),

      @SerializedName("PN")
      PN("PN"),

      @SerializedName("PR")
      PR("PR"),

      @SerializedName("PS")
      PS("PS"),

      @SerializedName("PT")
      PT("PT"),

      @SerializedName("PY")
      PY("PY"),

      @SerializedName("QA")
      QA("QA"),

      @SerializedName("RE")
      RE("RE"),

      @SerializedName("RO")
      RO("RO"),

      @SerializedName("RS")
      RS("RS"),

      @SerializedName("RU")
      RU("RU"),

      @SerializedName("RW")
      RW("RW"),

      @SerializedName("SA")
      SA("SA"),

      @SerializedName("SB")
      SB("SB"),

      @SerializedName("SC")
      SC("SC"),

      @SerializedName("SE")
      SE("SE"),

      @SerializedName("SG")
      SG("SG"),

      @SerializedName("SH")
      SH("SH"),

      @SerializedName("SI")
      SI("SI"),

      @SerializedName("SJ")
      SJ("SJ"),

      @SerializedName("SK")
      SK("SK"),

      @SerializedName("SL")
      SL("SL"),

      @SerializedName("SM")
      SM("SM"),

      @SerializedName("SN")
      SN("SN"),

      @SerializedName("SO")
      SO("SO"),

      @SerializedName("SR")
      SR("SR"),

      @SerializedName("SS")
      SS("SS"),

      @SerializedName("ST")
      ST("ST"),

      @SerializedName("SV")
      SV("SV"),

      @SerializedName("SX")
      SX("SX"),

      @SerializedName("SZ")
      SZ("SZ"),

      @SerializedName("TA")
      TA("TA"),

      @SerializedName("TC")
      TC("TC"),

      @SerializedName("TD")
      TD("TD"),

      @SerializedName("TF")
      TF("TF"),

      @SerializedName("TG")
      TG("TG"),

      @SerializedName("TH")
      TH("TH"),

      @SerializedName("TJ")
      TJ("TJ"),

      @SerializedName("TK")
      TK("TK"),

      @SerializedName("TL")
      TL("TL"),

      @SerializedName("TM")
      TM("TM"),

      @SerializedName("TN")
      TN("TN"),

      @SerializedName("TO")
      TO("TO"),

      @SerializedName("TR")
      TR("TR"),

      @SerializedName("TT")
      TT("TT"),

      @SerializedName("TV")
      TV("TV"),

      @SerializedName("TW")
      TW("TW"),

      @SerializedName("TZ")
      TZ("TZ"),

      @SerializedName("UA")
      UA("UA"),

      @SerializedName("UG")
      UG("UG"),

      @SerializedName("US")
      US("US"),

      @SerializedName("UY")
      UY("UY"),

      @SerializedName("UZ")
      UZ("UZ"),

      @SerializedName("VA")
      VA("VA"),

      @SerializedName("VC")
      VC("VC"),

      @SerializedName("VE")
      VE("VE"),

      @SerializedName("VG")
      VG("VG"),

      @SerializedName("VN")
      VN("VN"),

      @SerializedName("VU")
      VU("VU"),

      @SerializedName("WF")
      WF("WF"),

      @SerializedName("WS")
      WS("WS"),

      @SerializedName("XK")
      XK("XK"),

      @SerializedName("YE")
      YE("YE"),

      @SerializedName("YT")
      YT("YT"),

      @SerializedName("ZA")
      ZA("ZA"),

      @SerializedName("ZM")
      ZM("ZM"),

      @SerializedName("ZW")
      ZW("ZW"),

      @SerializedName("ZZ")
      ZZ("ZZ");
      @Getter(onMethod_ = {@Override})
      private final String value;
      AllowedCountry(String value) {
        this.value = value;
      }
    }
  }
  @Getter
  public static class ShippingOption {
    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * The ID of the Shipping Rate to use for this shipping option.
     */
    @SerializedName("shipping_rate")
    String shippingRate;

    /**
     * Parameters to be passed to Shipping Rate creation for this shipping option.
     */
    @SerializedName("shipping_rate_data")
    ShippingRateData shippingRateData;

    private ShippingOption(
        Map<String, Object> extraParams,
        String shippingRate,
        ShippingRateData shippingRateData) {
      this.extraParams = extraParams;
      this.shippingRate = shippingRate;
      this.shippingRateData = shippingRateData;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Map<String, Object> extraParams;

      private String shippingRate;

      private ShippingRateData shippingRateData;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public ShippingOption build() {
        return new ShippingOption(this.extraParams, this.shippingRate, this.shippingRateData);
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * The ID of the Shipping Rate to use for this shipping option.
       */
      public Builder setShippingRate(String shippingRate) {
        this.shippingRate = shippingRate;
        return this;
      }

      /**
       * Parameters to be passed to Shipping Rate creation for this shipping option.
       */
      public Builder setShippingRateData(ShippingRateData shippingRateData) {
        this.shippingRateData = shippingRateData;
        return this;
      }
    }
    @Getter
    public static class ShippingRateData {
      /**
       * The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
       */
      @SerializedName("delivery_estimate")
      DeliveryEstimate deliveryEstimate;

      /**
       * The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
       */
      @SerializedName("display_name")
      String displayName;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Describes a fixed amount to charge for shipping. Must be present if type is {@code fixed_amount}.
       */
      @SerializedName("fixed_amount")
      FixedAmount fixedAmount;

      /**
       * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
       */
      @SerializedName("metadata")
      Map<String, String> metadata;

      /**
       * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * A <a href="https://stripe.com/docs/tax/tax-categories">tax code</a> ID. The Shipping tax code is {@code txcd_92010001}.
       */
      @SerializedName("tax_code")
      String taxCode;

      /**
       * The type of calculation to use on the shipping rate. Can only be {@code fixed_amount} for now.
       */
      @SerializedName("type")
      Type type;

      private ShippingRateData(
          DeliveryEstimate deliveryEstimate,
          String displayName,
          Map<String, Object> extraParams,
          FixedAmount fixedAmount,
          Map<String, String> metadata,
          TaxBehavior taxBehavior,
          String taxCode,
          Type type) {
        this.deliveryEstimate = deliveryEstimate;
        this.displayName = displayName;
        this.extraParams = extraParams;
        this.fixedAmount = fixedAmount;
        this.metadata = metadata;
        this.taxBehavior = taxBehavior;
        this.taxCode = taxCode;
        this.type = type;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private DeliveryEstimate deliveryEstimate;

        private String displayName;

        private Map<String, Object> extraParams;

        private FixedAmount fixedAmount;

        private Map<String, String> metadata;

        private TaxBehavior taxBehavior;

        private String taxCode;

        private Type type;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public ShippingRateData build() {
          return new ShippingRateData(
            this.deliveryEstimate,
            this.displayName,
            this.extraParams,
            this.fixedAmount,
            this.metadata,
            this.taxBehavior,
            this.taxCode,
            this.type
          );
        }

        /**
         * The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
         */
        public Builder setDeliveryEstimate(DeliveryEstimate deliveryEstimate) {
          this.deliveryEstimate = deliveryEstimate;
          return this;
        }

        /**
         * The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
         */
        public Builder setDisplayName(String displayName) {
          this.displayName = displayName;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Describes a fixed amount to charge for shipping. Must be present if type is {@code fixed_amount}.
         */
        public Builder setFixedAmount(FixedAmount fixedAmount) {
          this.fixedAmount = fixedAmount;
          return this;
        }

        /**
         * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData#metadata} for the field documentation.
         */
        public Builder putMetadata(String key, String value) {
          if (this.metadata == null) {
            this.metadata = new HashMap<>();
          }
          this.metadata.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData#metadata} for the field documentation.
         */
        public Builder putAllMetadata(Map<String, String> map) {
          if (this.metadata == null) {
            this.metadata = new HashMap<>();
          }
          this.metadata.putAll(map);
          return this;
        }

        /**
         * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * A <a href="https://stripe.com/docs/tax/tax-categories">tax code</a> ID. The Shipping tax code is {@code txcd_92010001}.
         */
        public Builder setTaxCode(String taxCode) {
          this.taxCode = taxCode;
          return this;
        }

        /**
         * The type of calculation to use on the shipping rate. Can only be {@code fixed_amount} for now.
         */
        public Builder setType(Type type) {
          this.type = type;
          return this;
        }
      }
      @Getter
      public static class DeliveryEstimate {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
         */
        @SerializedName("maximum")
        Maximum maximum;

        /**
         * The lower bound of the estimated range. If empty, represents no lower bound.
         */
        @SerializedName("minimum")
        Minimum minimum;

        private DeliveryEstimate(
            Map<String, Object> extraParams,
            Maximum maximum,
            Minimum minimum) {
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Maximum maximum;

          private Minimum minimum;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public DeliveryEstimate build() {
            return new DeliveryEstimate(this.extraParams, this.maximum, this.minimum);
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
           */
          public Builder setMaximum(Maximum maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The lower bound of the estimated range. If empty, represents no lower bound.
           */
          public Builder setMinimum(Minimum minimum) {
            this.minimum = minimum;
            return this;
          }
        }
        @Getter
        public static class Maximum {
          /**
           * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
           */
          @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
          Map<String, Object> extraParams;

          /**
           * A unit of time.
           */
          @SerializedName("unit")
          Unit unit;

          /**
           * Must be greater than 0.
           */
          @SerializedName("value")
          Long value;

          private Maximum(Map<String, Object> extraParams, Unit unit, Long value) {
            this.extraParams = extraParams;
            this.unit = unit;
            this.value = value;
          }
          public static Builder builder() {
            return new Builder();
          }
          public static class Builder {
            private Map<String, Object> extraParams;

            private Unit unit;

            private Long value;

            /**
             * Finalize and obtain parameter instance from this builder.
             */
            public Maximum build() {
              return new Maximum(this.extraParams, this.unit, this.value);
            }

            /**
             * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate.Maximum#extraParams} for the field documentation.
             */
            public Builder putExtraParam(String key, Object value) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.put(key, value);
              return this;
            }

            /**
             * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate.Maximum#extraParams} for the field documentation.
             */
            public Builder putAllExtraParam(Map<String, Object> map) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.putAll(map);
              return this;
            }

            /**
             * A unit of time.
             */
            public Builder setUnit(Unit unit) {
              this.unit = unit;
              return this;
            }

            /**
             * Must be greater than 0.
             */
            public Builder setValue(Long value) {
              this.value = value;
              return this;
            }
          }
          public enum Unit implements ApiRequestParams.EnumParam {
            @SerializedName("business_day")
            BUSINESS_DAY("business_day"),

            @SerializedName("day")
            DAY("day"),

            @SerializedName("hour")
            HOUR("hour"),

            @SerializedName("month")
            MONTH("month"),

            @SerializedName("week")
            WEEK("week");
            @Getter(onMethod_ = {@Override})
            private final String value;
            Unit(String value) {
              this.value = value;
            }
          }
        }
        @Getter
        public static class Minimum {
          /**
           * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
           */
          @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
          Map<String, Object> extraParams;

          /**
           * A unit of time.
           */
          @SerializedName("unit")
          Unit unit;

          /**
           * Must be greater than 0.
           */
          @SerializedName("value")
          Long value;

          private Minimum(Map<String, Object> extraParams, Unit unit, Long value) {
            this.extraParams = extraParams;
            this.unit = unit;
            this.value = value;
          }
          public static Builder builder() {
            return new Builder();
          }
          public static class Builder {
            private Map<String, Object> extraParams;

            private Unit unit;

            private Long value;

            /**
             * Finalize and obtain parameter instance from this builder.
             */
            public Minimum build() {
              return new Minimum(this.extraParams, this.unit, this.value);
            }

            /**
             * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate.Minimum#extraParams} for the field documentation.
             */
            public Builder putExtraParam(String key, Object value) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.put(key, value);
              return this;
            }

            /**
             * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.DeliveryEstimate.Minimum#extraParams} for the field documentation.
             */
            public Builder putAllExtraParam(Map<String, Object> map) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.putAll(map);
              return this;
            }

            /**
             * A unit of time.
             */
            public Builder setUnit(Unit unit) {
              this.unit = unit;
              return this;
            }

            /**
             * Must be greater than 0.
             */
            public Builder setValue(Long value) {
              this.value = value;
              return this;
            }
          }
          public enum Unit implements ApiRequestParams.EnumParam {
            @SerializedName("business_day")
            BUSINESS_DAY("business_day"),

            @SerializedName("day")
            DAY("day"),

            @SerializedName("hour")
            HOUR("hour"),

            @SerializedName("month")
            MONTH("month"),

            @SerializedName("week")
            WEEK("week");
            @Getter(onMethod_ = {@Override})
            private final String value;
            Unit(String value) {
              this.value = value;
            }
          }
        }
      }
      @Getter
      public static class FixedAmount {
        /**
         * A non-negative integer in cents representing how much to charge.
         */
        @SerializedName("amount")
        Long amount;

        /**
         * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>.
         */
        @SerializedName("currency")
        String currency;

        /**
         * Shipping rates defined in each available currency option. Each key must be a three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a> and a <a href="https://stripe.com/docs/currencies">supported currency</a>.
         */
        @SerializedName("currency_options")
        CurrencyOptions currencyOptions;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        private FixedAmount(
            Long amount,
            String currency,
            CurrencyOptions currencyOptions,
            Map<String, Object> extraParams) {
          this.amount = amount;
          this.currency = currency;
          this.currencyOptions = currencyOptions;
          this.extraParams = extraParams;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Long amount;

          private String currency;

          private CurrencyOptions currencyOptions;

          private Map<String, Object> extraParams;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public FixedAmount build() {
            return new FixedAmount(
              this.amount,
              this.currency,
              this.currencyOptions,
              this.extraParams
            );
          }

          /**
           * A non-negative integer in cents representing how much to charge.
           */
          public Builder setAmount(Long amount) {
            this.amount = amount;
            return this;
          }

          /**
           * Three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a>, in lowercase. Must be a <a href="https://stripe.com/docs/currencies">supported currency</a>.
           */
          public Builder setCurrency(String currency) {
            this.currency = currency;
            return this;
          }

          /**
           * Shipping rates defined in each available currency option. Each key must be a three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a> and a <a href="https://stripe.com/docs/currencies">supported currency</a>.
           */
          public Builder setCurrencyOptions(CurrencyOptions currencyOptions) {
            this.currencyOptions = currencyOptions;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }
        }
        @Getter
        public static class CurrencyOptions {
          /**
           * Shipping rate defined in AED.
           */
          @SerializedName("aed")
          Aed aed;

          /**
           * Shipping rate defined in AFN.
           */
          @SerializedName("afn")
          Afn afn;

          /**
           * Shipping rate defined in ALL.
           */
          @SerializedName("all")
          All all;

          /**
           * Shipping rate defined in AMD.
           */
          @SerializedName("amd")
          Amd amd;

          /**
           * Shipping rate defined in ANG.
           */
          @SerializedName("ang")
          Ang ang;

          /**
           * Shipping rate defined in AOA.
           */
          @SerializedName("aoa")
          Aoa aoa;

          /**
           * Shipping rate defined in ARS.
           */
          @SerializedName("ars")
          Ars ars;

          /**
           * Shipping rate defined in AUD.
           */
          @SerializedName("aud")
          Aud aud;

          /**
           * Shipping rate defined in AWG.
           */
          @SerializedName("awg")
          Awg awg;

          /**
           * Shipping rate defined in AZN.
           */
          @SerializedName("azn")
          Azn azn;

          /**
           * Shipping rate defined in BAM.
           */
          @SerializedName("bam")
          Bam bam;

          /**
           * Shipping rate defined in BBD.
           */
          @SerializedName("bbd")
          Bbd bbd;

          /**
           * Shipping rate defined in BDT.
           */
          @SerializedName("bdt")
          Bdt bdt;

          /**
           * Shipping rate defined in BGN.
           */
          @SerializedName("bgn")
          Bgn bgn;

          /**
           * Shipping rate defined in BHD.
           */
          @SerializedName("bhd")
          Bhd bhd;

          /**
           * Shipping rate defined in BIF.
           */
          @SerializedName("bif")
          Bif bif;

          /**
           * Shipping rate defined in BMD.
           */
          @SerializedName("bmd")
          Bmd bmd;

          /**
           * Shipping rate defined in BND.
           */
          @SerializedName("bnd")
          Bnd bnd;

          /**
           * Shipping rate defined in BOB.
           */
          @SerializedName("bob")
          Bob bob;

          /**
           * Shipping rate defined in BRL.
           */
          @SerializedName("brl")
          Brl brl;

          /**
           * Shipping rate defined in BSD.
           */
          @SerializedName("bsd")
          Bsd bsd;

          /**
           * Shipping rate defined in BTN.
           */
          @SerializedName("btn")
          Btn btn;

          /**
           * Shipping rate defined in BWP.
           */
          @SerializedName("bwp")
          Bwp bwp;

          /**
           * Shipping rate defined in BYN.
           */
          @SerializedName("byn")
          Byn byn;

          /**
           * Shipping rate defined in BZD.
           */
          @SerializedName("bzd")
          Bzd bzd;

          /**
           * Shipping rate defined in CAD.
           */
          @SerializedName("cad")
          Cad cad;

          /**
           * Shipping rate defined in CDF.
           */
          @SerializedName("cdf")
          Cdf cdf;

          /**
           * Shipping rate defined in CHF.
           */
          @SerializedName("chf")
          Chf chf;

          /**
           * Shipping rate defined in CLP.
           */
          @SerializedName("clp")
          Clp clp;

          /**
           * Shipping rate defined in CNY.
           */
          @SerializedName("cny")
          Cny cny;

          /**
           * Shipping rate defined in COP.
           */
          @SerializedName("cop")
          Cop cop;

          /**
           * Shipping rate defined in CRC.
           */
          @SerializedName("crc")
          Crc crc;

          /**
           * Shipping rate defined in CVE.
           */
          @SerializedName("cve")
          Cve cve;

          /**
           * Shipping rate defined in CZK.
           */
          @SerializedName("czk")
          Czk czk;

          /**
           * Shipping rate defined in DJF.
           */
          @SerializedName("djf")
          Djf djf;

          /**
           * Shipping rate defined in DKK.
           */
          @SerializedName("dkk")
          Dkk dkk;

          /**
           * Shipping rate defined in DOP.
           */
          @SerializedName("dop")
          Dop dop;

          /**
           * Shipping rate defined in DZD.
           */
          @SerializedName("dzd")
          Dzd dzd;

          /**
           * Shipping rate defined in EGP.
           */
          @SerializedName("egp")
          Egp egp;

          /**
           * Shipping rate defined in ETB.
           */
          @SerializedName("etb")
          Etb etb;

          /**
           * Shipping rate defined in EUR.
           */
          @SerializedName("eur")
          Eur eur;

          /**
           * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
           */
          @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
          Map<String, Object> extraParams;

          /**
           * Shipping rate defined in FJD.
           */
          @SerializedName("fjd")
          Fjd fjd;

          /**
           * Shipping rate defined in FKP.
           */
          @SerializedName("fkp")
          Fkp fkp;

          /**
           * Shipping rate defined in GBP.
           */
          @SerializedName("gbp")
          Gbp gbp;

          /**
           * Shipping rate defined in GEL.
           */
          @SerializedName("gel")
          Gel gel;

          /**
           * Shipping rate defined in GHS.
           */
          @SerializedName("ghs")
          Ghs ghs;

          /**
           * Shipping rate defined in GIP.
           */
          @SerializedName("gip")
          Gip gip;

          /**
           * Shipping rate defined in GMD.
           */
          @SerializedName("gmd")
          Gmd gmd;

          /**
           * Shipping rate defined in GNF.
           */
          @SerializedName("gnf")
          Gnf gnf;

          /**
           * Shipping rate defined in GTQ.
           */
          @SerializedName("gtq")
          Gtq gtq;

          /**
           * Shipping rate defined in GYD.
           */
          @SerializedName("gyd")
          Gyd gyd;

          /**
           * Shipping rate defined in HKD.
           */
          @SerializedName("hkd")
          Hkd hkd;

          /**
           * Shipping rate defined in HNL.
           */
          @SerializedName("hnl")
          Hnl hnl;

          /**
           * Shipping rate defined in HRK.
           */
          @SerializedName("hrk")
          Hrk hrk;

          /**
           * Shipping rate defined in HTG.
           */
          @SerializedName("htg")
          Htg htg;

          /**
           * Shipping rate defined in HUF.
           */
          @SerializedName("huf")
          Huf huf;

          /**
           * Shipping rate defined in IDR.
           */
          @SerializedName("idr")
          Idr idr;

          /**
           * Shipping rate defined in ILS.
           */
          @SerializedName("ils")
          Ils ils;

          /**
           * Shipping rate defined in INR.
           */
          @SerializedName("inr")
          Inr inr;

          /**
           * Shipping rate defined in ISK.
           */
          @SerializedName("isk")
          Isk isk;

          /**
           * Shipping rate defined in JMD.
           */
          @SerializedName("jmd")
          Jmd jmd;

          /**
           * Shipping rate defined in JOD.
           */
          @SerializedName("jod")
          Jod jod;

          /**
           * Shipping rate defined in JPY.
           */
          @SerializedName("jpy")
          Jpy jpy;

          /**
           * Shipping rate defined in KES.
           */
          @SerializedName("kes")
          Kes kes;

          /**
           * Shipping rate defined in KGS.
           */
          @SerializedName("kgs")
          Kgs kgs;

          /**
           * Shipping rate defined in KHR.
           */
          @SerializedName("khr")
          Khr khr;

          /**
           * Shipping rate defined in KMF.
           */
          @SerializedName("kmf")
          Kmf kmf;

          /**
           * Shipping rate defined in KRW.
           */
          @SerializedName("krw")
          Krw krw;

          /**
           * Shipping rate defined in KWD.
           */
          @SerializedName("kwd")
          Kwd kwd;

          /**
           * Shipping rate defined in KYD.
           */
          @SerializedName("kyd")
          Kyd kyd;

          /**
           * Shipping rate defined in KZT.
           */
          @SerializedName("kzt")
          Kzt kzt;

          /**
           * Shipping rate defined in LAK.
           */
          @SerializedName("lak")
          Lak lak;

          /**
           * Shipping rate defined in LBP.
           */
          @SerializedName("lbp")
          Lbp lbp;

          /**
           * Shipping rate defined in LKR.
           */
          @SerializedName("lkr")
          Lkr lkr;

          /**
           * Shipping rate defined in LRD.
           */
          @SerializedName("lrd")
          Lrd lrd;

          /**
           * Shipping rate defined in LSL.
           */
          @SerializedName("lsl")
          Lsl lsl;

          /**
           * Shipping rate defined in MAD.
           */
          @SerializedName("mad")
          Mad mad;

          /**
           * Shipping rate defined in MDL.
           */
          @SerializedName("mdl")
          Mdl mdl;

          /**
           * Shipping rate defined in MGA.
           */
          @SerializedName("mga")
          Mga mga;

          /**
           * Shipping rate defined in MKD.
           */
          @SerializedName("mkd")
          Mkd mkd;

          /**
           * Shipping rate defined in MMK.
           */
          @SerializedName("mmk")
          Mmk mmk;

          /**
           * Shipping rate defined in MNT.
           */
          @SerializedName("mnt")
          Mnt mnt;

          /**
           * Shipping rate defined in MOP.
           */
          @SerializedName("mop")
          Mop mop;

          /**
           * Shipping rate defined in MRO.
           */
          @SerializedName("mro")
          Mro mro;

          /**
           * Shipping rate defined in MUR.
           */
          @SerializedName("mur")
          Mur mur;

          /**
           * Shipping rate defined in MVR.
           */
          @SerializedName("mvr")
          Mvr mvr;

          /**
           * Shipping rate defined in MWK.
           */
          @SerializedName("mwk")
          Mwk mwk;

          /**
           * Shipping rate defined in MXN.
           */
          @SerializedName("mxn")
          Mxn mxn;

          /**
           * Shipping rate defined in MYR.
           */
          @SerializedName("myr")
          Myr myr;

          /**
           * Shipping rate defined in MZN.
           */
          @SerializedName("mzn")
          Mzn mzn;

          /**
           * Shipping rate defined in NAD.
           */
          @SerializedName("nad")
          Nad nad;

          /**
           * Shipping rate defined in NGN.
           */
          @SerializedName("ngn")
          Ngn ngn;

          /**
           * Shipping rate defined in NIO.
           */
          @SerializedName("nio")
          Nio nio;

          /**
           * Shipping rate defined in NOK.
           */
          @SerializedName("nok")
          Nok nok;

          /**
           * Shipping rate defined in NPR.
           */
          @SerializedName("npr")
          Npr npr;

          /**
           * Shipping rate defined in NZD.
           */
          @SerializedName("nzd")
          Nzd nzd;

          /**
           * Shipping rate defined in OMR.
           */
          @SerializedName("omr")
          Omr omr;

          /**
           * Shipping rate defined in PAB.
           */
          @SerializedName("pab")
          Pab pab;

          /**
           * Shipping rate defined in PEN.
           */
          @SerializedName("pen")
          Pen pen;

          /**
           * Shipping rate defined in PGK.
           */
          @SerializedName("pgk")
          Pgk pgk;

          /**
           * Shipping rate defined in PHP.
           */
          @SerializedName("php")
          Php php;

          /**
           * Shipping rate defined in PKR.
           */
          @SerializedName("pkr")
          Pkr pkr;

          /**
           * Shipping rate defined in PLN.
           */
          @SerializedName("pln")
          Pln pln;

          /**
           * Shipping rate defined in PYG.
           */
          @SerializedName("pyg")
          Pyg pyg;

          /**
           * Shipping rate defined in QAR.
           */
          @SerializedName("qar")
          Qar qar;

          /**
           * Shipping rate defined in RON.
           */
          @SerializedName("ron")
          Ron ron;

          /**
           * Shipping rate defined in RSD.
           */
          @SerializedName("rsd")
          Rsd rsd;

          /**
           * Shipping rate defined in RUB.
           */
          @SerializedName("rub")
          Rub rub;

          /**
           * Shipping rate defined in RWF.
           */
          @SerializedName("rwf")
          Rwf rwf;

          /**
           * Shipping rate defined in SAR.
           */
          @SerializedName("sar")
          Sar sar;

          /**
           * Shipping rate defined in SBD.
           */
          @SerializedName("sbd")
          Sbd sbd;

          /**
           * Shipping rate defined in SCR.
           */
          @SerializedName("scr")
          Scr scr;

          /**
           * Shipping rate defined in SEK.
           */
          @SerializedName("sek")
          Sek sek;

          /**
           * Shipping rate defined in SGD.
           */
          @SerializedName("sgd")
          Sgd sgd;

          /**
           * Shipping rate defined in SHP.
           */
          @SerializedName("shp")
          Shp shp;

          /**
           * Shipping rate defined in SLL.
           */
          @SerializedName("sll")
          Sll sll;

          /**
           * Shipping rate defined in SOS.
           */
          @SerializedName("sos")
          Sos sos;

          /**
           * Shipping rate defined in SRD.
           */
          @SerializedName("srd")
          Srd srd;

          /**
           * Shipping rate defined in STD.
           */
          @SerializedName("std")
          Std std;

          /**
           * Shipping rate defined in SZL.
           */
          @SerializedName("szl")
          Szl szl;

          /**
           * Shipping rate defined in THB.
           */
          @SerializedName("thb")
          Thb thb;

          /**
           * Shipping rate defined in TJS.
           */
          @SerializedName("tjs")
          Tjs tjs;

          /**
           * Shipping rate defined in TND.
           */
          @SerializedName("tnd")
          Tnd tnd;

          /**
           * Shipping rate defined in TOP.
           */
          @SerializedName("top")
          Top top;

          /**
           * Shipping rate defined in TRY.
           */
          @SerializedName("try")
          Try try;

          /**
           * Shipping rate defined in TTD.
           */
          @SerializedName("ttd")
          Ttd ttd;

          /**
           * Shipping rate defined in TWD.
           */
          @SerializedName("twd")
          Twd twd;

          /**
           * Shipping rate defined in TZS.
           */
          @SerializedName("tzs")
          Tzs tzs;

          /**
           * Shipping rate defined in UAH.
           */
          @SerializedName("uah")
          Uah uah;

          /**
           * Shipping rate defined in UGX.
           */
          @SerializedName("ugx")
          Ugx ugx;

          /**
           * Shipping rate defined in USD.
           */
          @SerializedName("usd")
          Usd usd;

          /**
           * Shipping rate defined in USDC.
           */
          @SerializedName("usdc")
          Usdc usdc;

          /**
           * Shipping rate defined in UYU.
           */
          @SerializedName("uyu")
          Uyu uyu;

          /**
           * Shipping rate defined in UZS.
           */
          @SerializedName("uzs")
          Uzs uzs;

          /**
           * Shipping rate defined in VND.
           */
          @SerializedName("vnd")
          Vnd vnd;

          /**
           * Shipping rate defined in VUV.
           */
          @SerializedName("vuv")
          Vuv vuv;

          /**
           * Shipping rate defined in WST.
           */
          @SerializedName("wst")
          Wst wst;

          /**
           * Shipping rate defined in XAF.
           */
          @SerializedName("xaf")
          Xaf xaf;

          /**
           * Shipping rate defined in XCD.
           */
          @SerializedName("xcd")
          Xcd xcd;

          /**
           * Shipping rate defined in XOF.
           */
          @SerializedName("xof")
          Xof xof;

          /**
           * Shipping rate defined in XPF.
           */
          @SerializedName("xpf")
          Xpf xpf;

          /**
           * Shipping rate defined in YER.
           */
          @SerializedName("yer")
          Yer yer;

          /**
           * Shipping rate defined in ZAR.
           */
          @SerializedName("zar")
          Zar zar;

          /**
           * Shipping rate defined in ZMW.
           */
          @SerializedName("zmw")
          Zmw zmw;

          private CurrencyOptions(
              Aed aed,
              Afn afn,
              All all,
              Amd amd,
              Ang ang,
              Aoa aoa,
              Ars ars,
              Aud aud,
              Awg awg,
              Azn azn,
              Bam bam,
              Bbd bbd,
              Bdt bdt,
              Bgn bgn,
              Bhd bhd,
              Bif bif,
              Bmd bmd,
              Bnd bnd,
              Bob bob,
              Brl brl,
              Bsd bsd,
              Btn btn,
              Bwp bwp,
              Byn byn,
              Bzd bzd,
              Cad cad,
              Cdf cdf,
              Chf chf,
              Clp clp,
              Cny cny,
              Cop cop,
              Crc crc,
              Cve cve,
              Czk czk,
              Djf djf,
              Dkk dkk,
              Dop dop,
              Dzd dzd,
              Egp egp,
              Etb etb,
              Eur eur,
              Map<String, Object> extraParams,
              Fjd fjd,
              Fkp fkp,
              Gbp gbp,
              Gel gel,
              Ghs ghs,
              Gip gip,
              Gmd gmd,
              Gnf gnf,
              Gtq gtq,
              Gyd gyd,
              Hkd hkd,
              Hnl hnl,
              Hrk hrk,
              Htg htg,
              Huf huf,
              Idr idr,
              Ils ils,
              Inr inr,
              Isk isk,
              Jmd jmd,
              Jod jod,
              Jpy jpy,
              Kes kes,
              Kgs kgs,
              Khr khr,
              Kmf kmf,
              Krw krw,
              Kwd kwd,
              Kyd kyd,
              Kzt kzt,
              Lak lak,
              Lbp lbp,
              Lkr lkr,
              Lrd lrd,
              Lsl lsl,
              Mad mad,
              Mdl mdl,
              Mga mga,
              Mkd mkd,
              Mmk mmk,
              Mnt mnt,
              Mop mop,
              Mro mro,
              Mur mur,
              Mvr mvr,
              Mwk mwk,
              Mxn mxn,
              Myr myr,
              Mzn mzn,
              Nad nad,
              Ngn ngn,
              Nio nio,
              Nok nok,
              Npr npr,
              Nzd nzd,
              Omr omr,
              Pab pab,
              Pen pen,
              Pgk pgk,
              Php php,
              Pkr pkr,
              Pln pln,
              Pyg pyg,
              Qar qar,
              Ron ron,
              Rsd rsd,
              Rub rub,
              Rwf rwf,
              Sar sar,
              Sbd sbd,
              Scr scr,
              Sek sek,
              Sgd sgd,
              Shp shp,
              Sll sll,
              Sos sos,
              Srd srd,
              Std std,
              Szl szl,
              Thb thb,
              Tjs tjs,
              Tnd tnd,
              Top top,
              Try try,
              Ttd ttd,
              Twd twd,
              Tzs tzs,
              Uah uah,
              Ugx ugx,
              Usd usd,
              Usdc usdc,
              Uyu uyu,
              Uzs uzs,
              Vnd vnd,
              Vuv vuv,
              Wst wst,
              Xaf xaf,
              Xcd xcd,
              Xof xof,
              Xpf xpf,
              Yer yer,
              Zar zar,
              Zmw zmw) {
            this.aed = aed;
            this.afn = afn;
            this.all = all;
            this.amd = amd;
            this.ang = ang;
            this.aoa = aoa;
            this.ars = ars;
            this.aud = aud;
            this.awg = awg;
            this.azn = azn;
            this.bam = bam;
            this.bbd = bbd;
            this.bdt = bdt;
            this.bgn = bgn;
            this.bhd = bhd;
            this.bif = bif;
            this.bmd = bmd;
            this.bnd = bnd;
            this.bob = bob;
            this.brl = brl;
            this.bsd = bsd;
            this.btn = btn;
            this.bwp = bwp;
            this.byn = byn;
            this.bzd = bzd;
            this.cad = cad;
            this.cdf = cdf;
            this.chf = chf;
            this.clp = clp;
            this.cny = cny;
            this.cop = cop;
            this.crc = crc;
            this.cve = cve;
            this.czk = czk;
            this.djf = djf;
            this.dkk = dkk;
            this.dop = dop;
            this.dzd = dzd;
            this.egp = egp;
            this.etb = etb;
            this.eur = eur;
            this.extraParams = extraParams;
            this.fjd = fjd;
            this.fkp = fkp;
            this.gbp = gbp;
            this.gel = gel;
            this.ghs = ghs;
            this.gip = gip;
            this.gmd = gmd;
            this.gnf = gnf;
            this.gtq = gtq;
            this.gyd = gyd;
            this.hkd = hkd;
            this.hnl = hnl;
            this.hrk = hrk;
            this.htg = htg;
            this.huf = huf;
            this.idr = idr;
            this.ils = ils;
            this.inr = inr;
            this.isk = isk;
            this.jmd = jmd;
            this.jod = jod;
            this.jpy = jpy;
            this.kes = kes;
            this.kgs = kgs;
            this.khr = khr;
            this.kmf = kmf;
            this.krw = krw;
            this.kwd = kwd;
            this.kyd = kyd;
            this.kzt = kzt;
            this.lak = lak;
            this.lbp = lbp;
            this.lkr = lkr;
            this.lrd = lrd;
            this.lsl = lsl;
            this.mad = mad;
            this.mdl = mdl;
            this.mga = mga;
            this.mkd = mkd;
            this.mmk = mmk;
            this.mnt = mnt;
            this.mop = mop;
            this.mro = mro;
            this.mur = mur;
            this.mvr = mvr;
            this.mwk = mwk;
            this.mxn = mxn;
            this.myr = myr;
            this.mzn = mzn;
            this.nad = nad;
            this.ngn = ngn;
            this.nio = nio;
            this.nok = nok;
            this.npr = npr;
            this.nzd = nzd;
            this.omr = omr;
            this.pab = pab;
            this.pen = pen;
            this.pgk = pgk;
            this.php = php;
            this.pkr = pkr;
            this.pln = pln;
            this.pyg = pyg;
            this.qar = qar;
            this.ron = ron;
            this.rsd = rsd;
            this.rub = rub;
            this.rwf = rwf;
            this.sar = sar;
            this.sbd = sbd;
            this.scr = scr;
            this.sek = sek;
            this.sgd = sgd;
            this.shp = shp;
            this.sll = sll;
            this.sos = sos;
            this.srd = srd;
            this.std = std;
            this.szl = szl;
            this.thb = thb;
            this.tjs = tjs;
            this.tnd = tnd;
            this.top = top;
            this.try = try;
            this.ttd = ttd;
            this.twd = twd;
            this.tzs = tzs;
            this.uah = uah;
            this.ugx = ugx;
            this.usd = usd;
            this.usdc = usdc;
            this.uyu = uyu;
            this.uzs = uzs;
            this.vnd = vnd;
            this.vuv = vuv;
            this.wst = wst;
            this.xaf = xaf;
            this.xcd = xcd;
            this.xof = xof;
            this.xpf = xpf;
            this.yer = yer;
            this.zar = zar;
            this.zmw = zmw;
          }
          public static Builder builder() {
            return new Builder();
          }
          public static class Builder {
            private Aed aed;

            private Afn afn;

            private All all;

            private Amd amd;

            private Ang ang;

            private Aoa aoa;

            private Ars ars;

            private Aud aud;

            private Awg awg;

            private Azn azn;

            private Bam bam;

            private Bbd bbd;

            private Bdt bdt;

            private Bgn bgn;

            private Bhd bhd;

            private Bif bif;

            private Bmd bmd;

            private Bnd bnd;

            private Bob bob;

            private Brl brl;

            private Bsd bsd;

            private Btn btn;

            private Bwp bwp;

            private Byn byn;

            private Bzd bzd;

            private Cad cad;

            private Cdf cdf;

            private Chf chf;

            private Clp clp;

            private Cny cny;

            private Cop cop;

            private Crc crc;

            private Cve cve;

            private Czk czk;

            private Djf djf;

            private Dkk dkk;

            private Dop dop;

            private Dzd dzd;

            private Egp egp;

            private Etb etb;

            private Eur eur;

            private Map<String, Object> extraParams;

            private Fjd fjd;

            private Fkp fkp;

            private Gbp gbp;

            private Gel gel;

            private Ghs ghs;

            private Gip gip;

            private Gmd gmd;

            private Gnf gnf;

            private Gtq gtq;

            private Gyd gyd;

            private Hkd hkd;

            private Hnl hnl;

            private Hrk hrk;

            private Htg htg;

            private Huf huf;

            private Idr idr;

            private Ils ils;

            private Inr inr;

            private Isk isk;

            private Jmd jmd;

            private Jod jod;

            private Jpy jpy;

            private Kes kes;

            private Kgs kgs;

            private Khr khr;

            private Kmf kmf;

            private Krw krw;

            private Kwd kwd;

            private Kyd kyd;

            private Kzt kzt;

            private Lak lak;

            private Lbp lbp;

            private Lkr lkr;

            private Lrd lrd;

            private Lsl lsl;

            private Mad mad;

            private Mdl mdl;

            private Mga mga;

            private Mkd mkd;

            private Mmk mmk;

            private Mnt mnt;

            private Mop mop;

            private Mro mro;

            private Mur mur;

            private Mvr mvr;

            private Mwk mwk;

            private Mxn mxn;

            private Myr myr;

            private Mzn mzn;

            private Nad nad;

            private Ngn ngn;

            private Nio nio;

            private Nok nok;

            private Npr npr;

            private Nzd nzd;

            private Omr omr;

            private Pab pab;

            private Pen pen;

            private Pgk pgk;

            private Php php;

            private Pkr pkr;

            private Pln pln;

            private Pyg pyg;

            private Qar qar;

            private Ron ron;

            private Rsd rsd;

            private Rub rub;

            private Rwf rwf;

            private Sar sar;

            private Sbd sbd;

            private Scr scr;

            private Sek sek;

            private Sgd sgd;

            private Shp shp;

            private Sll sll;

            private Sos sos;

            private Srd srd;

            private Std std;

            private Szl szl;

            private Thb thb;

            private Tjs tjs;

            private Tnd tnd;

            private Top top;

            private Try try;

            private Ttd ttd;

            private Twd twd;

            private Tzs tzs;

            private Uah uah;

            private Ugx ugx;

            private Usd usd;

            private Usdc usdc;

            private Uyu uyu;

            private Uzs uzs;

            private Vnd vnd;

            private Vuv vuv;

            private Wst wst;

            private Xaf xaf;

            private Xcd xcd;

            private Xof xof;

            private Xpf xpf;

            private Yer yer;

            private Zar zar;

            private Zmw zmw;

            /**
             * Finalize and obtain parameter instance from this builder.
             */
            public CurrencyOptions build() {
              return new CurrencyOptions(
                this.aed,
                this.afn,
                this.all,
                this.amd,
                this.ang,
                this.aoa,
                this.ars,
                this.aud,
                this.awg,
                this.azn,
                this.bam,
                this.bbd,
                this.bdt,
                this.bgn,
                this.bhd,
                this.bif,
                this.bmd,
                this.bnd,
                this.bob,
                this.brl,
                this.bsd,
                this.btn,
                this.bwp,
                this.byn,
                this.bzd,
                this.cad,
                this.cdf,
                this.chf,
                this.clp,
                this.cny,
                this.cop,
                this.crc,
                this.cve,
                this.czk,
                this.djf,
                this.dkk,
                this.dop,
                this.dzd,
                this.egp,
                this.etb,
                this.eur,
                this.extraParams,
                this.fjd,
                this.fkp,
                this.gbp,
                this.gel,
                this.ghs,
                this.gip,
                this.gmd,
                this.gnf,
                this.gtq,
                this.gyd,
                this.hkd,
                this.hnl,
                this.hrk,
                this.htg,
                this.huf,
                this.idr,
                this.ils,
                this.inr,
                this.isk,
                this.jmd,
                this.jod,
                this.jpy,
                this.kes,
                this.kgs,
                this.khr,
                this.kmf,
                this.krw,
                this.kwd,
                this.kyd,
                this.kzt,
                this.lak,
                this.lbp,
                this.lkr,
                this.lrd,
                this.lsl,
                this.mad,
                this.mdl,
                this.mga,
                this.mkd,
                this.mmk,
                this.mnt,
                this.mop,
                this.mro,
                this.mur,
                this.mvr,
                this.mwk,
                this.mxn,
                this.myr,
                this.mzn,
                this.nad,
                this.ngn,
                this.nio,
                this.nok,
                this.npr,
                this.nzd,
                this.omr,
                this.pab,
                this.pen,
                this.pgk,
                this.php,
                this.pkr,
                this.pln,
                this.pyg,
                this.qar,
                this.ron,
                this.rsd,
                this.rub,
                this.rwf,
                this.sar,
                this.sbd,
                this.scr,
                this.sek,
                this.sgd,
                this.shp,
                this.sll,
                this.sos,
                this.srd,
                this.std,
                this.szl,
                this.thb,
                this.tjs,
                this.tnd,
                this.top,
                this.try,
                this.ttd,
                this.twd,
                this.tzs,
                this.uah,
                this.ugx,
                this.usd,
                this.usdc,
                this.uyu,
                this.uzs,
                this.vnd,
                this.vuv,
                this.wst,
                this.xaf,
                this.xcd,
                this.xof,
                this.xpf,
                this.yer,
                this.zar,
                this.zmw
              );
            }

            /**
             * Shipping rate defined in AED.
             */
            public Builder setAed(Aed aed) {
              this.aed = aed;
              return this;
            }

            /**
             * Shipping rate defined in AFN.
             */
            public Builder setAfn(Afn afn) {
              this.afn = afn;
              return this;
            }

            /**
             * Shipping rate defined in ALL.
             */
            public Builder setAll(All all) {
              this.all = all;
              return this;
            }

            /**
             * Shipping rate defined in AMD.
             */
            public Builder setAmd(Amd amd) {
              this.amd = amd;
              return this;
            }

            /**
             * Shipping rate defined in ANG.
             */
            public Builder setAng(Ang ang) {
              this.ang = ang;
              return this;
            }

            /**
             * Shipping rate defined in AOA.
             */
            public Builder setAoa(Aoa aoa) {
              this.aoa = aoa;
              return this;
            }

            /**
             * Shipping rate defined in ARS.
             */
            public Builder setArs(Ars ars) {
              this.ars = ars;
              return this;
            }

            /**
             * Shipping rate defined in AUD.
             */
            public Builder setAud(Aud aud) {
              this.aud = aud;
              return this;
            }

            /**
             * Shipping rate defined in AWG.
             */
            public Builder setAwg(Awg awg) {
              this.awg = awg;
              return this;
            }

            /**
             * Shipping rate defined in AZN.
             */
            public Builder setAzn(Azn azn) {
              this.azn = azn;
              return this;
            }

            /**
             * Shipping rate defined in BAM.
             */
            public Builder setBam(Bam bam) {
              this.bam = bam;
              return this;
            }

            /**
             * Shipping rate defined in BBD.
             */
            public Builder setBbd(Bbd bbd) {
              this.bbd = bbd;
              return this;
            }

            /**
             * Shipping rate defined in BDT.
             */
            public Builder setBdt(Bdt bdt) {
              this.bdt = bdt;
              return this;
            }

            /**
             * Shipping rate defined in BGN.
             */
            public Builder setBgn(Bgn bgn) {
              this.bgn = bgn;
              return this;
            }

            /**
             * Shipping rate defined in BHD.
             */
            public Builder setBhd(Bhd bhd) {
              this.bhd = bhd;
              return this;
            }

            /**
             * Shipping rate defined in BIF.
             */
            public Builder setBif(Bif bif) {
              this.bif = bif;
              return this;
            }

            /**
             * Shipping rate defined in BMD.
             */
            public Builder setBmd(Bmd bmd) {
              this.bmd = bmd;
              return this;
            }

            /**
             * Shipping rate defined in BND.
             */
            public Builder setBnd(Bnd bnd) {
              this.bnd = bnd;
              return this;
            }

            /**
             * Shipping rate defined in BOB.
             */
            public Builder setBob(Bob bob) {
              this.bob = bob;
              return this;
            }

            /**
             * Shipping rate defined in BRL.
             */
            public Builder setBrl(Brl brl) {
              this.brl = brl;
              return this;
            }

            /**
             * Shipping rate defined in BSD.
             */
            public Builder setBsd(Bsd bsd) {
              this.bsd = bsd;
              return this;
            }

            /**
             * Shipping rate defined in BTN.
             */
            public Builder setBtn(Btn btn) {
              this.btn = btn;
              return this;
            }

            /**
             * Shipping rate defined in BWP.
             */
            public Builder setBwp(Bwp bwp) {
              this.bwp = bwp;
              return this;
            }

            /**
             * Shipping rate defined in BYN.
             */
            public Builder setByn(Byn byn) {
              this.byn = byn;
              return this;
            }

            /**
             * Shipping rate defined in BZD.
             */
            public Builder setBzd(Bzd bzd) {
              this.bzd = bzd;
              return this;
            }

            /**
             * Shipping rate defined in CAD.
             */
            public Builder setCad(Cad cad) {
              this.cad = cad;
              return this;
            }

            /**
             * Shipping rate defined in CDF.
             */
            public Builder setCdf(Cdf cdf) {
              this.cdf = cdf;
              return this;
            }

            /**
             * Shipping rate defined in CHF.
             */
            public Builder setChf(Chf chf) {
              this.chf = chf;
              return this;
            }

            /**
             * Shipping rate defined in CLP.
             */
            public Builder setClp(Clp clp) {
              this.clp = clp;
              return this;
            }

            /**
             * Shipping rate defined in CNY.
             */
            public Builder setCny(Cny cny) {
              this.cny = cny;
              return this;
            }

            /**
             * Shipping rate defined in COP.
             */
            public Builder setCop(Cop cop) {
              this.cop = cop;
              return this;
            }

            /**
             * Shipping rate defined in CRC.
             */
            public Builder setCrc(Crc crc) {
              this.crc = crc;
              return this;
            }

            /**
             * Shipping rate defined in CVE.
             */
            public Builder setCve(Cve cve) {
              this.cve = cve;
              return this;
            }

            /**
             * Shipping rate defined in CZK.
             */
            public Builder setCzk(Czk czk) {
              this.czk = czk;
              return this;
            }

            /**
             * Shipping rate defined in DJF.
             */
            public Builder setDjf(Djf djf) {
              this.djf = djf;
              return this;
            }

            /**
             * Shipping rate defined in DKK.
             */
            public Builder setDkk(Dkk dkk) {
              this.dkk = dkk;
              return this;
            }

            /**
             * Shipping rate defined in DOP.
             */
            public Builder setDop(Dop dop) {
              this.dop = dop;
              return this;
            }

            /**
             * Shipping rate defined in DZD.
             */
            public Builder setDzd(Dzd dzd) {
              this.dzd = dzd;
              return this;
            }

            /**
             * Shipping rate defined in EGP.
             */
            public Builder setEgp(Egp egp) {
              this.egp = egp;
              return this;
            }

            /**
             * Shipping rate defined in ETB.
             */
            public Builder setEtb(Etb etb) {
              this.etb = etb;
              return this;
            }

            /**
             * Shipping rate defined in EUR.
             */
            public Builder setEur(Eur eur) {
              this.eur = eur;
              return this;
            }

            /**
             * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions#extraParams} for the field documentation.
             */
            public Builder putExtraParam(String key, Object value) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.put(key, value);
              return this;
            }

            /**
             * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions#extraParams} for the field documentation.
             */
            public Builder putAllExtraParam(Map<String, Object> map) {
              if (this.extraParams == null) {
                this.extraParams = new HashMap<>();
              }
              this.extraParams.putAll(map);
              return this;
            }

            /**
             * Shipping rate defined in FJD.
             */
            public Builder setFjd(Fjd fjd) {
              this.fjd = fjd;
              return this;
            }

            /**
             * Shipping rate defined in FKP.
             */
            public Builder setFkp(Fkp fkp) {
              this.fkp = fkp;
              return this;
            }

            /**
             * Shipping rate defined in GBP.
             */
            public Builder setGbp(Gbp gbp) {
              this.gbp = gbp;
              return this;
            }

            /**
             * Shipping rate defined in GEL.
             */
            public Builder setGel(Gel gel) {
              this.gel = gel;
              return this;
            }

            /**
             * Shipping rate defined in GHS.
             */
            public Builder setGhs(Ghs ghs) {
              this.ghs = ghs;
              return this;
            }

            /**
             * Shipping rate defined in GIP.
             */
            public Builder setGip(Gip gip) {
              this.gip = gip;
              return this;
            }

            /**
             * Shipping rate defined in GMD.
             */
            public Builder setGmd(Gmd gmd) {
              this.gmd = gmd;
              return this;
            }

            /**
             * Shipping rate defined in GNF.
             */
            public Builder setGnf(Gnf gnf) {
              this.gnf = gnf;
              return this;
            }

            /**
             * Shipping rate defined in GTQ.
             */
            public Builder setGtq(Gtq gtq) {
              this.gtq = gtq;
              return this;
            }

            /**
             * Shipping rate defined in GYD.
             */
            public Builder setGyd(Gyd gyd) {
              this.gyd = gyd;
              return this;
            }

            /**
             * Shipping rate defined in HKD.
             */
            public Builder setHkd(Hkd hkd) {
              this.hkd = hkd;
              return this;
            }

            /**
             * Shipping rate defined in HNL.
             */
            public Builder setHnl(Hnl hnl) {
              this.hnl = hnl;
              return this;
            }

            /**
             * Shipping rate defined in HRK.
             */
            public Builder setHrk(Hrk hrk) {
              this.hrk = hrk;
              return this;
            }

            /**
             * Shipping rate defined in HTG.
             */
            public Builder setHtg(Htg htg) {
              this.htg = htg;
              return this;
            }

            /**
             * Shipping rate defined in HUF.
             */
            public Builder setHuf(Huf huf) {
              this.huf = huf;
              return this;
            }

            /**
             * Shipping rate defined in IDR.
             */
            public Builder setIdr(Idr idr) {
              this.idr = idr;
              return this;
            }

            /**
             * Shipping rate defined in ILS.
             */
            public Builder setIls(Ils ils) {
              this.ils = ils;
              return this;
            }

            /**
             * Shipping rate defined in INR.
             */
            public Builder setInr(Inr inr) {
              this.inr = inr;
              return this;
            }

            /**
             * Shipping rate defined in ISK.
             */
            public Builder setIsk(Isk isk) {
              this.isk = isk;
              return this;
            }

            /**
             * Shipping rate defined in JMD.
             */
            public Builder setJmd(Jmd jmd) {
              this.jmd = jmd;
              return this;
            }

            /**
             * Shipping rate defined in JOD.
             */
            public Builder setJod(Jod jod) {
              this.jod = jod;
              return this;
            }

            /**
             * Shipping rate defined in JPY.
             */
            public Builder setJpy(Jpy jpy) {
              this.jpy = jpy;
              return this;
            }

            /**
             * Shipping rate defined in KES.
             */
            public Builder setKes(Kes kes) {
              this.kes = kes;
              return this;
            }

            /**
             * Shipping rate defined in KGS.
             */
            public Builder setKgs(Kgs kgs) {
              this.kgs = kgs;
              return this;
            }

            /**
             * Shipping rate defined in KHR.
             */
            public Builder setKhr(Khr khr) {
              this.khr = khr;
              return this;
            }

            /**
             * Shipping rate defined in KMF.
             */
            public Builder setKmf(Kmf kmf) {
              this.kmf = kmf;
              return this;
            }

            /**
             * Shipping rate defined in KRW.
             */
            public Builder setKrw(Krw krw) {
              this.krw = krw;
              return this;
            }

            /**
             * Shipping rate defined in KWD.
             */
            public Builder setKwd(Kwd kwd) {
              this.kwd = kwd;
              return this;
            }

            /**
             * Shipping rate defined in KYD.
             */
            public Builder setKyd(Kyd kyd) {
              this.kyd = kyd;
              return this;
            }

            /**
             * Shipping rate defined in KZT.
             */
            public Builder setKzt(Kzt kzt) {
              this.kzt = kzt;
              return this;
            }

            /**
             * Shipping rate defined in LAK.
             */
            public Builder setLak(Lak lak) {
              this.lak = lak;
              return this;
            }

            /**
             * Shipping rate defined in LBP.
             */
            public Builder setLbp(Lbp lbp) {
              this.lbp = lbp;
              return this;
            }

            /**
             * Shipping rate defined in LKR.
             */
            public Builder setLkr(Lkr lkr) {
              this.lkr = lkr;
              return this;
            }

            /**
             * Shipping rate defined in LRD.
             */
            public Builder setLrd(Lrd lrd) {
              this.lrd = lrd;
              return this;
            }

            /**
             * Shipping rate defined in LSL.
             */
            public Builder setLsl(Lsl lsl) {
              this.lsl = lsl;
              return this;
            }

            /**
             * Shipping rate defined in MAD.
             */
            public Builder setMad(Mad mad) {
              this.mad = mad;
              return this;
            }

            /**
             * Shipping rate defined in MDL.
             */
            public Builder setMdl(Mdl mdl) {
              this.mdl = mdl;
              return this;
            }

            /**
             * Shipping rate defined in MGA.
             */
            public Builder setMga(Mga mga) {
              this.mga = mga;
              return this;
            }

            /**
             * Shipping rate defined in MKD.
             */
            public Builder setMkd(Mkd mkd) {
              this.mkd = mkd;
              return this;
            }

            /**
             * Shipping rate defined in MMK.
             */
            public Builder setMmk(Mmk mmk) {
              this.mmk = mmk;
              return this;
            }

            /**
             * Shipping rate defined in MNT.
             */
            public Builder setMnt(Mnt mnt) {
              this.mnt = mnt;
              return this;
            }

            /**
             * Shipping rate defined in MOP.
             */
            public Builder setMop(Mop mop) {
              this.mop = mop;
              return this;
            }

            /**
             * Shipping rate defined in MRO.
             */
            public Builder setMro(Mro mro) {
              this.mro = mro;
              return this;
            }

            /**
             * Shipping rate defined in MUR.
             */
            public Builder setMur(Mur mur) {
              this.mur = mur;
              return this;
            }

            /**
             * Shipping rate defined in MVR.
             */
            public Builder setMvr(Mvr mvr) {
              this.mvr = mvr;
              return this;
            }

            /**
             * Shipping rate defined in MWK.
             */
            public Builder setMwk(Mwk mwk) {
              this.mwk = mwk;
              return this;
            }

            /**
             * Shipping rate defined in MXN.
             */
            public Builder setMxn(Mxn mxn) {
              this.mxn = mxn;
              return this;
            }

            /**
             * Shipping rate defined in MYR.
             */
            public Builder setMyr(Myr myr) {
              this.myr = myr;
              return this;
            }

            /**
             * Shipping rate defined in MZN.
             */
            public Builder setMzn(Mzn mzn) {
              this.mzn = mzn;
              return this;
            }

            /**
             * Shipping rate defined in NAD.
             */
            public Builder setNad(Nad nad) {
              this.nad = nad;
              return this;
            }

            /**
             * Shipping rate defined in NGN.
             */
            public Builder setNgn(Ngn ngn) {
              this.ngn = ngn;
              return this;
            }

            /**
             * Shipping rate defined in NIO.
             */
            public Builder setNio(Nio nio) {
              this.nio = nio;
              return this;
            }

            /**
             * Shipping rate defined in NOK.
             */
            public Builder setNok(Nok nok) {
              this.nok = nok;
              return this;
            }

            /**
             * Shipping rate defined in NPR.
             */
            public Builder setNpr(Npr npr) {
              this.npr = npr;
              return this;
            }

            /**
             * Shipping rate defined in NZD.
             */
            public Builder setNzd(Nzd nzd) {
              this.nzd = nzd;
              return this;
            }

            /**
             * Shipping rate defined in OMR.
             */
            public Builder setOmr(Omr omr) {
              this.omr = omr;
              return this;
            }

            /**
             * Shipping rate defined in PAB.
             */
            public Builder setPab(Pab pab) {
              this.pab = pab;
              return this;
            }

            /**
             * Shipping rate defined in PEN.
             */
            public Builder setPen(Pen pen) {
              this.pen = pen;
              return this;
            }

            /**
             * Shipping rate defined in PGK.
             */
            public Builder setPgk(Pgk pgk) {
              this.pgk = pgk;
              return this;
            }

            /**
             * Shipping rate defined in PHP.
             */
            public Builder setPhp(Php php) {
              this.php = php;
              return this;
            }

            /**
             * Shipping rate defined in PKR.
             */
            public Builder setPkr(Pkr pkr) {
              this.pkr = pkr;
              return this;
            }

            /**
             * Shipping rate defined in PLN.
             */
            public Builder setPln(Pln pln) {
              this.pln = pln;
              return this;
            }

            /**
             * Shipping rate defined in PYG.
             */
            public Builder setPyg(Pyg pyg) {
              this.pyg = pyg;
              return this;
            }

            /**
             * Shipping rate defined in QAR.
             */
            public Builder setQar(Qar qar) {
              this.qar = qar;
              return this;
            }

            /**
             * Shipping rate defined in RON.
             */
            public Builder setRon(Ron ron) {
              this.ron = ron;
              return this;
            }

            /**
             * Shipping rate defined in RSD.
             */
            public Builder setRsd(Rsd rsd) {
              this.rsd = rsd;
              return this;
            }

            /**
             * Shipping rate defined in RUB.
             */
            public Builder setRub(Rub rub) {
              this.rub = rub;
              return this;
            }

            /**
             * Shipping rate defined in RWF.
             */
            public Builder setRwf(Rwf rwf) {
              this.rwf = rwf;
              return this;
            }

            /**
             * Shipping rate defined in SAR.
             */
            public Builder setSar(Sar sar) {
              this.sar = sar;
              return this;
            }

            /**
             * Shipping rate defined in SBD.
             */
            public Builder setSbd(Sbd sbd) {
              this.sbd = sbd;
              return this;
            }

            /**
             * Shipping rate defined in SCR.
             */
            public Builder setScr(Scr scr) {
              this.scr = scr;
              return this;
            }

            /**
             * Shipping rate defined in SEK.
             */
            public Builder setSek(Sek sek) {
              this.sek = sek;
              return this;
            }

            /**
             * Shipping rate defined in SGD.
             */
            public Builder setSgd(Sgd sgd) {
              this.sgd = sgd;
              return this;
            }

            /**
             * Shipping rate defined in SHP.
             */
            public Builder setShp(Shp shp) {
              this.shp = shp;
              return this;
            }

            /**
             * Shipping rate defined in SLL.
             */
            public Builder setSll(Sll sll) {
              this.sll = sll;
              return this;
            }

            /**
             * Shipping rate defined in SOS.
             */
            public Builder setSos(Sos sos) {
              this.sos = sos;
              return this;
            }

            /**
             * Shipping rate defined in SRD.
             */
            public Builder setSrd(Srd srd) {
              this.srd = srd;
              return this;
            }

            /**
             * Shipping rate defined in STD.
             */
            public Builder setStd(Std std) {
              this.std = std;
              return this;
            }

            /**
             * Shipping rate defined in SZL.
             */
            public Builder setSzl(Szl szl) {
              this.szl = szl;
              return this;
            }

            /**
             * Shipping rate defined in THB.
             */
            public Builder setThb(Thb thb) {
              this.thb = thb;
              return this;
            }

            /**
             * Shipping rate defined in TJS.
             */
            public Builder setTjs(Tjs tjs) {
              this.tjs = tjs;
              return this;
            }

            /**
             * Shipping rate defined in TND.
             */
            public Builder setTnd(Tnd tnd) {
              this.tnd = tnd;
              return this;
            }

            /**
             * Shipping rate defined in TOP.
             */
            public Builder setTop(Top top) {
              this.top = top;
              return this;
            }

            /**
             * Shipping rate defined in TRY.
             */
            public Builder setTry(Try try) {
              this.try = try;
              return this;
            }

            /**
             * Shipping rate defined in TTD.
             */
            public Builder setTtd(Ttd ttd) {
              this.ttd = ttd;
              return this;
            }

            /**
             * Shipping rate defined in TWD.
             */
            public Builder setTwd(Twd twd) {
              this.twd = twd;
              return this;
            }

            /**
             * Shipping rate defined in TZS.
             */
            public Builder setTzs(Tzs tzs) {
              this.tzs = tzs;
              return this;
            }

            /**
             * Shipping rate defined in UAH.
             */
            public Builder setUah(Uah uah) {
              this.uah = uah;
              return this;
            }

            /**
             * Shipping rate defined in UGX.
             */
            public Builder setUgx(Ugx ugx) {
              this.ugx = ugx;
              return this;
            }

            /**
             * Shipping rate defined in USD.
             */
            public Builder setUsd(Usd usd) {
              this.usd = usd;
              return this;
            }

            /**
             * Shipping rate defined in USDC.
             */
            public Builder setUsdc(Usdc usdc) {
              this.usdc = usdc;
              return this;
            }

            /**
             * Shipping rate defined in UYU.
             */
            public Builder setUyu(Uyu uyu) {
              this.uyu = uyu;
              return this;
            }

            /**
             * Shipping rate defined in UZS.
             */
            public Builder setUzs(Uzs uzs) {
              this.uzs = uzs;
              return this;
            }

            /**
             * Shipping rate defined in VND.
             */
            public Builder setVnd(Vnd vnd) {
              this.vnd = vnd;
              return this;
            }

            /**
             * Shipping rate defined in VUV.
             */
            public Builder setVuv(Vuv vuv) {
              this.vuv = vuv;
              return this;
            }

            /**
             * Shipping rate defined in WST.
             */
            public Builder setWst(Wst wst) {
              this.wst = wst;
              return this;
            }

            /**
             * Shipping rate defined in XAF.
             */
            public Builder setXaf(Xaf xaf) {
              this.xaf = xaf;
              return this;
            }

            /**
             * Shipping rate defined in XCD.
             */
            public Builder setXcd(Xcd xcd) {
              this.xcd = xcd;
              return this;
            }

            /**
             * Shipping rate defined in XOF.
             */
            public Builder setXof(Xof xof) {
              this.xof = xof;
              return this;
            }

            /**
             * Shipping rate defined in XPF.
             */
            public Builder setXpf(Xpf xpf) {
              this.xpf = xpf;
              return this;
            }

            /**
             * Shipping rate defined in YER.
             */
            public Builder setYer(Yer yer) {
              this.yer = yer;
              return this;
            }

            /**
             * Shipping rate defined in ZAR.
             */
            public Builder setZar(Zar zar) {
              this.zar = zar;
              return this;
            }

            /**
             * Shipping rate defined in ZMW.
             */
            public Builder setZmw(Zmw zmw) {
              this.zmw = zmw;
              return this;
            }
          }
          @Getter
          public static class Aed {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Aed(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Aed build() {
                return new Aed(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aed#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aed#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Afn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Afn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Afn build() {
                return new Afn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Afn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Afn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class All {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private All(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public All build() {
                return new All(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.All#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.All#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Amd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Amd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Amd build() {
                return new Amd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Amd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Amd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ang {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ang(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ang build() {
                return new Ang(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ang#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ang#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Aoa {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Aoa(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Aoa build() {
                return new Aoa(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aoa#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aoa#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ars {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ars(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ars build() {
                return new Ars(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ars#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ars#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Aud {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Aud(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Aud build() {
                return new Aud(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aud#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Aud#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Awg {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Awg(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Awg build() {
                return new Awg(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Awg#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Awg#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Azn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Azn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Azn build() {
                return new Azn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Azn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Azn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bam {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bam(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bam build() {
                return new Bam(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bam#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bam#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bbd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bbd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bbd build() {
                return new Bbd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bbd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bbd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bdt {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bdt(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bdt build() {
                return new Bdt(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bdt#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bdt#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bgn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bgn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bgn build() {
                return new Bgn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bgn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bgn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bhd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bhd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bhd build() {
                return new Bhd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bhd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bhd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bif {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bif(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bif build() {
                return new Bif(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bif#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bif#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bmd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bmd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bmd build() {
                return new Bmd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bmd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bmd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bnd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bnd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bnd build() {
                return new Bnd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bnd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bnd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bob {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bob(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bob build() {
                return new Bob(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bob#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bob#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Brl {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Brl(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Brl build() {
                return new Brl(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Brl#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Brl#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bsd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bsd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bsd build() {
                return new Bsd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bsd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bsd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Btn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Btn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Btn build() {
                return new Btn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Btn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Btn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bwp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bwp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bwp build() {
                return new Bwp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bwp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bwp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Byn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Byn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Byn build() {
                return new Byn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Byn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Byn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Bzd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Bzd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Bzd build() {
                return new Bzd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bzd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Bzd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Cad {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Cad(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Cad build() {
                return new Cad(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cad#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cad#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Cdf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Cdf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Cdf build() {
                return new Cdf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cdf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cdf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Chf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Chf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Chf build() {
                return new Chf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Chf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Chf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Clp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Clp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Clp build() {
                return new Clp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Clp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Clp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Cny {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Cny(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Cny build() {
                return new Cny(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cny#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cny#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Cop {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Cop(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Cop build() {
                return new Cop(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cop#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cop#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Crc {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Crc(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Crc build() {
                return new Crc(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Crc#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Crc#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Cve {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Cve(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Cve build() {
                return new Cve(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cve#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Cve#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Czk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Czk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Czk build() {
                return new Czk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Czk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Czk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Djf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Djf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Djf build() {
                return new Djf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Djf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Djf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Dkk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Dkk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Dkk build() {
                return new Dkk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dkk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dkk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Dop {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Dop(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Dop build() {
                return new Dop(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dop#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dop#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Dzd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Dzd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Dzd build() {
                return new Dzd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dzd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Dzd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Egp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Egp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Egp build() {
                return new Egp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Egp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Egp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Etb {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Etb(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Etb build() {
                return new Etb(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Etb#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Etb#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Eur {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Eur(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Eur build() {
                return new Eur(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Eur#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Eur#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Fjd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Fjd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Fjd build() {
                return new Fjd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Fjd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Fjd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Fkp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Fkp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Fkp build() {
                return new Fkp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Fkp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Fkp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gbp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gbp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gbp build() {
                return new Gbp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gbp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gbp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gel {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gel(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gel build() {
                return new Gel(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gel#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gel#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ghs {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ghs(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ghs build() {
                return new Ghs(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ghs#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ghs#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gip {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gip(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gip build() {
                return new Gip(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gip#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gip#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gmd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gmd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gmd build() {
                return new Gmd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gmd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gmd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gnf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gnf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gnf build() {
                return new Gnf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gnf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gnf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gtq {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gtq(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gtq build() {
                return new Gtq(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gtq#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gtq#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Gyd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Gyd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Gyd build() {
                return new Gyd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gyd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Gyd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Hkd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Hkd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Hkd build() {
                return new Hkd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hkd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hkd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Hnl {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Hnl(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Hnl build() {
                return new Hnl(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hnl#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hnl#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Hrk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Hrk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Hrk build() {
                return new Hrk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hrk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Hrk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Htg {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Htg(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Htg build() {
                return new Htg(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Htg#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Htg#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Huf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Huf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Huf build() {
                return new Huf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Huf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Huf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Idr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Idr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Idr build() {
                return new Idr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Idr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Idr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ils {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ils(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ils build() {
                return new Ils(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ils#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ils#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Inr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Inr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Inr build() {
                return new Inr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Inr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Inr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Isk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Isk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Isk build() {
                return new Isk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Isk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Isk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Jmd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Jmd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Jmd build() {
                return new Jmd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jmd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jmd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Jod {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Jod(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Jod build() {
                return new Jod(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jod#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jod#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Jpy {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Jpy(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Jpy build() {
                return new Jpy(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jpy#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Jpy#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kes {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kes(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kes build() {
                return new Kes(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kes#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kes#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kgs {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kgs(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kgs build() {
                return new Kgs(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kgs#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kgs#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Khr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Khr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Khr build() {
                return new Khr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Khr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Khr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kmf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kmf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kmf build() {
                return new Kmf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kmf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kmf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Krw {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Krw(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Krw build() {
                return new Krw(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Krw#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Krw#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kwd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kwd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kwd build() {
                return new Kwd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kwd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kwd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kyd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kyd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kyd build() {
                return new Kyd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kyd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kyd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Kzt {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Kzt(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Kzt build() {
                return new Kzt(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kzt#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Kzt#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Lak {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Lak(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Lak build() {
                return new Lak(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lak#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lak#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Lbp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Lbp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Lbp build() {
                return new Lbp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lbp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lbp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Lkr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Lkr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Lkr build() {
                return new Lkr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lkr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lkr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Lrd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Lrd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Lrd build() {
                return new Lrd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lrd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lrd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Lsl {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Lsl(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Lsl build() {
                return new Lsl(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lsl#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Lsl#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mad {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mad(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mad build() {
                return new Mad(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mad#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mad#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mdl {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mdl(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mdl build() {
                return new Mdl(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mdl#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mdl#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mga {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mga(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mga build() {
                return new Mga(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mga#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mga#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mkd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mkd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mkd build() {
                return new Mkd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mkd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mkd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mmk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mmk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mmk build() {
                return new Mmk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mmk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mmk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mnt {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mnt(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mnt build() {
                return new Mnt(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mnt#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mnt#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mop {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mop(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mop build() {
                return new Mop(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mop#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mop#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mro {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mro(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mro build() {
                return new Mro(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mro#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mro#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mur {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mur(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mur build() {
                return new Mur(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mur#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mur#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mvr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mvr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mvr build() {
                return new Mvr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mvr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mvr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mwk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mwk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mwk build() {
                return new Mwk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mwk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mwk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mxn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mxn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mxn build() {
                return new Mxn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mxn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mxn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Myr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Myr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Myr build() {
                return new Myr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Myr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Myr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Mzn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Mzn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Mzn build() {
                return new Mzn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mzn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Mzn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Nad {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Nad(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Nad build() {
                return new Nad(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nad#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nad#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ngn {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ngn(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ngn build() {
                return new Ngn(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ngn#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ngn#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Nio {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Nio(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Nio build() {
                return new Nio(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nio#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nio#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Nok {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Nok(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Nok build() {
                return new Nok(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nok#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nok#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Npr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Npr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Npr build() {
                return new Npr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Npr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Npr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Nzd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Nzd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Nzd build() {
                return new Nzd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nzd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Nzd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Omr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Omr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Omr build() {
                return new Omr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Omr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Omr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pab {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pab(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pab build() {
                return new Pab(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pab#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pab#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pen {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pen(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pen build() {
                return new Pen(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pen#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pen#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pgk {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pgk(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pgk build() {
                return new Pgk(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pgk#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pgk#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Php {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Php(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Php build() {
                return new Php(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Php#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Php#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pkr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pkr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pkr build() {
                return new Pkr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pkr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pkr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pln {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pln(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pln build() {
                return new Pln(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pln#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pln#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Pyg {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Pyg(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Pyg build() {
                return new Pyg(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pyg#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Pyg#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Qar {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Qar(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Qar build() {
                return new Qar(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Qar#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Qar#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ron {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ron(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ron build() {
                return new Ron(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ron#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ron#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Rsd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Rsd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Rsd build() {
                return new Rsd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rsd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rsd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Rub {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Rub(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Rub build() {
                return new Rub(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rub#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rub#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Rwf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Rwf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Rwf build() {
                return new Rwf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rwf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Rwf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sar {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sar(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sar build() {
                return new Sar(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sar#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sar#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sbd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sbd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sbd build() {
                return new Sbd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sbd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sbd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Scr {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Scr(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Scr build() {
                return new Scr(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Scr#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Scr#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sek {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sek(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sek build() {
                return new Sek(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sek#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sek#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sgd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sgd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sgd build() {
                return new Sgd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sgd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sgd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Shp {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Shp(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Shp build() {
                return new Shp(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Shp#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Shp#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sll {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sll(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sll build() {
                return new Sll(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sll#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sll#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Sos {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Sos(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Sos build() {
                return new Sos(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sos#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Sos#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Srd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Srd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Srd build() {
                return new Srd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Srd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Srd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Std {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Std(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Std build() {
                return new Std(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Std#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Std#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Szl {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Szl(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Szl build() {
                return new Szl(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Szl#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Szl#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Thb {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Thb(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Thb build() {
                return new Thb(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Thb#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Thb#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Tjs {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Tjs(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Tjs build() {
                return new Tjs(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tjs#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tjs#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Tnd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Tnd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Tnd build() {
                return new Tnd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tnd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tnd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Top {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Top(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Top build() {
                return new Top(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Top#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Top#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Try {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Try(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Try build() {
                return new Try(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Try#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Try#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ttd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ttd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ttd build() {
                return new Ttd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ttd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ttd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Twd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Twd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Twd build() {
                return new Twd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Twd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Twd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Tzs {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Tzs(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Tzs build() {
                return new Tzs(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tzs#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Tzs#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Uah {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Uah(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Uah build() {
                return new Uah(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uah#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uah#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Ugx {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Ugx(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Ugx build() {
                return new Ugx(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ugx#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Ugx#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Usd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Usd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Usd build() {
                return new Usd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Usd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Usd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Usdc {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Usdc(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Usdc build() {
                return new Usdc(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Usdc#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Usdc#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Uyu {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Uyu(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Uyu build() {
                return new Uyu(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uyu#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uyu#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Uzs {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Uzs(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Uzs build() {
                return new Uzs(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uzs#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Uzs#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Vnd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Vnd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Vnd build() {
                return new Vnd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Vnd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Vnd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Vuv {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Vuv(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Vuv build() {
                return new Vuv(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Vuv#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Vuv#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Wst {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Wst(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Wst build() {
                return new Wst(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Wst#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Wst#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Xaf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Xaf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Xaf build() {
                return new Xaf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xaf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xaf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Xcd {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Xcd(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Xcd build() {
                return new Xcd(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xcd#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xcd#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Xof {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Xof(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Xof build() {
                return new Xof(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xof#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xof#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Xpf {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Xpf(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Xpf build() {
                return new Xpf(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xpf#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Xpf#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Yer {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Yer(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Yer build() {
                return new Yer(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Yer#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Yer#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Zar {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Zar(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Zar build() {
                return new Zar(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Zar#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Zar#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
          @Getter
          public static class Zmw {
            /**
             * A non-negative integer in cents representing how much to charge.
             */
            @SerializedName("amount")
            Long amount;

            /**
             * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
             */
            @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
            Map<String, Object> extraParams;

            /**
             * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
             */
            @SerializedName("tax_behavior")
            TaxBehavior taxBehavior;

            private Zmw(Long amount, Map<String, Object> extraParams, TaxBehavior taxBehavior) {
              this.amount = amount;
              this.extraParams = extraParams;
              this.taxBehavior = taxBehavior;
            }
            public static Builder builder() {
              return new Builder();
            }
            public static class Builder {
              private Long amount;

              private Map<String, Object> extraParams;

              private TaxBehavior taxBehavior;

              /**
               * Finalize and obtain parameter instance from this builder.
               */
              public Zmw build() {
                return new Zmw(this.amount, this.extraParams, this.taxBehavior);
              }

              /**
               * A non-negative integer in cents representing how much to charge.
               */
              public Builder setAmount(Long amount) {
                this.amount = amount;
                return this;
              }

              /**
               * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Zmw#extraParams} for the field documentation.
               */
              public Builder putExtraParam(String key, Object value) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.put(key, value);
                return this;
              }

              /**
               * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.ShippingOption.ShippingRateData.FixedAmount.CurrencyOptions.Zmw#extraParams} for the field documentation.
               */
              public Builder putAllExtraParam(Map<String, Object> map) {
                if (this.extraParams == null) {
                  this.extraParams = new HashMap<>();
                }
                this.extraParams.putAll(map);
                return this;
              }

              /**
               * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}.
               */
              public Builder setTaxBehavior(TaxBehavior taxBehavior) {
                this.taxBehavior = taxBehavior;
                return this;
              }
            }
            public enum TaxBehavior implements ApiRequestParams.EnumParam {
              @SerializedName("exclusive")
              EXCLUSIVE("exclusive"),

              @SerializedName("inclusive")
              INCLUSIVE("inclusive"),

              @SerializedName("unspecified")
              UNSPECIFIED("unspecified");
              @Getter(onMethod_ = {@Override})
              private final String value;
              TaxBehavior(String value) {
                this.value = value;
              }
            }
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
      public enum Type implements ApiRequestParams.EnumParam {
        @SerializedName("fixed_amount")
        FIXED_AMOUNT("fixed_amount");
        @Getter(onMethod_ = {@Override})
        private final String value;
        Type(String value) {
          this.value = value;
        }
      }
    }
  }
  @Getter
  public static class SubscriptionData {
    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. To use an application fee percent, the request must be made on behalf of another account, using the {@code Stripe-Account} header or an OAuth key. For more information, see the application fees <a href="https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions">documentation</a>.
     */
    @SerializedName("application_fee_percent")
    BigDecimal applicationFeePercent;

    /**
     * The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.
     */
    @SerializedName("coupon")
    String coupon;

    /**
     * The tax rates that will apply to any subscription item that does not have {@code tax_rates} set. Invoices created will have their {@code default_tax_rates} populated from the subscription.
     */
    @SerializedName("default_tax_rates")
    List<String> defaultTaxRates;

    /**
     * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe hosted surfaces.
     */
    @SerializedName("description")
    String description;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * A list of items, each with an attached plan, that the customer is subscribing to. Prefer using {@code line_items}.
     */
    @SerializedName("items")
    List<Item> items;

    /**
     * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
     */
    @SerializedName("metadata")
    Map<String, String> metadata;

    /**
     * If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
     */
    @SerializedName("transfer_data")
    TransferData transferData;

    /**
     * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. Has to be at least 48 hours in the future.
     */
    @SerializedName("trial_end")
    Long trialEnd;

    /**
     * Indicates if a plan’s {@code trial_period_days} should be applied to the subscription. Setting {@code trial_end} on {@code subscription_data} is preferred. Defaults to {@code false}.
     */
    @SerializedName("trial_from_plan")
    Boolean trialFromPlan;

    /**
     * Integer representing the number of trial period days before the customer is charged for the first time. Has to be at least 1.
     */
    @SerializedName("trial_period_days")
    Long trialPeriodDays;

    private SubscriptionData(
        BigDecimal applicationFeePercent,
        String coupon,
        List<String> defaultTaxRates,
        String description,
        Map<String, Object> extraParams,
        List<Item> items,
        Map<String, String> metadata,
        TransferData transferData,
        Long trialEnd,
        Boolean trialFromPlan,
        Long trialPeriodDays) {
      this.applicationFeePercent = applicationFeePercent;
      this.coupon = coupon;
      this.defaultTaxRates = defaultTaxRates;
      this.description = description;
      this.extraParams = extraParams;
      this.items = items;
      this.metadata = metadata;
      this.transferData = transferData;
      this.trialEnd = trialEnd;
      this.trialFromPlan = trialFromPlan;
      this.trialPeriodDays = trialPeriodDays;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private BigDecimal applicationFeePercent;

      private String coupon;

      private List<String> defaultTaxRates;

      private String description;

      private Map<String, Object> extraParams;

      private List<Item> items;

      private Map<String, String> metadata;

      private TransferData transferData;

      private Long trialEnd;

      private Boolean trialFromPlan;

      private Long trialPeriodDays;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public SubscriptionData build() {
        return new SubscriptionData(
          this.applicationFeePercent,
          this.coupon,
          this.defaultTaxRates,
          this.description,
          this.extraParams,
          this.items,
          this.metadata,
          this.transferData,
          this.trialEnd,
          this.trialFromPlan,
          this.trialPeriodDays
        );
      }

      /**
       * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. To use an application fee percent, the request must be made on behalf of another account, using the {@code Stripe-Account} header or an OAuth key. For more information, see the application fees <a href="https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions">documentation</a>.
       */
      public Builder setApplicationFeePercent(BigDecimal applicationFeePercent) {
        this.applicationFeePercent = applicationFeePercent;
        return this;
      }

      /**
       * The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.
       */
      public Builder setCoupon(String coupon) {
        this.coupon = coupon;
        return this;
      }

      /**
       * Add an element to `defaultTaxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData#defaultTaxRates} for the field documentation.
       */
      public Builder addDefaultTaxRate(String element) {
        if (this.defaultTaxRates == null) {
          this.defaultTaxRates = new ArrayList<>();
        }
        this.defaultTaxRates.add(element);
        return this;
      }

      /**
       * Add all elements to `defaultTaxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData#defaultTaxRates} for the field documentation.
       */
      public Builder addAllDefaultTaxRate(List<String> elements) {
        if (this.defaultTaxRates == null) {
          this.defaultTaxRates = new ArrayList<>();
        }
        this.defaultTaxRates.addAll(elements);
        return this;
      }

      /**
       * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe hosted surfaces.
       */
      public Builder setDescription(String description) {
        this.description = description;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Add an element to `items` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData#items} for the field documentation.
       */
      public Builder addItem(Item element) {
        if (this.items == null) {
          this.items = new ArrayList<>();
        }
        this.items.add(element);
        return this;
      }

      /**
       * Add all elements to `items` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData#items} for the field documentation.
       */
      public Builder addAllItem(List<Item> elements) {
        if (this.items == null) {
          this.items = new ArrayList<>();
        }
        this.items.addAll(elements);
        return this;
      }

      /**
       * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData#metadata} for the field documentation.
       */
      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData#metadata} for the field documentation.
       */
      public Builder putAllMetadata(Map<String, String> map) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.putAll(map);
        return this;
      }

      /**
       * If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
       */
      public Builder setTransferData(TransferData transferData) {
        this.transferData = transferData;
        return this;
      }

      /**
       * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. Has to be at least 48 hours in the future.
       */
      public Builder setTrialEnd(Long trialEnd) {
        this.trialEnd = trialEnd;
        return this;
      }

      /**
       * Indicates if a plan’s {@code trial_period_days} should be applied to the subscription. Setting {@code trial_end} on {@code subscription_data} is preferred. Defaults to {@code false}.
       */
      public Builder setTrialFromPlan(Boolean trialFromPlan) {
        this.trialFromPlan = trialFromPlan;
        return this;
      }

      /**
       * Integer representing the number of trial period days before the customer is charged for the first time. Has to be at least 1.
       */
      public Builder setTrialPeriodDays(Long trialPeriodDays) {
        this.trialPeriodDays = trialPeriodDays;
        return this;
      }
    }
    @Getter
    public static class Item {
      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Plan ID for this item.
       */
      @SerializedName("plan")
      String plan;

      /**
       * The quantity of the subscription item being purchased. Quantity should not be defined when {@code recurring.usage_type=metered}.
       */
      @SerializedName("quantity")
      Long quantity;

      /**
       * The tax rates which apply to this item. When set, the {@code default_tax_rates} on {@code subscription_data} do not apply to this item.
       */
      @SerializedName("tax_rates")
      List<String> taxRates;

      private Item(
          Map<String, Object> extraParams,
          String plan,
          Long quantity,
          List<String> taxRates) {
        this.extraParams = extraParams;
        this.plan = plan;
        this.quantity = quantity;
        this.taxRates = taxRates;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private Map<String, Object> extraParams;

        private String plan;

        private Long quantity;

        private List<String> taxRates;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Item build() {
          return new Item(this.extraParams, this.plan, this.quantity, this.taxRates);
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData.Item#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData.Item#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Plan ID for this item.
         */
        public Builder setPlan(String plan) {
          this.plan = plan;
          return this;
        }

        /**
         * The quantity of the subscription item being purchased. Quantity should not be defined when {@code recurring.usage_type=metered}.
         */
        public Builder setQuantity(Long quantity) {
          this.quantity = quantity;
          return this;
        }

        /**
         * Add an element to `taxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData.Item#taxRates} for the field documentation.
         */
        public Builder addTaxRate(String element) {
          if (this.taxRates == null) {
            this.taxRates = new ArrayList<>();
          }
          this.taxRates.add(element);
          return this;
        }

        /**
         * Add all elements to `taxRates` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link SessionCreateParams.SubscriptionData.Item#taxRates} for the field documentation.
         */
        public Builder addAllTaxRate(List<String> elements) {
          if (this.taxRates == null) {
            this.taxRates = new ArrayList<>();
          }
          this.taxRates.addAll(elements);
          return this;
        }
      }
    }
    @Getter
    public static class TransferData {
      /**
       * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
       */
      @SerializedName("amount_percent")
      BigDecimal amountPercent;

      /**
       * ID of an existing, connected Stripe account.
       */
      @SerializedName("destination")
      String destination;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      private TransferData(
          BigDecimal amountPercent,
          String destination,
          Map<String, Object> extraParams) {
        this.amountPercent = amountPercent;
        this.destination = destination;
        this.extraParams = extraParams;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private BigDecimal amountPercent;

        private String destination;

        private Map<String, Object> extraParams;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public TransferData build() {
          return new TransferData(this.amountPercent, this.destination, this.extraParams);
        }

        /**
         * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
         */
        public Builder setAmountPercent(BigDecimal amountPercent) {
          this.amountPercent = amountPercent;
          return this;
        }

        /**
         * ID of an existing, connected Stripe account.
         */
        public Builder setDestination(String destination) {
          this.destination = destination;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData.TransferData#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.SubscriptionData.TransferData#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }
      }
    }
  }
  @Getter
  public static class TaxIdCollection {
    /**
     * Set to true to enable Tax ID collection.
     */
    @SerializedName("enabled")
    Boolean enabled;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    private TaxIdCollection(Boolean enabled, Map<String, Object> extraParams) {
      this.enabled = enabled;
      this.extraParams = extraParams;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Boolean enabled;

      private Map<String, Object> extraParams;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public TaxIdCollection build() {
        return new TaxIdCollection(this.enabled, this.extraParams);
      }

      /**
       * Set to true to enable Tax ID collection.
       */
      public Builder setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.TaxIdCollection#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link SessionCreateParams.TaxIdCollection#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }
    }
  }
  public enum BillingAddressCollection implements ApiRequestParams.EnumParam {
    @SerializedName("auto")
    AUTO("auto"),

    @SerializedName("required")
    REQUIRED("required");
    @Getter(onMethod_ = {@Override})
    private final String value;
    BillingAddressCollection(String value) {
      this.value = value;
    }
  }
  public enum CustomerCreation implements ApiRequestParams.EnumParam {
    @SerializedName("always")
    ALWAYS("always"),

    @SerializedName("if_required")
    IF_REQUIRED("if_required");
    @Getter(onMethod_ = {@Override})
    private final String value;
    CustomerCreation(String value) {
      this.value = value;
    }
  }
  public enum Locale implements ApiRequestParams.EnumParam {
    @SerializedName("auto")
    AUTO("auto"),

    @SerializedName("bg")
    BG("bg"),

    @SerializedName("cs")
    CS("cs"),

    @SerializedName("da")
    DA("da"),

    @SerializedName("de")
    DE("de"),

    @SerializedName("el")
    EL("el"),

    @SerializedName("en")
    EN("en"),

    @SerializedName("en-GB")
    EN_GB("en-GB"),

    @SerializedName("es")
    ES("es"),

    @SerializedName("es-419")
    ES_419("es-419"),

    @SerializedName("et")
    ET("et"),

    @SerializedName("fi")
    FI("fi"),

    @SerializedName("fil")
    FIL("fil"),

    @SerializedName("fr")
    FR("fr"),

    @SerializedName("fr-CA")
    FR_CA("fr-CA"),

    @SerializedName("hr")
    HR("hr"),

    @SerializedName("hu")
    HU("hu"),

    @SerializedName("id")
    ID("id"),

    @SerializedName("it")
    IT("it"),

    @SerializedName("ja")
    JA("ja"),

    @SerializedName("ko")
    KO("ko"),

    @SerializedName("lt")
    LT("lt"),

    @SerializedName("lv")
    LV("lv"),

    @SerializedName("ms")
    MS("ms"),

    @SerializedName("mt")
    MT("mt"),

    @SerializedName("nb")
    NB("nb"),

    @SerializedName("nl")
    NL("nl"),

    @SerializedName("pl")
    PL("pl"),

    @SerializedName("pt")
    PT("pt"),

    @SerializedName("pt-BR")
    PT_BR("pt-BR"),

    @SerializedName("ro")
    RO("ro"),

    @SerializedName("ru")
    RU("ru"),

    @SerializedName("sk")
    SK("sk"),

    @SerializedName("sl")
    SL("sl"),

    @SerializedName("sv")
    SV("sv"),

    @SerializedName("th")
    TH("th"),

    @SerializedName("tr")
    TR("tr"),

    @SerializedName("vi")
    VI("vi"),

    @SerializedName("zh")
    ZH("zh"),

    @SerializedName("zh-HK")
    ZH_HK("zh-HK"),

    @SerializedName("zh-TW")
    ZH_TW("zh-TW");
    @Getter(onMethod_ = {@Override})
    private final String value;
    Locale(String value) {
      this.value = value;
    }
  }
  public enum Mode implements ApiRequestParams.EnumParam {
    @SerializedName("payment")
    PAYMENT("payment"),

    @SerializedName("setup")
    SETUP("setup"),

    @SerializedName("subscription")
    SUBSCRIPTION("subscription");
    @Getter(onMethod_ = {@Override})
    private final String value;
    Mode(String value) {
      this.value = value;
    }
  }
  public enum PaymentMethodType implements ApiRequestParams.EnumParam {
    @SerializedName("acss_debit")
    ACSS_DEBIT("acss_debit"),

    @SerializedName("affirm")
    AFFIRM("affirm"),

    @SerializedName("afterpay_clearpay")
    AFTERPAY_CLEARPAY("afterpay_clearpay"),

    @SerializedName("alipay")
    ALIPAY("alipay"),

    @SerializedName("au_becs_debit")
    AU_BECS_DEBIT("au_becs_debit"),

    @SerializedName("bacs_debit")
    BACS_DEBIT("bacs_debit"),

    @SerializedName("bancontact")
    BANCONTACT("bancontact"),

    @SerializedName("boleto")
    BOLETO("boleto"),

    @SerializedName("card")
    CARD("card"),

    @SerializedName("eps")
    EPS("eps"),

    @SerializedName("fpx")
    FPX("fpx"),

    @SerializedName("giropay")
    GIROPAY("giropay"),

    @SerializedName("grabpay")
    GRABPAY("grabpay"),

    @SerializedName("ideal")
    IDEAL("ideal"),

    @SerializedName("klarna")
    KLARNA("klarna"),

    @SerializedName("konbini")
    KONBINI("konbini"),

    @SerializedName("oxxo")
    OXXO("oxxo"),

    @SerializedName("p24")
    P24("p24"),

    @SerializedName("paynow")
    PAYNOW("paynow"),

    @SerializedName("promptpay")
    PROMPTPAY("promptpay"),

    @SerializedName("sepa_debit")
    SEPA_DEBIT("sepa_debit"),

    @SerializedName("sofort")
    SOFORT("sofort"),

    @SerializedName("us_bank_account")
    US_BANK_ACCOUNT("us_bank_account"),

    @SerializedName("wechat_pay")
    WECHAT_PAY("wechat_pay");
    @Getter(onMethod_ = {@Override})
    private final String value;
    PaymentMethodType(String value) {
      this.value = value;
    }
  }
  public enum SubmitType implements ApiRequestParams.EnumParam {
    @SerializedName("auto")
    AUTO("auto"),

    @SerializedName("book")
    BOOK("book"),

    @SerializedName("donate")
    DONATE("donate"),

    @SerializedName("pay")
    PAY("pay");
    @Getter(onMethod_ = {@Override})
    private final String value;
    SubmitType(String value) {
      this.value = value;
    }
  }
}