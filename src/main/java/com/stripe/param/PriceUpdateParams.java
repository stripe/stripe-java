// File generated from our OpenAPI spec
package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiRequestParams;
import com.stripe.net.ApiRequestParams.EnumParam;
import com.stripe.param.common.EmptyParam;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;

@Getter
public class PriceUpdateParams extends ApiRequestParams {
  /**
   * Whether the price can be used for new purchases. Defaults to {@code true}.
   */
  @SerializedName("active")
  Boolean active;

  /**
   * Prices defined in each available currency option. Each key must be a three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a> and a <a href="https://stripe.com/docs/currencies">supported currency</a>.
   */
  @SerializedName("currency_options")
  Object currencyOptions;

  /**
   * Specifies which fields in the response should be expanded.
   */
  @SerializedName("expand")
  List<String> expand;

  /**
   * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
   */
  @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
  Map<String, Object> extraParams;

  /**
   * A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
   */
  @SerializedName("lookup_key")
  Object lookupKey;

  /**
   * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
   */
  @SerializedName("metadata")
  Object metadata;

  /**
   * A brief description of the price, hidden from customers.
   */
  @SerializedName("nickname")
  Object nickname;

  /**
   * The recurring components of a price such as {@code interval} and {@code usage_type}.
   */
  @SerializedName("recurring")
  Object recurring;

  /**
   * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
   */
  @SerializedName("tax_behavior")
  TaxBehavior taxBehavior;

  /**
   * If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
   */
  @SerializedName("transfer_lookup_key")
  Boolean transferLookupKey;

  private PriceUpdateParams(
      Boolean active,
      Object currencyOptions,
      List<String> expand,
      Map<String, Object> extraParams,
      Object lookupKey,
      Object metadata,
      Object nickname,
      Object recurring,
      TaxBehavior taxBehavior,
      Boolean transferLookupKey) {
    this.active = active;
    this.currencyOptions = currencyOptions;
    this.expand = expand;
    this.extraParams = extraParams;
    this.lookupKey = lookupKey;
    this.metadata = metadata;
    this.nickname = nickname;
    this.recurring = recurring;
    this.taxBehavior = taxBehavior;
    this.transferLookupKey = transferLookupKey;
  }
  public static Builder builder() {
    return new Builder();
  }
  public static class Builder {
    private Boolean active;

    private Object currencyOptions;

    private List<String> expand;

    private Map<String, Object> extraParams;

    private Object lookupKey;

    private Object metadata;

    private Object nickname;

    private Object recurring;

    private TaxBehavior taxBehavior;

    private Boolean transferLookupKey;

    /**
     * Finalize and obtain parameter instance from this builder.
     */
    public PriceUpdateParams build() {
      return new PriceUpdateParams(
        this.active,
        this.currencyOptions,
        this.expand,
        this.extraParams,
        this.lookupKey,
        this.metadata,
        this.nickname,
        this.recurring,
        this.taxBehavior,
        this.transferLookupKey
      );
    }

    /**
     * Whether the price can be used for new purchases. Defaults to {@code true}.
     */
    public Builder setActive(Boolean active) {
      this.active = active;
      return this;
    }

    /**
     * Prices defined in each available currency option. Each key must be a three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a> and a <a href="https://stripe.com/docs/currencies">supported currency</a>.
     */
    public Builder setCurrencyOptions(CurrencyOptions currencyOptions) {
      this.currencyOptions = currencyOptions;
      return this;
    }

    /**
     * Prices defined in each available currency option. Each key must be a three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html">ISO currency code</a> and a <a href="https://stripe.com/docs/currencies">supported currency</a>.
     */
    public Builder setCurrencyOptions(EmptyParam currencyOptions) {
      this.currencyOptions = currencyOptions;
      return this;
    }

    /**
     * Add an element to `expand` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams#expand} for the field documentation.
     */
    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    /**
     * Add all elements to `expand` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams#expand} for the field documentation.
     */
    public Builder addAllExpand(List<String> elements) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.addAll(elements);
      return this;
    }

    /**
     * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams#extraParams} for the field documentation.
     */
    public Builder putExtraParam(String key, Object value) {
      if (this.extraParams == null) {
        this.extraParams = new HashMap<>();
      }
      this.extraParams.put(key, value);
      return this;
    }

    /**
     * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams#extraParams} for the field documentation.
     */
    public Builder putAllExtraParam(Map<String, Object> map) {
      if (this.extraParams == null) {
        this.extraParams = new HashMap<>();
      }
      this.extraParams.putAll(map);
      return this;
    }

    /**
     * A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
     */
    public Builder setLookupKey(String lookupKey) {
      this.lookupKey = lookupKey;
      return this;
    }

    /**
     * A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
     */
    public Builder setLookupKey(EmptyParam lookupKey) {
      this.lookupKey = lookupKey;
      return this;
    }

    /**
     * Add a key/value pair to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams#metadata} for the field documentation.
     */
    @SuppressWarnings("unchecked")
    public Builder putMetadata(String key, String value) {
      if (this.metadata == null || this.metadata instanceof EmptyParam) {
        this.metadata = new HashMap<String, String>();
      }
      ((Map<String, String>) this.metadata).put(key, value);
      return this;
    }

    /**
     * Add all map key/value pairs to `metadata` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams#metadata} for the field documentation.
     */
    @SuppressWarnings("unchecked")
    public Builder putAllMetadata(Map<String, String> map) {
      if (this.metadata == null || this.metadata instanceof EmptyParam) {
        this.metadata = new HashMap<String, String>();
      }
      ((Map<String, String>) this.metadata).putAll(map);
      return this;
    }

    /**
     * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
     */
    public Builder setMetadata(EmptyParam metadata) {
      this.metadata = metadata;
      return this;
    }

    /**
     * Set of <a href="https://stripe.com/docs/api/metadata">key-value pairs</a> that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to {@code metadata}.
     */
    public Builder setMetadata(Map<String, String> metadata) {
      this.metadata = metadata;
      return this;
    }

    /**
     * A brief description of the price, hidden from customers.
     */
    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * A brief description of the price, hidden from customers.
     */
    public Builder setNickname(EmptyParam nickname) {
      this.nickname = nickname;
      return this;
    }

    /**
     * The recurring components of a price such as {@code interval} and {@code usage_type}.
     */
    public Builder setRecurring(Recurring recurring) {
      this.recurring = recurring;
      return this;
    }

    /**
     * The recurring components of a price such as {@code interval} and {@code usage_type}.
     */
    public Builder setRecurring(EmptyParam recurring) {
      this.recurring = recurring;
      return this;
    }

    /**
     * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
     */
    public Builder setTaxBehavior(TaxBehavior taxBehavior) {
      this.taxBehavior = taxBehavior;
      return this;
    }

    /**
     * If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
     */
    public Builder setTransferLookupKey(Boolean transferLookupKey) {
      this.transferLookupKey = transferLookupKey;
      return this;
    }
  }
  @Getter
  public static class CurrencyOptions {
    /**
     * The price defined in AED.
     */
    @SerializedName("aed")
    Aed aed;

    /**
     * The price defined in AFN.
     */
    @SerializedName("afn")
    Afn afn;

    /**
     * The price defined in ALL.
     */
    @SerializedName("all")
    All all;

    /**
     * The price defined in AMD.
     */
    @SerializedName("amd")
    Amd amd;

    /**
     * The price defined in ANG.
     */
    @SerializedName("ang")
    Ang ang;

    /**
     * The price defined in AOA.
     */
    @SerializedName("aoa")
    Aoa aoa;

    /**
     * The price defined in ARS.
     */
    @SerializedName("ars")
    Ars ars;

    /**
     * The price defined in AUD.
     */
    @SerializedName("aud")
    Aud aud;

    /**
     * The price defined in AWG.
     */
    @SerializedName("awg")
    Awg awg;

    /**
     * The price defined in AZN.
     */
    @SerializedName("azn")
    Azn azn;

    /**
     * The price defined in BAM.
     */
    @SerializedName("bam")
    Bam bam;

    /**
     * The price defined in BBD.
     */
    @SerializedName("bbd")
    Bbd bbd;

    /**
     * The price defined in BDT.
     */
    @SerializedName("bdt")
    Bdt bdt;

    /**
     * The price defined in BGN.
     */
    @SerializedName("bgn")
    Bgn bgn;

    /**
     * The price defined in BHD.
     */
    @SerializedName("bhd")
    Bhd bhd;

    /**
     * The price defined in BIF.
     */
    @SerializedName("bif")
    Bif bif;

    /**
     * The price defined in BMD.
     */
    @SerializedName("bmd")
    Bmd bmd;

    /**
     * The price defined in BND.
     */
    @SerializedName("bnd")
    Bnd bnd;

    /**
     * The price defined in BOB.
     */
    @SerializedName("bob")
    Bob bob;

    /**
     * The price defined in BRL.
     */
    @SerializedName("brl")
    Brl brl;

    /**
     * The price defined in BSD.
     */
    @SerializedName("bsd")
    Bsd bsd;

    /**
     * The price defined in BTN.
     */
    @SerializedName("btn")
    Btn btn;

    /**
     * The price defined in BWP.
     */
    @SerializedName("bwp")
    Bwp bwp;

    /**
     * The price defined in BYN.
     */
    @SerializedName("byn")
    Byn byn;

    /**
     * The price defined in BZD.
     */
    @SerializedName("bzd")
    Bzd bzd;

    /**
     * The price defined in CAD.
     */
    @SerializedName("cad")
    Cad cad;

    /**
     * The price defined in CDF.
     */
    @SerializedName("cdf")
    Cdf cdf;

    /**
     * The price defined in CHF.
     */
    @SerializedName("chf")
    Chf chf;

    /**
     * The price defined in CLP.
     */
    @SerializedName("clp")
    Clp clp;

    /**
     * The price defined in CNY.
     */
    @SerializedName("cny")
    Cny cny;

    /**
     * The price defined in COP.
     */
    @SerializedName("cop")
    Cop cop;

    /**
     * The price defined in CRC.
     */
    @SerializedName("crc")
    Crc crc;

    /**
     * The price defined in CVE.
     */
    @SerializedName("cve")
    Cve cve;

    /**
     * The price defined in CZK.
     */
    @SerializedName("czk")
    Czk czk;

    /**
     * The price defined in DJF.
     */
    @SerializedName("djf")
    Djf djf;

    /**
     * The price defined in DKK.
     */
    @SerializedName("dkk")
    Dkk dkk;

    /**
     * The price defined in DOP.
     */
    @SerializedName("dop")
    Dop dop;

    /**
     * The price defined in DZD.
     */
    @SerializedName("dzd")
    Dzd dzd;

    /**
     * The price defined in EGP.
     */
    @SerializedName("egp")
    Egp egp;

    /**
     * The price defined in ETB.
     */
    @SerializedName("etb")
    Etb etb;

    /**
     * The price defined in EUR.
     */
    @SerializedName("eur")
    Eur eur;

    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * The price defined in FJD.
     */
    @SerializedName("fjd")
    Fjd fjd;

    /**
     * The price defined in FKP.
     */
    @SerializedName("fkp")
    Fkp fkp;

    /**
     * The price defined in GBP.
     */
    @SerializedName("gbp")
    Gbp gbp;

    /**
     * The price defined in GEL.
     */
    @SerializedName("gel")
    Gel gel;

    /**
     * The price defined in GHS.
     */
    @SerializedName("ghs")
    Ghs ghs;

    /**
     * The price defined in GIP.
     */
    @SerializedName("gip")
    Gip gip;

    /**
     * The price defined in GMD.
     */
    @SerializedName("gmd")
    Gmd gmd;

    /**
     * The price defined in GNF.
     */
    @SerializedName("gnf")
    Gnf gnf;

    /**
     * The price defined in GTQ.
     */
    @SerializedName("gtq")
    Gtq gtq;

    /**
     * The price defined in GYD.
     */
    @SerializedName("gyd")
    Gyd gyd;

    /**
     * The price defined in HKD.
     */
    @SerializedName("hkd")
    Hkd hkd;

    /**
     * The price defined in HNL.
     */
    @SerializedName("hnl")
    Hnl hnl;

    /**
     * The price defined in HRK.
     */
    @SerializedName("hrk")
    Hrk hrk;

    /**
     * The price defined in HTG.
     */
    @SerializedName("htg")
    Htg htg;

    /**
     * The price defined in HUF.
     */
    @SerializedName("huf")
    Huf huf;

    /**
     * The price defined in IDR.
     */
    @SerializedName("idr")
    Idr idr;

    /**
     * The price defined in ILS.
     */
    @SerializedName("ils")
    Ils ils;

    /**
     * The price defined in INR.
     */
    @SerializedName("inr")
    Inr inr;

    /**
     * The price defined in ISK.
     */
    @SerializedName("isk")
    Isk isk;

    /**
     * The price defined in JMD.
     */
    @SerializedName("jmd")
    Jmd jmd;

    /**
     * The price defined in JOD.
     */
    @SerializedName("jod")
    Jod jod;

    /**
     * The price defined in JPY.
     */
    @SerializedName("jpy")
    Jpy jpy;

    /**
     * The price defined in KES.
     */
    @SerializedName("kes")
    Kes kes;

    /**
     * The price defined in KGS.
     */
    @SerializedName("kgs")
    Kgs kgs;

    /**
     * The price defined in KHR.
     */
    @SerializedName("khr")
    Khr khr;

    /**
     * The price defined in KMF.
     */
    @SerializedName("kmf")
    Kmf kmf;

    /**
     * The price defined in KRW.
     */
    @SerializedName("krw")
    Krw krw;

    /**
     * The price defined in KWD.
     */
    @SerializedName("kwd")
    Kwd kwd;

    /**
     * The price defined in KYD.
     */
    @SerializedName("kyd")
    Kyd kyd;

    /**
     * The price defined in KZT.
     */
    @SerializedName("kzt")
    Kzt kzt;

    /**
     * The price defined in LAK.
     */
    @SerializedName("lak")
    Lak lak;

    /**
     * The price defined in LBP.
     */
    @SerializedName("lbp")
    Lbp lbp;

    /**
     * The price defined in LKR.
     */
    @SerializedName("lkr")
    Lkr lkr;

    /**
     * The price defined in LRD.
     */
    @SerializedName("lrd")
    Lrd lrd;

    /**
     * The price defined in LSL.
     */
    @SerializedName("lsl")
    Lsl lsl;

    /**
     * The price defined in MAD.
     */
    @SerializedName("mad")
    Mad mad;

    /**
     * The price defined in MDL.
     */
    @SerializedName("mdl")
    Mdl mdl;

    /**
     * The price defined in MGA.
     */
    @SerializedName("mga")
    Mga mga;

    /**
     * The price defined in MKD.
     */
    @SerializedName("mkd")
    Mkd mkd;

    /**
     * The price defined in MMK.
     */
    @SerializedName("mmk")
    Mmk mmk;

    /**
     * The price defined in MNT.
     */
    @SerializedName("mnt")
    Mnt mnt;

    /**
     * The price defined in MOP.
     */
    @SerializedName("mop")
    Mop mop;

    /**
     * The price defined in MRO.
     */
    @SerializedName("mro")
    Mro mro;

    /**
     * The price defined in MUR.
     */
    @SerializedName("mur")
    Mur mur;

    /**
     * The price defined in MVR.
     */
    @SerializedName("mvr")
    Mvr mvr;

    /**
     * The price defined in MWK.
     */
    @SerializedName("mwk")
    Mwk mwk;

    /**
     * The price defined in MXN.
     */
    @SerializedName("mxn")
    Mxn mxn;

    /**
     * The price defined in MYR.
     */
    @SerializedName("myr")
    Myr myr;

    /**
     * The price defined in MZN.
     */
    @SerializedName("mzn")
    Mzn mzn;

    /**
     * The price defined in NAD.
     */
    @SerializedName("nad")
    Nad nad;

    /**
     * The price defined in NGN.
     */
    @SerializedName("ngn")
    Ngn ngn;

    /**
     * The price defined in NIO.
     */
    @SerializedName("nio")
    Nio nio;

    /**
     * The price defined in NOK.
     */
    @SerializedName("nok")
    Nok nok;

    /**
     * The price defined in NPR.
     */
    @SerializedName("npr")
    Npr npr;

    /**
     * The price defined in NZD.
     */
    @SerializedName("nzd")
    Nzd nzd;

    /**
     * The price defined in OMR.
     */
    @SerializedName("omr")
    Omr omr;

    /**
     * The price defined in PAB.
     */
    @SerializedName("pab")
    Pab pab;

    /**
     * The price defined in PEN.
     */
    @SerializedName("pen")
    Pen pen;

    /**
     * The price defined in PGK.
     */
    @SerializedName("pgk")
    Pgk pgk;

    /**
     * The price defined in PHP.
     */
    @SerializedName("php")
    Php php;

    /**
     * The price defined in PKR.
     */
    @SerializedName("pkr")
    Pkr pkr;

    /**
     * The price defined in PLN.
     */
    @SerializedName("pln")
    Pln pln;

    /**
     * The price defined in PYG.
     */
    @SerializedName("pyg")
    Pyg pyg;

    /**
     * The price defined in QAR.
     */
    @SerializedName("qar")
    Qar qar;

    /**
     * The price defined in RON.
     */
    @SerializedName("ron")
    Ron ron;

    /**
     * The price defined in RSD.
     */
    @SerializedName("rsd")
    Rsd rsd;

    /**
     * The price defined in RUB.
     */
    @SerializedName("rub")
    Rub rub;

    /**
     * The price defined in RWF.
     */
    @SerializedName("rwf")
    Rwf rwf;

    /**
     * The price defined in SAR.
     */
    @SerializedName("sar")
    Sar sar;

    /**
     * The price defined in SBD.
     */
    @SerializedName("sbd")
    Sbd sbd;

    /**
     * The price defined in SCR.
     */
    @SerializedName("scr")
    Scr scr;

    /**
     * The price defined in SEK.
     */
    @SerializedName("sek")
    Sek sek;

    /**
     * The price defined in SGD.
     */
    @SerializedName("sgd")
    Sgd sgd;

    /**
     * The price defined in SHP.
     */
    @SerializedName("shp")
    Shp shp;

    /**
     * The price defined in SLL.
     */
    @SerializedName("sll")
    Sll sll;

    /**
     * The price defined in SOS.
     */
    @SerializedName("sos")
    Sos sos;

    /**
     * The price defined in SRD.
     */
    @SerializedName("srd")
    Srd srd;

    /**
     * The price defined in STD.
     */
    @SerializedName("std")
    Std std;

    /**
     * The price defined in SZL.
     */
    @SerializedName("szl")
    Szl szl;

    /**
     * The price defined in THB.
     */
    @SerializedName("thb")
    Thb thb;

    /**
     * The price defined in TJS.
     */
    @SerializedName("tjs")
    Tjs tjs;

    /**
     * The price defined in TND.
     */
    @SerializedName("tnd")
    Tnd tnd;

    /**
     * The price defined in TOP.
     */
    @SerializedName("top")
    Top top;

    /**
     * The price defined in TRY.
     */
    @SerializedName("try")
    Try try;

    /**
     * The price defined in TTD.
     */
    @SerializedName("ttd")
    Ttd ttd;

    /**
     * The price defined in TWD.
     */
    @SerializedName("twd")
    Twd twd;

    /**
     * The price defined in TZS.
     */
    @SerializedName("tzs")
    Tzs tzs;

    /**
     * The price defined in UAH.
     */
    @SerializedName("uah")
    Uah uah;

    /**
     * The price defined in UGX.
     */
    @SerializedName("ugx")
    Ugx ugx;

    /**
     * The price defined in USD.
     */
    @SerializedName("usd")
    Usd usd;

    /**
     * The price defined in USDC.
     */
    @SerializedName("usdc")
    Usdc usdc;

    /**
     * The price defined in UYU.
     */
    @SerializedName("uyu")
    Uyu uyu;

    /**
     * The price defined in UZS.
     */
    @SerializedName("uzs")
    Uzs uzs;

    /**
     * The price defined in VND.
     */
    @SerializedName("vnd")
    Vnd vnd;

    /**
     * The price defined in VUV.
     */
    @SerializedName("vuv")
    Vuv vuv;

    /**
     * The price defined in WST.
     */
    @SerializedName("wst")
    Wst wst;

    /**
     * The price defined in XAF.
     */
    @SerializedName("xaf")
    Xaf xaf;

    /**
     * The price defined in XCD.
     */
    @SerializedName("xcd")
    Xcd xcd;

    /**
     * The price defined in XOF.
     */
    @SerializedName("xof")
    Xof xof;

    /**
     * The price defined in XPF.
     */
    @SerializedName("xpf")
    Xpf xpf;

    /**
     * The price defined in YER.
     */
    @SerializedName("yer")
    Yer yer;

    /**
     * The price defined in ZAR.
     */
    @SerializedName("zar")
    Zar zar;

    /**
     * The price defined in ZMW.
     */
    @SerializedName("zmw")
    Zmw zmw;

    private CurrencyOptions(
        Aed aed,
        Afn afn,
        All all,
        Amd amd,
        Ang ang,
        Aoa aoa,
        Ars ars,
        Aud aud,
        Awg awg,
        Azn azn,
        Bam bam,
        Bbd bbd,
        Bdt bdt,
        Bgn bgn,
        Bhd bhd,
        Bif bif,
        Bmd bmd,
        Bnd bnd,
        Bob bob,
        Brl brl,
        Bsd bsd,
        Btn btn,
        Bwp bwp,
        Byn byn,
        Bzd bzd,
        Cad cad,
        Cdf cdf,
        Chf chf,
        Clp clp,
        Cny cny,
        Cop cop,
        Crc crc,
        Cve cve,
        Czk czk,
        Djf djf,
        Dkk dkk,
        Dop dop,
        Dzd dzd,
        Egp egp,
        Etb etb,
        Eur eur,
        Map<String, Object> extraParams,
        Fjd fjd,
        Fkp fkp,
        Gbp gbp,
        Gel gel,
        Ghs ghs,
        Gip gip,
        Gmd gmd,
        Gnf gnf,
        Gtq gtq,
        Gyd gyd,
        Hkd hkd,
        Hnl hnl,
        Hrk hrk,
        Htg htg,
        Huf huf,
        Idr idr,
        Ils ils,
        Inr inr,
        Isk isk,
        Jmd jmd,
        Jod jod,
        Jpy jpy,
        Kes kes,
        Kgs kgs,
        Khr khr,
        Kmf kmf,
        Krw krw,
        Kwd kwd,
        Kyd kyd,
        Kzt kzt,
        Lak lak,
        Lbp lbp,
        Lkr lkr,
        Lrd lrd,
        Lsl lsl,
        Mad mad,
        Mdl mdl,
        Mga mga,
        Mkd mkd,
        Mmk mmk,
        Mnt mnt,
        Mop mop,
        Mro mro,
        Mur mur,
        Mvr mvr,
        Mwk mwk,
        Mxn mxn,
        Myr myr,
        Mzn mzn,
        Nad nad,
        Ngn ngn,
        Nio nio,
        Nok nok,
        Npr npr,
        Nzd nzd,
        Omr omr,
        Pab pab,
        Pen pen,
        Pgk pgk,
        Php php,
        Pkr pkr,
        Pln pln,
        Pyg pyg,
        Qar qar,
        Ron ron,
        Rsd rsd,
        Rub rub,
        Rwf rwf,
        Sar sar,
        Sbd sbd,
        Scr scr,
        Sek sek,
        Sgd sgd,
        Shp shp,
        Sll sll,
        Sos sos,
        Srd srd,
        Std std,
        Szl szl,
        Thb thb,
        Tjs tjs,
        Tnd tnd,
        Top top,
        Try try,
        Ttd ttd,
        Twd twd,
        Tzs tzs,
        Uah uah,
        Ugx ugx,
        Usd usd,
        Usdc usdc,
        Uyu uyu,
        Uzs uzs,
        Vnd vnd,
        Vuv vuv,
        Wst wst,
        Xaf xaf,
        Xcd xcd,
        Xof xof,
        Xpf xpf,
        Yer yer,
        Zar zar,
        Zmw zmw) {
      this.aed = aed;
      this.afn = afn;
      this.all = all;
      this.amd = amd;
      this.ang = ang;
      this.aoa = aoa;
      this.ars = ars;
      this.aud = aud;
      this.awg = awg;
      this.azn = azn;
      this.bam = bam;
      this.bbd = bbd;
      this.bdt = bdt;
      this.bgn = bgn;
      this.bhd = bhd;
      this.bif = bif;
      this.bmd = bmd;
      this.bnd = bnd;
      this.bob = bob;
      this.brl = brl;
      this.bsd = bsd;
      this.btn = btn;
      this.bwp = bwp;
      this.byn = byn;
      this.bzd = bzd;
      this.cad = cad;
      this.cdf = cdf;
      this.chf = chf;
      this.clp = clp;
      this.cny = cny;
      this.cop = cop;
      this.crc = crc;
      this.cve = cve;
      this.czk = czk;
      this.djf = djf;
      this.dkk = dkk;
      this.dop = dop;
      this.dzd = dzd;
      this.egp = egp;
      this.etb = etb;
      this.eur = eur;
      this.extraParams = extraParams;
      this.fjd = fjd;
      this.fkp = fkp;
      this.gbp = gbp;
      this.gel = gel;
      this.ghs = ghs;
      this.gip = gip;
      this.gmd = gmd;
      this.gnf = gnf;
      this.gtq = gtq;
      this.gyd = gyd;
      this.hkd = hkd;
      this.hnl = hnl;
      this.hrk = hrk;
      this.htg = htg;
      this.huf = huf;
      this.idr = idr;
      this.ils = ils;
      this.inr = inr;
      this.isk = isk;
      this.jmd = jmd;
      this.jod = jod;
      this.jpy = jpy;
      this.kes = kes;
      this.kgs = kgs;
      this.khr = khr;
      this.kmf = kmf;
      this.krw = krw;
      this.kwd = kwd;
      this.kyd = kyd;
      this.kzt = kzt;
      this.lak = lak;
      this.lbp = lbp;
      this.lkr = lkr;
      this.lrd = lrd;
      this.lsl = lsl;
      this.mad = mad;
      this.mdl = mdl;
      this.mga = mga;
      this.mkd = mkd;
      this.mmk = mmk;
      this.mnt = mnt;
      this.mop = mop;
      this.mro = mro;
      this.mur = mur;
      this.mvr = mvr;
      this.mwk = mwk;
      this.mxn = mxn;
      this.myr = myr;
      this.mzn = mzn;
      this.nad = nad;
      this.ngn = ngn;
      this.nio = nio;
      this.nok = nok;
      this.npr = npr;
      this.nzd = nzd;
      this.omr = omr;
      this.pab = pab;
      this.pen = pen;
      this.pgk = pgk;
      this.php = php;
      this.pkr = pkr;
      this.pln = pln;
      this.pyg = pyg;
      this.qar = qar;
      this.ron = ron;
      this.rsd = rsd;
      this.rub = rub;
      this.rwf = rwf;
      this.sar = sar;
      this.sbd = sbd;
      this.scr = scr;
      this.sek = sek;
      this.sgd = sgd;
      this.shp = shp;
      this.sll = sll;
      this.sos = sos;
      this.srd = srd;
      this.std = std;
      this.szl = szl;
      this.thb = thb;
      this.tjs = tjs;
      this.tnd = tnd;
      this.top = top;
      this.try = try;
      this.ttd = ttd;
      this.twd = twd;
      this.tzs = tzs;
      this.uah = uah;
      this.ugx = ugx;
      this.usd = usd;
      this.usdc = usdc;
      this.uyu = uyu;
      this.uzs = uzs;
      this.vnd = vnd;
      this.vuv = vuv;
      this.wst = wst;
      this.xaf = xaf;
      this.xcd = xcd;
      this.xof = xof;
      this.xpf = xpf;
      this.yer = yer;
      this.zar = zar;
      this.zmw = zmw;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Aed aed;

      private Afn afn;

      private All all;

      private Amd amd;

      private Ang ang;

      private Aoa aoa;

      private Ars ars;

      private Aud aud;

      private Awg awg;

      private Azn azn;

      private Bam bam;

      private Bbd bbd;

      private Bdt bdt;

      private Bgn bgn;

      private Bhd bhd;

      private Bif bif;

      private Bmd bmd;

      private Bnd bnd;

      private Bob bob;

      private Brl brl;

      private Bsd bsd;

      private Btn btn;

      private Bwp bwp;

      private Byn byn;

      private Bzd bzd;

      private Cad cad;

      private Cdf cdf;

      private Chf chf;

      private Clp clp;

      private Cny cny;

      private Cop cop;

      private Crc crc;

      private Cve cve;

      private Czk czk;

      private Djf djf;

      private Dkk dkk;

      private Dop dop;

      private Dzd dzd;

      private Egp egp;

      private Etb etb;

      private Eur eur;

      private Map<String, Object> extraParams;

      private Fjd fjd;

      private Fkp fkp;

      private Gbp gbp;

      private Gel gel;

      private Ghs ghs;

      private Gip gip;

      private Gmd gmd;

      private Gnf gnf;

      private Gtq gtq;

      private Gyd gyd;

      private Hkd hkd;

      private Hnl hnl;

      private Hrk hrk;

      private Htg htg;

      private Huf huf;

      private Idr idr;

      private Ils ils;

      private Inr inr;

      private Isk isk;

      private Jmd jmd;

      private Jod jod;

      private Jpy jpy;

      private Kes kes;

      private Kgs kgs;

      private Khr khr;

      private Kmf kmf;

      private Krw krw;

      private Kwd kwd;

      private Kyd kyd;

      private Kzt kzt;

      private Lak lak;

      private Lbp lbp;

      private Lkr lkr;

      private Lrd lrd;

      private Lsl lsl;

      private Mad mad;

      private Mdl mdl;

      private Mga mga;

      private Mkd mkd;

      private Mmk mmk;

      private Mnt mnt;

      private Mop mop;

      private Mro mro;

      private Mur mur;

      private Mvr mvr;

      private Mwk mwk;

      private Mxn mxn;

      private Myr myr;

      private Mzn mzn;

      private Nad nad;

      private Ngn ngn;

      private Nio nio;

      private Nok nok;

      private Npr npr;

      private Nzd nzd;

      private Omr omr;

      private Pab pab;

      private Pen pen;

      private Pgk pgk;

      private Php php;

      private Pkr pkr;

      private Pln pln;

      private Pyg pyg;

      private Qar qar;

      private Ron ron;

      private Rsd rsd;

      private Rub rub;

      private Rwf rwf;

      private Sar sar;

      private Sbd sbd;

      private Scr scr;

      private Sek sek;

      private Sgd sgd;

      private Shp shp;

      private Sll sll;

      private Sos sos;

      private Srd srd;

      private Std std;

      private Szl szl;

      private Thb thb;

      private Tjs tjs;

      private Tnd tnd;

      private Top top;

      private Try try;

      private Ttd ttd;

      private Twd twd;

      private Tzs tzs;

      private Uah uah;

      private Ugx ugx;

      private Usd usd;

      private Usdc usdc;

      private Uyu uyu;

      private Uzs uzs;

      private Vnd vnd;

      private Vuv vuv;

      private Wst wst;

      private Xaf xaf;

      private Xcd xcd;

      private Xof xof;

      private Xpf xpf;

      private Yer yer;

      private Zar zar;

      private Zmw zmw;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public CurrencyOptions build() {
        return new CurrencyOptions(
          this.aed,
          this.afn,
          this.all,
          this.amd,
          this.ang,
          this.aoa,
          this.ars,
          this.aud,
          this.awg,
          this.azn,
          this.bam,
          this.bbd,
          this.bdt,
          this.bgn,
          this.bhd,
          this.bif,
          this.bmd,
          this.bnd,
          this.bob,
          this.brl,
          this.bsd,
          this.btn,
          this.bwp,
          this.byn,
          this.bzd,
          this.cad,
          this.cdf,
          this.chf,
          this.clp,
          this.cny,
          this.cop,
          this.crc,
          this.cve,
          this.czk,
          this.djf,
          this.dkk,
          this.dop,
          this.dzd,
          this.egp,
          this.etb,
          this.eur,
          this.extraParams,
          this.fjd,
          this.fkp,
          this.gbp,
          this.gel,
          this.ghs,
          this.gip,
          this.gmd,
          this.gnf,
          this.gtq,
          this.gyd,
          this.hkd,
          this.hnl,
          this.hrk,
          this.htg,
          this.huf,
          this.idr,
          this.ils,
          this.inr,
          this.isk,
          this.jmd,
          this.jod,
          this.jpy,
          this.kes,
          this.kgs,
          this.khr,
          this.kmf,
          this.krw,
          this.kwd,
          this.kyd,
          this.kzt,
          this.lak,
          this.lbp,
          this.lkr,
          this.lrd,
          this.lsl,
          this.mad,
          this.mdl,
          this.mga,
          this.mkd,
          this.mmk,
          this.mnt,
          this.mop,
          this.mro,
          this.mur,
          this.mvr,
          this.mwk,
          this.mxn,
          this.myr,
          this.mzn,
          this.nad,
          this.ngn,
          this.nio,
          this.nok,
          this.npr,
          this.nzd,
          this.omr,
          this.pab,
          this.pen,
          this.pgk,
          this.php,
          this.pkr,
          this.pln,
          this.pyg,
          this.qar,
          this.ron,
          this.rsd,
          this.rub,
          this.rwf,
          this.sar,
          this.sbd,
          this.scr,
          this.sek,
          this.sgd,
          this.shp,
          this.sll,
          this.sos,
          this.srd,
          this.std,
          this.szl,
          this.thb,
          this.tjs,
          this.tnd,
          this.top,
          this.try,
          this.ttd,
          this.twd,
          this.tzs,
          this.uah,
          this.ugx,
          this.usd,
          this.usdc,
          this.uyu,
          this.uzs,
          this.vnd,
          this.vuv,
          this.wst,
          this.xaf,
          this.xcd,
          this.xof,
          this.xpf,
          this.yer,
          this.zar,
          this.zmw
        );
      }

      /**
       * The price defined in AED.
       */
      public Builder setAed(Aed aed) {
        this.aed = aed;
        return this;
      }

      /**
       * The price defined in AFN.
       */
      public Builder setAfn(Afn afn) {
        this.afn = afn;
        return this;
      }

      /**
       * The price defined in ALL.
       */
      public Builder setAll(All all) {
        this.all = all;
        return this;
      }

      /**
       * The price defined in AMD.
       */
      public Builder setAmd(Amd amd) {
        this.amd = amd;
        return this;
      }

      /**
       * The price defined in ANG.
       */
      public Builder setAng(Ang ang) {
        this.ang = ang;
        return this;
      }

      /**
       * The price defined in AOA.
       */
      public Builder setAoa(Aoa aoa) {
        this.aoa = aoa;
        return this;
      }

      /**
       * The price defined in ARS.
       */
      public Builder setArs(Ars ars) {
        this.ars = ars;
        return this;
      }

      /**
       * The price defined in AUD.
       */
      public Builder setAud(Aud aud) {
        this.aud = aud;
        return this;
      }

      /**
       * The price defined in AWG.
       */
      public Builder setAwg(Awg awg) {
        this.awg = awg;
        return this;
      }

      /**
       * The price defined in AZN.
       */
      public Builder setAzn(Azn azn) {
        this.azn = azn;
        return this;
      }

      /**
       * The price defined in BAM.
       */
      public Builder setBam(Bam bam) {
        this.bam = bam;
        return this;
      }

      /**
       * The price defined in BBD.
       */
      public Builder setBbd(Bbd bbd) {
        this.bbd = bbd;
        return this;
      }

      /**
       * The price defined in BDT.
       */
      public Builder setBdt(Bdt bdt) {
        this.bdt = bdt;
        return this;
      }

      /**
       * The price defined in BGN.
       */
      public Builder setBgn(Bgn bgn) {
        this.bgn = bgn;
        return this;
      }

      /**
       * The price defined in BHD.
       */
      public Builder setBhd(Bhd bhd) {
        this.bhd = bhd;
        return this;
      }

      /**
       * The price defined in BIF.
       */
      public Builder setBif(Bif bif) {
        this.bif = bif;
        return this;
      }

      /**
       * The price defined in BMD.
       */
      public Builder setBmd(Bmd bmd) {
        this.bmd = bmd;
        return this;
      }

      /**
       * The price defined in BND.
       */
      public Builder setBnd(Bnd bnd) {
        this.bnd = bnd;
        return this;
      }

      /**
       * The price defined in BOB.
       */
      public Builder setBob(Bob bob) {
        this.bob = bob;
        return this;
      }

      /**
       * The price defined in BRL.
       */
      public Builder setBrl(Brl brl) {
        this.brl = brl;
        return this;
      }

      /**
       * The price defined in BSD.
       */
      public Builder setBsd(Bsd bsd) {
        this.bsd = bsd;
        return this;
      }

      /**
       * The price defined in BTN.
       */
      public Builder setBtn(Btn btn) {
        this.btn = btn;
        return this;
      }

      /**
       * The price defined in BWP.
       */
      public Builder setBwp(Bwp bwp) {
        this.bwp = bwp;
        return this;
      }

      /**
       * The price defined in BYN.
       */
      public Builder setByn(Byn byn) {
        this.byn = byn;
        return this;
      }

      /**
       * The price defined in BZD.
       */
      public Builder setBzd(Bzd bzd) {
        this.bzd = bzd;
        return this;
      }

      /**
       * The price defined in CAD.
       */
      public Builder setCad(Cad cad) {
        this.cad = cad;
        return this;
      }

      /**
       * The price defined in CDF.
       */
      public Builder setCdf(Cdf cdf) {
        this.cdf = cdf;
        return this;
      }

      /**
       * The price defined in CHF.
       */
      public Builder setChf(Chf chf) {
        this.chf = chf;
        return this;
      }

      /**
       * The price defined in CLP.
       */
      public Builder setClp(Clp clp) {
        this.clp = clp;
        return this;
      }

      /**
       * The price defined in CNY.
       */
      public Builder setCny(Cny cny) {
        this.cny = cny;
        return this;
      }

      /**
       * The price defined in COP.
       */
      public Builder setCop(Cop cop) {
        this.cop = cop;
        return this;
      }

      /**
       * The price defined in CRC.
       */
      public Builder setCrc(Crc crc) {
        this.crc = crc;
        return this;
      }

      /**
       * The price defined in CVE.
       */
      public Builder setCve(Cve cve) {
        this.cve = cve;
        return this;
      }

      /**
       * The price defined in CZK.
       */
      public Builder setCzk(Czk czk) {
        this.czk = czk;
        return this;
      }

      /**
       * The price defined in DJF.
       */
      public Builder setDjf(Djf djf) {
        this.djf = djf;
        return this;
      }

      /**
       * The price defined in DKK.
       */
      public Builder setDkk(Dkk dkk) {
        this.dkk = dkk;
        return this;
      }

      /**
       * The price defined in DOP.
       */
      public Builder setDop(Dop dop) {
        this.dop = dop;
        return this;
      }

      /**
       * The price defined in DZD.
       */
      public Builder setDzd(Dzd dzd) {
        this.dzd = dzd;
        return this;
      }

      /**
       * The price defined in EGP.
       */
      public Builder setEgp(Egp egp) {
        this.egp = egp;
        return this;
      }

      /**
       * The price defined in ETB.
       */
      public Builder setEtb(Etb etb) {
        this.etb = etb;
        return this;
      }

      /**
       * The price defined in EUR.
       */
      public Builder setEur(Eur eur) {
        this.eur = eur;
        return this;
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * The price defined in FJD.
       */
      public Builder setFjd(Fjd fjd) {
        this.fjd = fjd;
        return this;
      }

      /**
       * The price defined in FKP.
       */
      public Builder setFkp(Fkp fkp) {
        this.fkp = fkp;
        return this;
      }

      /**
       * The price defined in GBP.
       */
      public Builder setGbp(Gbp gbp) {
        this.gbp = gbp;
        return this;
      }

      /**
       * The price defined in GEL.
       */
      public Builder setGel(Gel gel) {
        this.gel = gel;
        return this;
      }

      /**
       * The price defined in GHS.
       */
      public Builder setGhs(Ghs ghs) {
        this.ghs = ghs;
        return this;
      }

      /**
       * The price defined in GIP.
       */
      public Builder setGip(Gip gip) {
        this.gip = gip;
        return this;
      }

      /**
       * The price defined in GMD.
       */
      public Builder setGmd(Gmd gmd) {
        this.gmd = gmd;
        return this;
      }

      /**
       * The price defined in GNF.
       */
      public Builder setGnf(Gnf gnf) {
        this.gnf = gnf;
        return this;
      }

      /**
       * The price defined in GTQ.
       */
      public Builder setGtq(Gtq gtq) {
        this.gtq = gtq;
        return this;
      }

      /**
       * The price defined in GYD.
       */
      public Builder setGyd(Gyd gyd) {
        this.gyd = gyd;
        return this;
      }

      /**
       * The price defined in HKD.
       */
      public Builder setHkd(Hkd hkd) {
        this.hkd = hkd;
        return this;
      }

      /**
       * The price defined in HNL.
       */
      public Builder setHnl(Hnl hnl) {
        this.hnl = hnl;
        return this;
      }

      /**
       * The price defined in HRK.
       */
      public Builder setHrk(Hrk hrk) {
        this.hrk = hrk;
        return this;
      }

      /**
       * The price defined in HTG.
       */
      public Builder setHtg(Htg htg) {
        this.htg = htg;
        return this;
      }

      /**
       * The price defined in HUF.
       */
      public Builder setHuf(Huf huf) {
        this.huf = huf;
        return this;
      }

      /**
       * The price defined in IDR.
       */
      public Builder setIdr(Idr idr) {
        this.idr = idr;
        return this;
      }

      /**
       * The price defined in ILS.
       */
      public Builder setIls(Ils ils) {
        this.ils = ils;
        return this;
      }

      /**
       * The price defined in INR.
       */
      public Builder setInr(Inr inr) {
        this.inr = inr;
        return this;
      }

      /**
       * The price defined in ISK.
       */
      public Builder setIsk(Isk isk) {
        this.isk = isk;
        return this;
      }

      /**
       * The price defined in JMD.
       */
      public Builder setJmd(Jmd jmd) {
        this.jmd = jmd;
        return this;
      }

      /**
       * The price defined in JOD.
       */
      public Builder setJod(Jod jod) {
        this.jod = jod;
        return this;
      }

      /**
       * The price defined in JPY.
       */
      public Builder setJpy(Jpy jpy) {
        this.jpy = jpy;
        return this;
      }

      /**
       * The price defined in KES.
       */
      public Builder setKes(Kes kes) {
        this.kes = kes;
        return this;
      }

      /**
       * The price defined in KGS.
       */
      public Builder setKgs(Kgs kgs) {
        this.kgs = kgs;
        return this;
      }

      /**
       * The price defined in KHR.
       */
      public Builder setKhr(Khr khr) {
        this.khr = khr;
        return this;
      }

      /**
       * The price defined in KMF.
       */
      public Builder setKmf(Kmf kmf) {
        this.kmf = kmf;
        return this;
      }

      /**
       * The price defined in KRW.
       */
      public Builder setKrw(Krw krw) {
        this.krw = krw;
        return this;
      }

      /**
       * The price defined in KWD.
       */
      public Builder setKwd(Kwd kwd) {
        this.kwd = kwd;
        return this;
      }

      /**
       * The price defined in KYD.
       */
      public Builder setKyd(Kyd kyd) {
        this.kyd = kyd;
        return this;
      }

      /**
       * The price defined in KZT.
       */
      public Builder setKzt(Kzt kzt) {
        this.kzt = kzt;
        return this;
      }

      /**
       * The price defined in LAK.
       */
      public Builder setLak(Lak lak) {
        this.lak = lak;
        return this;
      }

      /**
       * The price defined in LBP.
       */
      public Builder setLbp(Lbp lbp) {
        this.lbp = lbp;
        return this;
      }

      /**
       * The price defined in LKR.
       */
      public Builder setLkr(Lkr lkr) {
        this.lkr = lkr;
        return this;
      }

      /**
       * The price defined in LRD.
       */
      public Builder setLrd(Lrd lrd) {
        this.lrd = lrd;
        return this;
      }

      /**
       * The price defined in LSL.
       */
      public Builder setLsl(Lsl lsl) {
        this.lsl = lsl;
        return this;
      }

      /**
       * The price defined in MAD.
       */
      public Builder setMad(Mad mad) {
        this.mad = mad;
        return this;
      }

      /**
       * The price defined in MDL.
       */
      public Builder setMdl(Mdl mdl) {
        this.mdl = mdl;
        return this;
      }

      /**
       * The price defined in MGA.
       */
      public Builder setMga(Mga mga) {
        this.mga = mga;
        return this;
      }

      /**
       * The price defined in MKD.
       */
      public Builder setMkd(Mkd mkd) {
        this.mkd = mkd;
        return this;
      }

      /**
       * The price defined in MMK.
       */
      public Builder setMmk(Mmk mmk) {
        this.mmk = mmk;
        return this;
      }

      /**
       * The price defined in MNT.
       */
      public Builder setMnt(Mnt mnt) {
        this.mnt = mnt;
        return this;
      }

      /**
       * The price defined in MOP.
       */
      public Builder setMop(Mop mop) {
        this.mop = mop;
        return this;
      }

      /**
       * The price defined in MRO.
       */
      public Builder setMro(Mro mro) {
        this.mro = mro;
        return this;
      }

      /**
       * The price defined in MUR.
       */
      public Builder setMur(Mur mur) {
        this.mur = mur;
        return this;
      }

      /**
       * The price defined in MVR.
       */
      public Builder setMvr(Mvr mvr) {
        this.mvr = mvr;
        return this;
      }

      /**
       * The price defined in MWK.
       */
      public Builder setMwk(Mwk mwk) {
        this.mwk = mwk;
        return this;
      }

      /**
       * The price defined in MXN.
       */
      public Builder setMxn(Mxn mxn) {
        this.mxn = mxn;
        return this;
      }

      /**
       * The price defined in MYR.
       */
      public Builder setMyr(Myr myr) {
        this.myr = myr;
        return this;
      }

      /**
       * The price defined in MZN.
       */
      public Builder setMzn(Mzn mzn) {
        this.mzn = mzn;
        return this;
      }

      /**
       * The price defined in NAD.
       */
      public Builder setNad(Nad nad) {
        this.nad = nad;
        return this;
      }

      /**
       * The price defined in NGN.
       */
      public Builder setNgn(Ngn ngn) {
        this.ngn = ngn;
        return this;
      }

      /**
       * The price defined in NIO.
       */
      public Builder setNio(Nio nio) {
        this.nio = nio;
        return this;
      }

      /**
       * The price defined in NOK.
       */
      public Builder setNok(Nok nok) {
        this.nok = nok;
        return this;
      }

      /**
       * The price defined in NPR.
       */
      public Builder setNpr(Npr npr) {
        this.npr = npr;
        return this;
      }

      /**
       * The price defined in NZD.
       */
      public Builder setNzd(Nzd nzd) {
        this.nzd = nzd;
        return this;
      }

      /**
       * The price defined in OMR.
       */
      public Builder setOmr(Omr omr) {
        this.omr = omr;
        return this;
      }

      /**
       * The price defined in PAB.
       */
      public Builder setPab(Pab pab) {
        this.pab = pab;
        return this;
      }

      /**
       * The price defined in PEN.
       */
      public Builder setPen(Pen pen) {
        this.pen = pen;
        return this;
      }

      /**
       * The price defined in PGK.
       */
      public Builder setPgk(Pgk pgk) {
        this.pgk = pgk;
        return this;
      }

      /**
       * The price defined in PHP.
       */
      public Builder setPhp(Php php) {
        this.php = php;
        return this;
      }

      /**
       * The price defined in PKR.
       */
      public Builder setPkr(Pkr pkr) {
        this.pkr = pkr;
        return this;
      }

      /**
       * The price defined in PLN.
       */
      public Builder setPln(Pln pln) {
        this.pln = pln;
        return this;
      }

      /**
       * The price defined in PYG.
       */
      public Builder setPyg(Pyg pyg) {
        this.pyg = pyg;
        return this;
      }

      /**
       * The price defined in QAR.
       */
      public Builder setQar(Qar qar) {
        this.qar = qar;
        return this;
      }

      /**
       * The price defined in RON.
       */
      public Builder setRon(Ron ron) {
        this.ron = ron;
        return this;
      }

      /**
       * The price defined in RSD.
       */
      public Builder setRsd(Rsd rsd) {
        this.rsd = rsd;
        return this;
      }

      /**
       * The price defined in RUB.
       */
      public Builder setRub(Rub rub) {
        this.rub = rub;
        return this;
      }

      /**
       * The price defined in RWF.
       */
      public Builder setRwf(Rwf rwf) {
        this.rwf = rwf;
        return this;
      }

      /**
       * The price defined in SAR.
       */
      public Builder setSar(Sar sar) {
        this.sar = sar;
        return this;
      }

      /**
       * The price defined in SBD.
       */
      public Builder setSbd(Sbd sbd) {
        this.sbd = sbd;
        return this;
      }

      /**
       * The price defined in SCR.
       */
      public Builder setScr(Scr scr) {
        this.scr = scr;
        return this;
      }

      /**
       * The price defined in SEK.
       */
      public Builder setSek(Sek sek) {
        this.sek = sek;
        return this;
      }

      /**
       * The price defined in SGD.
       */
      public Builder setSgd(Sgd sgd) {
        this.sgd = sgd;
        return this;
      }

      /**
       * The price defined in SHP.
       */
      public Builder setShp(Shp shp) {
        this.shp = shp;
        return this;
      }

      /**
       * The price defined in SLL.
       */
      public Builder setSll(Sll sll) {
        this.sll = sll;
        return this;
      }

      /**
       * The price defined in SOS.
       */
      public Builder setSos(Sos sos) {
        this.sos = sos;
        return this;
      }

      /**
       * The price defined in SRD.
       */
      public Builder setSrd(Srd srd) {
        this.srd = srd;
        return this;
      }

      /**
       * The price defined in STD.
       */
      public Builder setStd(Std std) {
        this.std = std;
        return this;
      }

      /**
       * The price defined in SZL.
       */
      public Builder setSzl(Szl szl) {
        this.szl = szl;
        return this;
      }

      /**
       * The price defined in THB.
       */
      public Builder setThb(Thb thb) {
        this.thb = thb;
        return this;
      }

      /**
       * The price defined in TJS.
       */
      public Builder setTjs(Tjs tjs) {
        this.tjs = tjs;
        return this;
      }

      /**
       * The price defined in TND.
       */
      public Builder setTnd(Tnd tnd) {
        this.tnd = tnd;
        return this;
      }

      /**
       * The price defined in TOP.
       */
      public Builder setTop(Top top) {
        this.top = top;
        return this;
      }

      /**
       * The price defined in TRY.
       */
      public Builder setTry(Try try) {
        this.try = try;
        return this;
      }

      /**
       * The price defined in TTD.
       */
      public Builder setTtd(Ttd ttd) {
        this.ttd = ttd;
        return this;
      }

      /**
       * The price defined in TWD.
       */
      public Builder setTwd(Twd twd) {
        this.twd = twd;
        return this;
      }

      /**
       * The price defined in TZS.
       */
      public Builder setTzs(Tzs tzs) {
        this.tzs = tzs;
        return this;
      }

      /**
       * The price defined in UAH.
       */
      public Builder setUah(Uah uah) {
        this.uah = uah;
        return this;
      }

      /**
       * The price defined in UGX.
       */
      public Builder setUgx(Ugx ugx) {
        this.ugx = ugx;
        return this;
      }

      /**
       * The price defined in USD.
       */
      public Builder setUsd(Usd usd) {
        this.usd = usd;
        return this;
      }

      /**
       * The price defined in USDC.
       */
      public Builder setUsdc(Usdc usdc) {
        this.usdc = usdc;
        return this;
      }

      /**
       * The price defined in UYU.
       */
      public Builder setUyu(Uyu uyu) {
        this.uyu = uyu;
        return this;
      }

      /**
       * The price defined in UZS.
       */
      public Builder setUzs(Uzs uzs) {
        this.uzs = uzs;
        return this;
      }

      /**
       * The price defined in VND.
       */
      public Builder setVnd(Vnd vnd) {
        this.vnd = vnd;
        return this;
      }

      /**
       * The price defined in VUV.
       */
      public Builder setVuv(Vuv vuv) {
        this.vuv = vuv;
        return this;
      }

      /**
       * The price defined in WST.
       */
      public Builder setWst(Wst wst) {
        this.wst = wst;
        return this;
      }

      /**
       * The price defined in XAF.
       */
      public Builder setXaf(Xaf xaf) {
        this.xaf = xaf;
        return this;
      }

      /**
       * The price defined in XCD.
       */
      public Builder setXcd(Xcd xcd) {
        this.xcd = xcd;
        return this;
      }

      /**
       * The price defined in XOF.
       */
      public Builder setXof(Xof xof) {
        this.xof = xof;
        return this;
      }

      /**
       * The price defined in XPF.
       */
      public Builder setXpf(Xpf xpf) {
        this.xpf = xpf;
        return this;
      }

      /**
       * The price defined in YER.
       */
      public Builder setYer(Yer yer) {
        this.yer = yer;
        return this;
      }

      /**
       * The price defined in ZAR.
       */
      public Builder setZar(Zar zar) {
        this.zar = zar;
        return this;
      }

      /**
       * The price defined in ZMW.
       */
      public Builder setZmw(Zmw zmw) {
        this.zmw = zmw;
        return this;
      }
    }
    @Getter
    public static class Aed {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Aed(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Aed build() {
          return new Aed(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aed#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aed#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aed.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Afn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Afn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Afn build() {
          return new Afn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Afn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Afn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Afn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class All {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private All(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public All build() {
          return new All(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.All#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.All#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.All.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Amd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Amd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Amd build() {
          return new Amd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Amd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Amd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Amd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ang {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ang(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ang build() {
          return new Ang(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ang#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ang#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ang.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Aoa {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Aoa(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Aoa build() {
          return new Aoa(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aoa#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aoa#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aoa.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ars {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ars(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ars build() {
          return new Ars(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ars#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ars#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ars.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Aud {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Aud(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Aud build() {
          return new Aud(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aud#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Aud#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Aud.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Awg {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Awg(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Awg build() {
          return new Awg(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Awg#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Awg#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Awg.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Azn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Azn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Azn build() {
          return new Azn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Azn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Azn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Azn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bam {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bam(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bam build() {
          return new Bam(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bam#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bam#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bam.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bbd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bbd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bbd build() {
          return new Bbd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bbd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bbd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bbd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bdt {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bdt(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bdt build() {
          return new Bdt(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bdt#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bdt#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bdt.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bgn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bgn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bgn build() {
          return new Bgn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bgn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bgn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bgn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bhd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bhd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bhd build() {
          return new Bhd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bhd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bhd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bhd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bif {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bif(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bif build() {
          return new Bif(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bif#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bif#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bif.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bmd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bmd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bmd build() {
          return new Bmd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bmd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bmd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bmd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bnd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bnd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bnd build() {
          return new Bnd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bnd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bnd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bnd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bob {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bob(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bob build() {
          return new Bob(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bob#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bob#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bob.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Brl {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Brl(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Brl build() {
          return new Brl(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Brl#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Brl#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Brl.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bsd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bsd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bsd build() {
          return new Bsd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bsd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bsd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bsd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Btn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Btn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Btn build() {
          return new Btn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Btn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Btn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Btn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bwp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bwp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bwp build() {
          return new Bwp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bwp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bwp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bwp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Byn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Byn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Byn build() {
          return new Byn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Byn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Byn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Byn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Bzd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Bzd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Bzd build() {
          return new Bzd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bzd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Bzd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Bzd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Cad {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Cad(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Cad build() {
          return new Cad(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cad#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cad#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cad.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Cdf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Cdf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Cdf build() {
          return new Cdf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cdf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cdf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cdf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Chf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Chf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Chf build() {
          return new Chf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Chf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Chf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Chf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Clp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Clp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Clp build() {
          return new Clp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Clp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Clp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Clp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Cny {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Cny(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Cny build() {
          return new Cny(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cny#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cny#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cny.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Cop {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Cop(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Cop build() {
          return new Cop(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cop#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cop#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cop.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Crc {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Crc(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Crc build() {
          return new Crc(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Crc#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Crc#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Crc.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Cve {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Cve(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Cve build() {
          return new Cve(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cve#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Cve#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Cve.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Czk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Czk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Czk build() {
          return new Czk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Czk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Czk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Czk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Djf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Djf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Djf build() {
          return new Djf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Djf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Djf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Djf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Dkk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Dkk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Dkk build() {
          return new Dkk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dkk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dkk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dkk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Dop {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Dop(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Dop build() {
          return new Dop(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dop#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dop#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dop.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Dzd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Dzd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Dzd build() {
          return new Dzd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dzd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Dzd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Dzd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Egp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Egp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Egp build() {
          return new Egp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Egp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Egp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Egp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Etb {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Etb(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Etb build() {
          return new Etb(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Etb#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Etb#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Etb.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Eur {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Eur(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Eur build() {
          return new Eur(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Eur#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Eur#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Eur.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Fjd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Fjd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Fjd build() {
          return new Fjd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Fjd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Fjd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fjd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Fkp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Fkp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Fkp build() {
          return new Fkp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Fkp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Fkp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Fkp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gbp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gbp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gbp build() {
          return new Gbp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gbp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gbp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gbp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gel {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gel(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gel build() {
          return new Gel(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gel#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gel#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gel.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ghs {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ghs(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ghs build() {
          return new Ghs(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ghs#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ghs#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ghs.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gip {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gip(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gip build() {
          return new Gip(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gip#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gip#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gip.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gmd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gmd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gmd build() {
          return new Gmd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gmd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gmd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gmd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gnf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gnf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gnf build() {
          return new Gnf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gnf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gnf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gnf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gtq {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gtq(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gtq build() {
          return new Gtq(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gtq#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gtq#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gtq.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Gyd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Gyd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Gyd build() {
          return new Gyd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gyd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Gyd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Gyd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Hkd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Hkd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Hkd build() {
          return new Hkd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hkd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hkd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hkd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Hnl {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Hnl(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Hnl build() {
          return new Hnl(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hnl#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hnl#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hnl.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Hrk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Hrk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Hrk build() {
          return new Hrk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hrk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Hrk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Hrk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Htg {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Htg(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Htg build() {
          return new Htg(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Htg#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Htg#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Htg.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Huf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Huf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Huf build() {
          return new Huf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Huf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Huf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Huf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Idr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Idr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Idr build() {
          return new Idr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Idr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Idr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Idr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ils {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ils(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ils build() {
          return new Ils(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ils#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ils#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ils.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Inr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Inr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Inr build() {
          return new Inr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Inr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Inr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Inr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Isk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Isk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Isk build() {
          return new Isk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Isk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Isk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Isk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Jmd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Jmd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Jmd build() {
          return new Jmd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jmd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jmd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jmd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Jod {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Jod(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Jod build() {
          return new Jod(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jod#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jod#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jod.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Jpy {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Jpy(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Jpy build() {
          return new Jpy(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jpy#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Jpy#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Jpy.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kes {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kes(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kes build() {
          return new Kes(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kes#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kes#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kes.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kgs {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kgs(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kgs build() {
          return new Kgs(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kgs#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kgs#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kgs.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Khr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Khr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Khr build() {
          return new Khr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Khr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Khr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Khr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kmf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kmf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kmf build() {
          return new Kmf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kmf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kmf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kmf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Krw {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Krw(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Krw build() {
          return new Krw(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Krw#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Krw#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Krw.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kwd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kwd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kwd build() {
          return new Kwd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kwd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kwd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kwd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kyd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kyd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kyd build() {
          return new Kyd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kyd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kyd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kyd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Kzt {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Kzt(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Kzt build() {
          return new Kzt(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kzt#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Kzt#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Kzt.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Lak {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Lak(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Lak build() {
          return new Lak(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lak#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lak#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lak.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Lbp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Lbp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Lbp build() {
          return new Lbp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lbp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lbp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lbp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Lkr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Lkr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Lkr build() {
          return new Lkr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lkr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lkr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lkr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Lrd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Lrd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Lrd build() {
          return new Lrd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lrd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lrd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lrd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Lsl {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Lsl(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Lsl build() {
          return new Lsl(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lsl#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Lsl#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Lsl.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mad {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mad(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mad build() {
          return new Mad(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mad#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mad#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mad.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mdl {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mdl(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mdl build() {
          return new Mdl(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mdl#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mdl#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mdl.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mga {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mga(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mga build() {
          return new Mga(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mga#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mga#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mga.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mkd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mkd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mkd build() {
          return new Mkd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mkd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mkd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mkd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mmk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mmk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mmk build() {
          return new Mmk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mmk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mmk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mmk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mnt {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mnt(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mnt build() {
          return new Mnt(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mnt#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mnt#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mnt.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mop {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mop(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mop build() {
          return new Mop(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mop#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mop#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mop.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mro {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mro(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mro build() {
          return new Mro(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mro#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mro#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mro.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mur {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mur(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mur build() {
          return new Mur(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mur#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mur#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mur.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mvr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mvr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mvr build() {
          return new Mvr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mvr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mvr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mvr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mwk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mwk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mwk build() {
          return new Mwk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mwk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mwk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mwk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mxn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mxn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mxn build() {
          return new Mxn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mxn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mxn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mxn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Myr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Myr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Myr build() {
          return new Myr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Myr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Myr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Myr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Mzn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Mzn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Mzn build() {
          return new Mzn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mzn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Mzn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Mzn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Nad {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Nad(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Nad build() {
          return new Nad(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nad#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nad#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nad.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ngn {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ngn(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ngn build() {
          return new Ngn(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ngn#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ngn#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ngn.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Nio {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Nio(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Nio build() {
          return new Nio(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nio#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nio#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nio.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Nok {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Nok(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Nok build() {
          return new Nok(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nok#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nok#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nok.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Npr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Npr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Npr build() {
          return new Npr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Npr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Npr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Npr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Nzd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Nzd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Nzd build() {
          return new Nzd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nzd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Nzd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Nzd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Omr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Omr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Omr build() {
          return new Omr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Omr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Omr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Omr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pab {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pab(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pab build() {
          return new Pab(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pab#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pab#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pab.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pen {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pen(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pen build() {
          return new Pen(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pen#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pen#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pen.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pgk {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pgk(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pgk build() {
          return new Pgk(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pgk#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pgk#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pgk.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Php {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Php(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Php build() {
          return new Php(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Php#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Php#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Php.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pkr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pkr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pkr build() {
          return new Pkr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pkr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pkr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pkr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pln {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pln(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pln build() {
          return new Pln(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pln#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pln#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pln.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Pyg {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Pyg(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Pyg build() {
          return new Pyg(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pyg#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Pyg#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Pyg.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Qar {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Qar(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Qar build() {
          return new Qar(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Qar#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Qar#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Qar.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ron {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ron(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ron build() {
          return new Ron(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ron#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ron#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ron.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Rsd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Rsd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Rsd build() {
          return new Rsd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rsd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rsd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rsd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Rub {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Rub(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Rub build() {
          return new Rub(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rub#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rub#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rub.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Rwf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Rwf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Rwf build() {
          return new Rwf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rwf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Rwf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Rwf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sar {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sar(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sar build() {
          return new Sar(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sar#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sar#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sar.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sbd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sbd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sbd build() {
          return new Sbd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sbd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sbd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sbd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Scr {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Scr(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Scr build() {
          return new Scr(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Scr#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Scr#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Scr.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sek {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sek(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sek build() {
          return new Sek(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sek#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sek#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sek.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sgd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sgd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sgd build() {
          return new Sgd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sgd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sgd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sgd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Shp {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Shp(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Shp build() {
          return new Shp(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Shp#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Shp#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Shp.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sll {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sll(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sll build() {
          return new Sll(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sll#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sll#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sll.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Sos {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Sos(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Sos build() {
          return new Sos(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sos#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Sos#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Sos.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Srd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Srd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Srd build() {
          return new Srd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Srd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Srd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Srd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Std {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Std(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Std build() {
          return new Std(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Std#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Std#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Std.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Szl {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Szl(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Szl build() {
          return new Szl(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Szl#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Szl#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Szl.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Thb {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Thb(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Thb build() {
          return new Thb(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Thb#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Thb#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Thb.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Tjs {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Tjs(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Tjs build() {
          return new Tjs(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tjs#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tjs#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tjs.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Tnd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Tnd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Tnd build() {
          return new Tnd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tnd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tnd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tnd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Top {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Top(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Top build() {
          return new Top(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Top#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Top#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Top.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Try {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Try(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Try build() {
          return new Try(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Try#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Try#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Try.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ttd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ttd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ttd build() {
          return new Ttd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ttd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ttd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ttd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Twd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Twd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Twd build() {
          return new Twd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Twd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Twd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Twd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Tzs {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Tzs(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Tzs build() {
          return new Tzs(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tzs#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Tzs#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Tzs.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Uah {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Uah(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Uah build() {
          return new Uah(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uah#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uah#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uah.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Ugx {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Ugx(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Ugx build() {
          return new Ugx(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ugx#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Ugx#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Ugx.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Usd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Usd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Usd build() {
          return new Usd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Usd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Usd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Usdc {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Usdc(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Usdc build() {
          return new Usdc(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Usdc#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Usdc#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Usdc.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Uyu {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Uyu(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Uyu build() {
          return new Uyu(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uyu#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uyu#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uyu.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Uzs {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Uzs(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Uzs build() {
          return new Uzs(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uzs#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Uzs#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Uzs.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Vnd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Vnd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Vnd build() {
          return new Vnd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Vnd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Vnd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vnd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Vuv {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Vuv(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Vuv build() {
          return new Vuv(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Vuv#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Vuv#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Vuv.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Wst {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Wst(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Wst build() {
          return new Wst(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Wst#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Wst#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Wst.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Xaf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Xaf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Xaf build() {
          return new Xaf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xaf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xaf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xaf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Xcd {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Xcd(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Xcd build() {
          return new Xcd(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xcd#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xcd#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xcd.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Xof {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Xof(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Xof build() {
          return new Xof(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xof#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xof#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xof.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Xpf {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Xpf(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Xpf build() {
          return new Xpf(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xpf#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Xpf#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Xpf.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Yer {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Yer(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Yer build() {
          return new Yer(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Yer#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Yer#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Yer.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Zar {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Zar(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Zar build() {
          return new Zar(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Zar#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Zar#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zar.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
    @Getter
    public static class Zmw {
      /**
       * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
       */
      @SerializedName("custom_unit_amount")
      CustomUnitAmount customUnitAmount;

      /**
       * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
       */
      @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
      Map<String, Object> extraParams;

      /**
       * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
       */
      @SerializedName("tax_behavior")
      TaxBehavior taxBehavior;

      /**
       * Each element represents a pricing tier. This parameter requires {@code billing_scheme} to be set to {@code tiered}. See also the documentation for {@code billing_scheme}.
       */
      @SerializedName("tiers")
      List<Tier> tiers;

      /**
       * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
       */
      @SerializedName("unit_amount")
      Long unitAmount;

      /**
       * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
       */
      @SerializedName("unit_amount_decimal")
      Object unitAmountDecimal;

      private Zmw(
          CustomUnitAmount customUnitAmount,
          Map<String, Object> extraParams,
          TaxBehavior taxBehavior,
          List<Tier> tiers,
          Long unitAmount,
          Object unitAmountDecimal) {
        this.customUnitAmount = customUnitAmount;
        this.extraParams = extraParams;
        this.taxBehavior = taxBehavior;
        this.tiers = tiers;
        this.unitAmount = unitAmount;
        this.unitAmountDecimal = unitAmountDecimal;
      }
      public static Builder builder() {
        return new Builder();
      }
      public static class Builder {
        private CustomUnitAmount customUnitAmount;

        private Map<String, Object> extraParams;

        private TaxBehavior taxBehavior;

        private List<Tier> tiers;

        private Long unitAmount;

        private Object unitAmountDecimal;

        /**
         * Finalize and obtain parameter instance from this builder.
         */
        public Zmw build() {
          return new Zmw(
            this.customUnitAmount,
            this.extraParams,
            this.taxBehavior,
            this.tiers,
            this.unitAmount,
            this.unitAmountDecimal
          );
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        public Builder setCustomUnitAmount(CustomUnitAmount customUnitAmount) {
          this.customUnitAmount = customUnitAmount;
          return this;
        }

        /**
         * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw#extraParams} for the field documentation.
         */
        public Builder putExtraParam(String key, Object value) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.put(key, value);
          return this;
        }

        /**
         * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw#extraParams} for the field documentation.
         */
        public Builder putAllExtraParam(Map<String, Object> map) {
          if (this.extraParams == null) {
            this.extraParams = new HashMap<>();
          }
          this.extraParams.putAll(map);
          return this;
        }

        /**
         * Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of {@code inclusive}, {@code exclusive}, or {@code unspecified}. Once specified as either {@code inclusive} or {@code exclusive}, it cannot be changed.
         */
        public Builder setTaxBehavior(TaxBehavior taxBehavior) {
          this.taxBehavior = taxBehavior;
          return this;
        }

        /**
         * Add an element to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Zmw#tiers} for the field documentation.
         */
        public Builder addTier(Tier element) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.add(element);
          return this;
        }

        /**
         * Add all elements to `tiers` list. A list is initialized for the first `add/addAll` call, and subsequent calls adds additional elements to the original list. See {@link PriceUpdateParams.CurrencyOptions.Zmw#tiers} for the field documentation.
         */
        public Builder addAllTier(List<Tier> elements) {
          if (this.tiers == null) {
            this.tiers = new ArrayList<>();
          }
          this.tiers.addAll(elements);
          return this;
        }

        /**
         * A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
         */
        public Builder setUnitAmount(Long unitAmount) {
          this.unitAmount = unitAmount;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
          this.unitAmountDecimal = unitAmountDecimal;
          return this;
        }
      }
      @Getter
      public static class CustomUnitAmount {
        /**
         * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
         */
        @SerializedName("enabled")
        Boolean enabled;

        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The maximum unit amount the customer can specify for this item.
         */
        @SerializedName("maximum")
        Long maximum;

        /**
         * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
         */
        @SerializedName("minimum")
        Long minimum;

        /**
         * The starting unit amount which can be updated by the customer.
         */
        @SerializedName("preset")
        Long preset;

        private CustomUnitAmount(
            Boolean enabled,
            Map<String, Object> extraParams,
            Long maximum,
            Long minimum,
            Long preset) {
          this.enabled = enabled;
          this.extraParams = extraParams;
          this.maximum = maximum;
          this.minimum = minimum;
          this.preset = preset;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Boolean enabled;

          private Map<String, Object> extraParams;

          private Long maximum;

          private Long minimum;

          private Long preset;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public CustomUnitAmount build() {
            return new CustomUnitAmount(
              this.enabled,
              this.extraParams,
              this.maximum,
              this.minimum,
              this.preset
            );
          }

          /**
           * Pass in {@code true} to enable {@code custom_unit_amount}, otherwise omit {@code custom_unit_amount}.
           */
          public Builder setEnabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw.CustomUnitAmount#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The maximum unit amount the customer can specify for this item.
           */
          public Builder setMaximum(Long maximum) {
            this.maximum = maximum;
            return this;
          }

          /**
           * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
           */
          public Builder setMinimum(Long minimum) {
            this.minimum = minimum;
            return this;
          }

          /**
           * The starting unit amount which can be updated by the customer.
           */
          public Builder setPreset(Long preset) {
            this.preset = preset;
            return this;
          }
        }
      }
      @Getter
      public static class Tier {
        /**
         * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
         */
        @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
        Map<String, Object> extraParams;

        /**
         * The flat billing amount for an entire tier, regardless of the number of units in the tier.
         */
        @SerializedName("flat_amount")
        Long flatAmount;

        /**
         * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
         */
        @SerializedName("flat_amount_decimal")
        Object flatAmountDecimal;

        /**
         * The per unit billing amount for each individual unit for which this tier applies.
         */
        @SerializedName("unit_amount")
        Long unitAmount;

        /**
         * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
         */
        @SerializedName("unit_amount_decimal")
        Object unitAmountDecimal;

        /**
         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
         */
        @SerializedName("up_to")
        Object upTo;

        private Tier(
            Map<String, Object> extraParams,
            Long flatAmount,
            Object flatAmountDecimal,
            Long unitAmount,
            Object unitAmountDecimal,
            Object upTo) {
          this.extraParams = extraParams;
          this.flatAmount = flatAmount;
          this.flatAmountDecimal = flatAmountDecimal;
          this.unitAmount = unitAmount;
          this.unitAmountDecimal = unitAmountDecimal;
          this.upTo = upTo;
        }
        public static Builder builder() {
          return new Builder();
        }
        public static class Builder {
          private Map<String, Object> extraParams;

          private Long flatAmount;

          private Object flatAmountDecimal;

          private Long unitAmount;

          private Object unitAmountDecimal;

          private Object upTo;

          /**
           * Finalize and obtain parameter instance from this builder.
           */
          public Tier build() {
            return new Tier(
              this.extraParams,
              this.flatAmount,
              this.flatAmountDecimal,
              this.unitAmount,
              this.unitAmountDecimal,
              this.upTo
            );
          }

          /**
           * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw.Tier#extraParams} for the field documentation.
           */
          public Builder putExtraParam(String key, Object value) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.put(key, value);
            return this;
          }

          /**
           * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.CurrencyOptions.Zmw.Tier#extraParams} for the field documentation.
           */
          public Builder putAllExtraParam(Map<String, Object> map) {
            if (this.extraParams == null) {
              this.extraParams = new HashMap<>();
            }
            this.extraParams.putAll(map);
            return this;
          }

          /**
           * The flat billing amount for an entire tier, regardless of the number of units in the tier.
           */
          public Builder setFlatAmount(Long flatAmount) {
            this.flatAmount = flatAmount;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(BigDecimal flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * Same as {@code flat_amount}, but accepts a decimal value representing an integer in the minor units of the currency. Only one of {@code flat_amount} and {@code flat_amount_decimal} can be set.
           */
          public Builder setFlatAmountDecimal(EmptyParam flatAmountDecimal) {
            this.flatAmountDecimal = flatAmountDecimal;
            return this;
          }

          /**
           * The per unit billing amount for each individual unit for which this tier applies.
           */
          public Builder setUnitAmount(Long unitAmount) {
            this.unitAmount = unitAmount;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(BigDecimal unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Same as {@code unit_amount}, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of {@code unit_amount} and {@code unit_amount_decimal} can be set.
           */
          public Builder setUnitAmountDecimal(EmptyParam unitAmountDecimal) {
            this.unitAmountDecimal = unitAmountDecimal;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(UpTo upTo) {
            this.upTo = upTo;
            return this;
          }

          /**
           * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use {@code inf} to define a fallback tier.
           */
          public Builder setUpTo(Long upTo) {
            this.upTo = upTo;
            return this;
          }
        }
        public enum UpTo implements ApiRequestParams.EnumParam {
          @SerializedName("inf")
          INF("inf");
          @Getter(onMethod_ = {@Override})
          private final String value;
          UpTo(String value) {
            this.value = value;
          }
        }
      }
      public enum TaxBehavior implements ApiRequestParams.EnumParam {
        @SerializedName("exclusive")
        EXCLUSIVE("exclusive"),

        @SerializedName("inclusive")
        INCLUSIVE("inclusive"),

        @SerializedName("unspecified")
        UNSPECIFIED("unspecified");
        @Getter(onMethod_ = {@Override})
        private final String value;
        TaxBehavior(String value) {
          this.value = value;
        }
      }
    }
  }
  @Getter
  public static class Recurring {
    /**
     * Map of extra parameters for custom features not available in this client library. The content in this map is not serialized under this field's {@code @SerializedName} value. Instead, each key/value pair is serialized as if the key is a root-level field (serialized) name in this param object. Effectively, this map is flattened to its parent instance.
     */
    @SerializedName(ApiRequestParams.EXTRA_PARAMS_KEY)
    Map<String, Object> extraParams;

    /**
     * Default number of trial days when subscribing a customer to this plan using <a href="https://stripe.com/docs/api#create_subscription-trial_from_plan">{@code trial_from_plan=true}</a>.
     */
    @SerializedName("trial_period_days")
    Long trialPeriodDays;

    private Recurring(Map<String, Object> extraParams, Long trialPeriodDays) {
      this.extraParams = extraParams;
      this.trialPeriodDays = trialPeriodDays;
    }
    public static Builder builder() {
      return new Builder();
    }
    public static class Builder {
      private Map<String, Object> extraParams;

      private Long trialPeriodDays;

      /**
       * Finalize and obtain parameter instance from this builder.
       */
      public Recurring build() {
        return new Recurring(this.extraParams, this.trialPeriodDays);
      }

      /**
       * Add a key/value pair to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.Recurring#extraParams} for the field documentation.
       */
      public Builder putExtraParam(String key, Object value) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.put(key, value);
        return this;
      }

      /**
       * Add all map key/value pairs to `extraParams` map. A map is initialized for the first `put/putAll` call, and subsequent calls add additional key/value pairs to the original map. See {@link PriceUpdateParams.Recurring#extraParams} for the field documentation.
       */
      public Builder putAllExtraParam(Map<String, Object> map) {
        if (this.extraParams == null) {
          this.extraParams = new HashMap<>();
        }
        this.extraParams.putAll(map);
        return this;
      }

      /**
       * Default number of trial days when subscribing a customer to this plan using <a href="https://stripe.com/docs/api#create_subscription-trial_from_plan">{@code trial_from_plan=true}</a>.
       */
      public Builder setTrialPeriodDays(Long trialPeriodDays) {
        this.trialPeriodDays = trialPeriodDays;
        return this;
      }
    }
  }
  public enum TaxBehavior implements ApiRequestParams.EnumParam {
    @SerializedName("exclusive")
    EXCLUSIVE("exclusive"),

    @SerializedName("inclusive")
    INCLUSIVE("inclusive"),

    @SerializedName("unspecified")
    UNSPECIFIED("unspecified");
    @Getter(onMethod_ = {@Override})
    private final String value;
    TaxBehavior(String value) {
      this.value = value;
    }
  }
}